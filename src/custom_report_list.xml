<?xml version="1.0" encoding="UTF-8"?>
<custom_report_list>
<custom_report id="1">
<sql>SELECT
	ID,
	bg_progress.batch_group_id,
	CAST (
		'' || to_char(
			created_at,
			'YYYY-MM-DD HH:MM:SS'
		) || '' AS TIMESTAMP
	) AS created_at,
	batch_group_name,
	CAST (avg_score AS INTEGER) AS avg_score
FROM
	bg_progress
WHERE
	college_id = :college_id
ORDER BY
	created_at</sql>
</custom_report>
<custom_report id="2">
<sql>SELECT DISTINCT
	course. ID,
	course_name
FROM
	batch_group,
	batch,
	course
WHERE
	batch_group.college_id = :college_id
AND batch_group. ID = batch.batch_group_id
AND batch.course_id = course. ID </sql>
</custom_report>
<custom_report id = "3">
<sql>
select Tf.college_id, Tf.course_id, Tf.avg_score from (SELECT DISTINCT
	batch_group.college_id,
	batch.course_id,
	CAST (AVG(report.score) AS INTEGER) AS avg_score
FROM
	batch_group,
	batch,	
	assessment,
	report,
	istar_user, user_org_mapping, user_role
WHERE
	batch_group. ID = batch.batch_group_id
AND batch.course_id = assessment.course_id
AND assessment. ID = report.assessment_id
AND report.user_id = istar_user.ID
AND batch_group.college_id = user_org_mapping.organization_id
and user_org_mapping.user_id = istar_user.id
and istar_user.id = user_role.user_id
and user_role.role_id = 12
GROUP BY
	batch_group.college_id,
	batch.course_id
ORDER BY
	batch_group.college_id,
	batch.course_id
)TF
WHERE TF.college_id = :college_id
</sql>
</custom_report>
<custom_report id ="4">
<sql>
select Tf.course_id, CAST (AVG(TF.avg_score) AS INTEGER) AS avg_score from (SELECT DISTINCT
	batch_group.college_id,
	batch.course_id,
	CAST (AVG(report.score) AS INTEGER) AS avg_score
FROM
	batch_group,
	batch,	
	assessment,
	report,
	istar_user, user_org_mapping, user_role
WHERE
	batch_group. ID = batch.batch_group_id
AND batch.course_id = assessment.course_id
AND assessment. ID = report.assessment_id
AND report.user_id = istar_user.ID
AND batch_group.college_id = user_org_mapping.organization_id
and user_org_mapping.user_id = istar_user.id
and istar_user.id = user_role.user_id
and user_role.role_id = 12
GROUP BY
	batch_group.college_id,
	batch.course_id
ORDER BY
	batch_group.college_id,
	batch.course_id
)TF
WHERE TF.college_id != 2
GROUP BY TF.course_id
</sql>
</custom_report>
<custom_report id="5">
<sql>select id, name from batch_group where type=':filter_by' and college_id = :college_id</sql>
</custom_report>
<custom_report id="6">
<sql>SELECT DISTINCT
	istar_user. ID,
	istar_user.email
FROM
	istar_user,
	user_org_mapping,
	user_role
WHERE
	istar_user. ID = user_org_mapping.user_id
AND user_org_mapping.organization_id = :college_id
AND user_org_mapping.user_id = user_role.user_id
AND user_role.role_id = (
	SELECT
		ID
	FROM
		ROLE
	WHERE
		role_name = 'STUDENT'
)</sql>
</custom_report>
<custom_report id="7">
<sql>select distinct istar_user.id, istar_user.email from istar_user, batch_students, user_role
where istar_user.id = batch_students.student_id
and batch_students.batch_group_id in ( :batch_group_ids)
and batch_students.student_id = user_role.user_id
and user_role.role_id = (select id from role where role_name='STUDENT')</sql>
</custom_report>
<custom_report id="8"><sql>
select DISTINCT istar_user.id, istar_user.email from batch_students, istar_user, user_role
where batch_students.student_id = istar_user.id
and user_role.user_id = batch_students.student_id 
and user_role.role_id = (select id from role where role_name='STUDENT')
and batch_students.batch_group_id = :batch_group_id

</sql></custom_report>
<custom_report id="9"><sql>
select cast (count(*) as INTEGER) as count from istar_user, user_org_mapping, user_role
where istar_user.id = user_org_mapping.user_id
and user_org_mapping.user_id = user_role.user_id
and user_role.role_id = (select id from role where role_name='STUDENT')
and user_org_mapping.organization_id = :college_id
</sql></custom_report>
<custom_report id="10"><sql>
SELECT
	istar_user. ID,
	istar_user.email,
	CAST (
		COUNT (
			DISTINCT student_playlist.lesson_id
		) AS INTEGER
	) AS COUNT,
	cast (COUNT (*) OVER () as integer) as total_user
FROM
	istar_user left join user_org_mapping on (istar_user. ID = user_org_mapping.user_id)	
	 left join user_role on (user_org_mapping.user_id = user_role.user_id)
	left join student_playlist on (student_playlist.student_id = istar_user. ID)
WHERE
user_role.role_id = (
	SELECT
		ID
	FROM
		ROLE
	WHERE
		role_name = 'STUDENT'
)
AND user_org_mapping.organization_id = :college_id
AND istar_user.email LIKE '%:search_term%'
GROUP BY
	istar_user. ID,
	istar_user.email
ORDER BY
	istar_user.email LIMIT :limit OFFSET :offset
</sql></custom_report>
<custom_report id="11"><sql>
SELECT
	batch_group. ID,
	batch_group. NAME AS NAME,
	cast (COUNT (
		DISTINCT student_playlist.lesson_id
	)
as integer) as count,
	cast (COUNT (*) OVER () as integer) as total_user
FROM
	batch_group
LEFT JOIN batch_students ON (
	batch_students.batch_group_id = batch_group. ID
)
LEFT JOIN student_playlist ON (
	student_playlist.student_id = batch_students.student_id
)
WHERE
	batch_group.college_id = :college_id
and batch_group.type =':type' 
AND NAME LIKE '%:search_term%'
GROUP BY
	batch_group. ID,
	batch_group. NAME
LIMIT :limit OFFSET :offset

</sql>
</custom_report>
<custom_report id ="12"><sql>
select distinct skill_objective.id, skill_objective.name from skill_objective, cmsession_skill_objective
where cmsession_skill_objective.skill_objective_id = skill_objective.id
and skill_objective.id in (select parent_skill from skill_objective where type ='LEARNING_OBJECTIVE')
order by name
</sql></custom_report>
<custom_report id="13">
<sql>
SELECT DISTINCT
	lesson_cmsession.lesson_id,
	lesson_cmsession.cmsession_id,
	module_course.module_id,
	module_course.course_id
FROM
	module_course,
	cmsession_module,
	lesson_cmsession
WHERE
	module_course.module_id = cmsession_module.module_id
AND cmsession_module.cmsession_id = lesson_cmsession.cmsession_id
AND module_course.course_id = (
	SELECT
		course_id
	FROM
		course_skill_objective
	WHERE
		skill_objective_id = :skill_objective_id
)
ORDER BY
	course_id
</sql>
</custom_report>
<custom_report id="14">
<sql>
SELECT DISTINCT
	lesson_cmsession.lesson_id,
	lesson_cmsession.cmsession_id,
module_course.module_id,
	module_course.course_id
FROM
	module_course,
	cmsession_module,
	lesson_cmsession
WHERE
	module_course.module_id = cmsession_module.module_id
AND cmsession_module.cmsession_id = lesson_cmsession.cmsession_id
AND module_course.module_id = (
	SELECT
		module_id
	FROM
		module_skill_objective
	WHERE
		skill_objective_id = :skill_objective_id
)
ORDER BY
	course_id
</sql>
</custom_report>
<custom_report id="15">
<sql>
SELECT
	distinct lesson.id as lesson_id, cmsession.id as cmsession_id, module.id as module_id, course.id as course_id, lesson.title as lesson_title, lesson.description as lesson_desc, course.course_name as course_name
FROM
	cmsession_skill_objective,
	lesson_cmsession,
	cmsession_module,
	module_course,
	lesson,
	cmsession,
	module,
	course
where  
cmsession_skill_objective.skill_objective_id = :skill_objective_id
and cmsession_skill_objective.cmsession_id = lesson_cmsession.cmsession_id
and lesson_cmsession.cmsession_id = cmsession_module.cmsession_id
and cmsession_module.module_id = module_course.module_id
and module_course.course_id = course.id 
and module_course.module_id= module.id
and cmsession_module.cmsession_id = cmsession.id 
and lesson_cmsession.lesson_id = lesson.id  
</sql></custom_report>
<custom_report id ="16">
<sql>
select distinct student_id from batch_students where batch_group_id = :batch_group_id
</sql>	
</custom_report>
<custom_report id ="17">
<sql>
select distinct course_id from course_skill_objective where  skill_objective_id = :skill_objective_id
and course_id not in (select distinct course_id from batch where batch_group_id = :batch_group_id)
</sql>	
</custom_report>
<custom_report id="18">
<sql>INSERT INTO batch ( ID, createdat, NAME, updatedat, batch_group_id, course_id, order_id, YEAR ) VALUES ( (SELECT COALESCE(max(id),0)+1 from batch), now(), ':batch_name', now(), :bg_id, :course_id, (SELECT COALESCE(max(id),0)+1 from batch), :year )  </sql>
</custom_report>
<custom_report id="19">
<sql>
select id , name from batch_group where parent_group_id = :parent_group_id
</sql>
</custom_report>
<custom_report id ="20">
<sql>select cast (count(*) as integer) as count from batch where batch_group_id= :batch_group_id and course_id = :course_id </sql>
</custom_report>
<custom_report id ="21">
<sql>
select lesson_cmsession.lesson_id, lesson_cmsession.cmsession_id, cmsession_module.module_id, module_course.course_id, lesson.title as lesson_title, course.course_name as course_name from lesson_cmsession, cmsession_module, module_course, lesson, course
where 
lesson_cmsession.cmsession_id =  cmsession_module.cmsession_id
and cmsession_module.module_id = module_course.module_id
and lesson_cmsession.lesson_id = lesson.id 
and module_course.course_id = course.id 
and module_course.course_id = :course_id
and lesson_cmsession.lesson_id = :lesson_id
</sql>
</custom_report>
<custom_report id="22">
<sql>
SELECT DISTINCT
	lesson.title ||' ( Course - '||course.course_name||' )' AS content_title,
	lesson. ID AS content_id
FROM
	student_playlist,
	lesson,
	course
WHERE
	course. ID = student_playlist.course_id
AND lesson. ID = student_playlist.lesson_id
AND student_id = :user_id
ORDER BY
	content_title,content_id
</sql>
</custom_report>
<custom_report id="23">
<sql>
SELECT DISTINCT
	lesson.title ||' ( Course - '||course.course_name||' )' AS content_title,
	lesson. ID AS content_id
FROM
	student_playlist,
	lesson,
	course
WHERE
	course. ID = student_playlist.course_id
AND lesson. ID = student_playlist.lesson_id
AND student_id in (select DISTINCT student_id from batch_students where batch_group_id=:section_id)
ORDER BY
	content_title,content_id
</sql>
</custom_report>
<custom_report id="24">
<sql>
SELECT DISTINCT
	lesson.title ||' ( Course - '||course.course_name||' )' AS content_title,
	lesson. ID AS content_id
FROM
	student_playlist,
	lesson,
	course
WHERE
	course. ID = student_playlist.course_id
AND lesson. ID = student_playlist.lesson_id
AND student_id in (select DISTINCT student_id from batch_students where batch_group_id=:role_id)
ORDER BY
	content_title,content_id


</sql>
</custom_report>
<custom_report id="25">
<sql>
SELECT
	istar_notification.ID,
	istar_notification.created_at,
	TYPE,
	title, 
user_profile.first_name
FROM
	istar_notification,
	user_profile
WHERE
istar_notification.sender_id = user_profile.user_id
and istar_notification.receiver_id = :user_id
AND istar_notification.status = 'UNREAD'
ORDER BY
	created_at DESC
LIMIT 8
</sql>
</custom_report>
<custom_report id="26">
<sql>
select TF.id, TF.created_at, TF.type, TF.action, TF.title, TF.first_name, TF.group_code, TF.notice_type, cast (count(*) over() as integer) as total_rows from (select id, created_at, type, action, title, first_name, group_code, notice_type from (WITH summary AS (
   SELECT
		P.ID,
		P.created_at,
		TYPE,action,
		title,  cast ('You' as varchar) as first_name, group_code,
           ROW_NUMBER() OVER(PARTITION BY p.group_code 
                                 ORDER BY p.created_at DESC) AS rk
    FROM
		istar_notification p
	WHERE P.sender_id = :user_id
  and p.read_by_admin != 't'
)
SELECT s.id, s.created_at,s.type,s.action, s.title, s.first_name,s.group_code, cast('GROUP_NOTICE' as varchar) as notice_type
FROM summary s
WHERE s.rk = 1
ORDER BY s.created_at desc

) T1
union 
(
	SELECT
		istar_notification.ID,
		istar_notification.created_at,
		TYPE,action,
		title, 
	  user_profile.first_name, group_code, 
		cast ('SINGLE_NOTICE' as varchar) as notice_type	
	FROM
		istar_notification,
		user_profile
	WHERE
	istar_notification.sender_id = user_profile.user_id
	and istar_notification.receiver_id = :user_id
	AND istar_notification.status = 'UNREAD'
	ORDER BY
		created_at DESC	
)
)TF

order by TF.created_at desc
limit :limit offset :offset</sql>
</custom_report>
<custom_report id="27">
<sql>
select TOTAL_ADMIN.id ,TOTAL_ADMIN.name, TOTAL_ADMIN.role_name, TOTAL_ADMIN.org_type,TOTAL_ADMIN.image, cast(count(*)filter(where sent='f') as INTEGER) as chat_count   from (SELECT
	user_role.user_id AS ID,
	ROLE .role_name,
	organization. NAME,
	org_type,
	(
		CASE
		WHEN image IS NULL THEN
			'video/android_images/' || SUBSTRING (TRIM(NAME) FROM 1 FOR 1) || '.png'
		ELSE
			image
		END
	) AS image
FROM
	organization,
	user_org_mapping,
	user_role,
	ROLE, chat_messages
WHERE
	user_role.role_id = ROLE . ID
AND organization. ID = user_org_mapping.organization_id
AND user_org_mapping.user_id = user_role.user_id
AND user_role.role_id IN (8, 15)
GROUP BY
	user_role.user_id,
	organization. NAME,
	org_type,
	image,
	role_name
ORDER BY
	NAME
)TOTAL_ADMIN 
, chat_messages where ((TOTAL_ADMIN.id = chat_messages.receiver_id and chat_messages.user_id=:user_id) 
OR (TOTAL_ADMIN.id = chat_messages.user_id and chat_messages.receiver_id=:user_id))
group by TOTAL_ADMIN.id , TOTAL_ADMIN.name, TOTAL_ADMIN.role_name, TOTAL_ADMIN.org_type,TOTAL_ADMIN.image
having (count(*)filter(where sent='f') > 0)
</sql>
</custom_report>
<custom_report id="28">
<sql>
SELECT
	batch_group. ID,
	TRIM (batch_group. NAME) || ' (' || batch_group. TYPE || ')' AS NAME,
	'video/android_images/' || SUBSTRING (
		TRIM (batch_group. NAME)
		FROM
			1 FOR 1
	) || '.png' AS image
FROM
	batch_group, batch_group_messages
where batch_group.id = batch_group_messages.batch_group_id
and batch_group_messages.sender_id=:user_id
GROUP BY
	batch_group. ID,
	batch_group. NAME,
	image
ORDER BY
	TRIM (batch_group. NAME)
</sql>
</custom_report>
<custom_report id="29">
<sql>
SELECT
	istar_user. ID,
	user_profile.first_name,
	user_profile.profile_image,
	istar_user.email,
	cast (COUNT (chat_messages)as integer) AS chat_count
FROM
	chat_messages,
	istar_user,
	user_profile
WHERE
	istar_user. ID = user_profile.user_id
and istar_user.id in (select user_role.user_id from user_role where role_id not in (select id from role where role_name in ('SUPER_ADMIN','COORDINATOR','ORG_ADMIN')))
AND ((chat_messages.receiver_id = istar_user. ID
AND chat_messages.user_id = :user_id) OR (chat_messages.receiver_id = :user_id
AND chat_messages.user_id = istar_user. ID))
AND sent = 'f'
GROUP BY
	istar_user. ID,
	user_profile.first_name,
	user_profile.profile_image,
	istar_user.email
having (COUNT (chat_messages)>0)	 
</sql>
</custom_report>
<custom_report id="30">
<sql>
SELECT
	user_role.user_id AS ID,
	ROLE .role_name,
	organization. NAME,
	org_type,
	(
		CASE
		WHEN image IS NULL THEN
			'video/android_images/' || SUBSTRING (TRIM(NAME) FROM 1 FOR 1) || '.png'
		ELSE
			image
		END
	) AS image
FROM
	organization,
	user_org_mapping,
	user_role,
	ROLE
WHERE
	user_role.role_id = ROLE . ID
AND organization. ID = user_org_mapping.organization_id
AND user_org_mapping.user_id = user_role.user_id
AND user_role.role_id IN (8, 15)
and  lower(name) like '%:search_term%'
GROUP BY
	user_role.user_id,
	organization. NAME,
	org_type,
	image,
	role_name
ORDER BY
	NAME
</sql>
</custom_report>
<custom_report id="31">
<sql>
SELECT
	batch_group. ID,
	TRIM (batch_group. NAME) || ' (' || batch_group. TYPE || ')' AS NAME,
	'video/android_images/' || SUBSTRING (
		TRIM (batch_group. NAME)
		FROM
			1 FOR 1
	) || '.png' AS image
FROM
	batch_group
where lower(batch_group.name) like '%:search_term%'
GROUP BY
	batch_group. ID,
	batch_group. NAME,
	image
ORDER BY
	TRIM (batch_group. NAME)
</sql>
</custom_report>
<custom_report id="32">
<sql>
SELECT
	istar_user. ID,
	user_profile.first_name,
	user_profile.profile_image,
	istar_user.email
FROM	
	istar_user,
	user_profile
WHERE
	istar_user. ID = user_profile.user_id
and istar_user.id in (select user_role.user_id from user_role where role_id not in (select id from role where role_name in ('SUPER_ADMIN','COORDINATOR','ORG_ADMIN')))
and lower(istar_user.email) like '%:search_term%'
GROUP BY
	istar_user. ID,
	user_profile.first_name,
	user_profile.profile_image,
	istar_user.email
</sql>
</custom_report>
<custom_report id ="33">
<sql>
select TOTAL_ADMIN.id , TOTAL_ADMIN.name, TOTAL_ADMIN.role_name, TOTAL_ADMIN.org_type,TOTAL_ADMIN.image,  cast(count(*)filter(where sent='f') as INTEGER) as chat_count  from (SELECT
	id, role_name, name, org_type, image
FROM
	(
		SELECT
			user_role.user_id AS ID,
			ROLE .role_name,
			organization. NAME,
			org_type,
			(
				CASE
				WHEN image IS NULL THEN
					'video/android_images/' || SUBSTRING (TRIM(NAME) FROM 1 FOR 1) || '.png'
				ELSE
					image
				END
			) AS image
		FROM
			organization,
			user_org_mapping,
			user_role,
			ROLE
		WHERE
			user_role.role_id = ROLE . ID
		AND organization. ID = user_org_mapping.organization_id
		AND user_org_mapping.user_id = user_role.user_id
		AND user_role.role_id IN (13)
		GROUP BY
			user_role.user_id,
			organization. NAME,
			org_type,
			image,
			role_name
		ORDER BY
			NAME
	) TT
UNION
	(
		SELECT
			user_role.user_id AS ID,
			ROLE .role_name,
			organization. NAME,
			org_type,
			(
				CASE
				WHEN image IS NULL THEN
					'video/android_images/' || SUBSTRING (TRIM(NAME) FROM 1 FOR 1) || '.png'
				ELSE
					image
				END
			) AS image
		FROM
			organization,
			user_org_mapping,
			user_role,
			ROLE
		WHERE
			user_role.role_id = ROLE . ID
		AND organization. ID = user_org_mapping.organization_id
		AND user_org_mapping.user_id = user_role.user_id
		AND user_role.role_id IN (15)
		and organization.id in (select user_org_mapping.organization_id from user_org_mapping where user_id = :user_id)
		GROUP BY
			user_role.user_id,
			organization. NAME,
			org_type,
			image,
			role_name
		ORDER BY
			NAME
	)
)TOTAL_ADMIN , chat_messages
where ((TOTAL_ADMIN.id = chat_messages.receiver_id AND chat_messages.user_id=:user_id) OR (TOTAL_ADMIN.id = :user_id AND chat_messages.user_id=chat_messages.receiver_id))
group by TOTAL_ADMIN.id , TOTAL_ADMIN.name, TOTAL_ADMIN.role_name, TOTAL_ADMIN.org_type,TOTAL_ADMIN.image
order by chat_count desc
</sql>
</custom_report>
<custom_report id ="34">
<sql>
SELECT
	batch_group. ID,
	TRIM (batch_group. NAME) || ' (' || batch_group. TYPE || ')' AS NAME,
	'video/android_images/' || SUBSTRING (
		TRIM (batch_group. NAME)
		FROM
			1 FOR 1
	) || '.png' AS image
FROM
	batch_group, batch_group_messages
where batch_group.id = batch_group_messages.batch_group_id
and batch_group_messages.sender_id=:user_id
and batch_group.college_id in (select user_org_mapping.organization_id from user_org_mapping where  user_org_mapping.user_id = :user_id)
GROUP BY
	batch_group. ID,
	batch_group. NAME,
	image
ORDER BY
	TRIM (batch_group. NAME)
</sql>
</custom_report>
<custom_report id ="35">
<sql>
SELECT
	istar_user. ID,
	user_profile.first_name,
	user_profile.profile_image,
	istar_user.email,
	cast (COUNT (chat_messages) as integer) AS chat_count
FROM
	chat_messages,
	istar_user,
	user_profile,
	user_org_mapping
WHERE
	istar_user. ID = user_profile.user_id
AND istar_user. ID = user_org_mapping.user_id
AND user_org_mapping.organization_id IN (
	SELECT
		organization_id
	FROM
		user_org_mapping
	WHERE
		user_id = :user_id
)
AND (
	(
		chat_messages.receiver_id = :user_id
		AND chat_messages.user_id = istar_user. ID
	)
	OR (
		chat_messages.receiver_id = istar_user. ID
		AND chat_messages.user_id = :user_id
	)
)
AND sent = 'f'
GROUP BY
	istar_user. ID,
	user_profile.first_name,
	user_profile.profile_image,
	istar_user.email 
order by chat_count desc
</sql>
</custom_report>
<custom_report id="36">
<sql>
select * from (SELECT
	*
FROM
	(
		SELECT
			user_role.user_id AS ID,
			ROLE .role_name,
			organization. NAME,
			org_type,
			(
				CASE
				WHEN image IS NULL THEN
					'video/android_images/' || SUBSTRING (TRIM(NAME) FROM 1 FOR 1) || '.png'
				ELSE
					image
				END
			) AS image
		FROM
			organization,
			user_org_mapping,
			user_role,
			ROLE
		WHERE
			user_role.role_id = ROLE . ID
		AND organization. ID = user_org_mapping.organization_id
		AND user_org_mapping.user_id = user_role.user_id
		AND user_role.role_id IN (13)
		GROUP BY
			user_role.user_id,
			organization. NAME,
			org_type,
			image,
			role_name
		ORDER BY
			NAME
	) TT
UNION
	(
		SELECT
			user_role.user_id AS ID,
			ROLE .role_name,
			organization. NAME,
			org_type,
			(
				CASE
				WHEN image IS NULL THEN
					'video/android_images/' || SUBSTRING (TRIM(NAME) FROM 1 FOR 1) || '.png'
				ELSE
					image
				END
			) AS image
		FROM
			organization,
			user_org_mapping,
			user_role,
			ROLE
		WHERE
			user_role.role_id = ROLE . ID
		AND organization. ID = user_org_mapping.organization_id
		AND user_org_mapping.user_id = user_role.user_id
		AND user_role.role_id IN (15)
		and organization.id in (select user_org_mapping.organization_id from user_org_mapping where user_id = :user_id)
		GROUP BY
			user_role.user_id,
			organization. NAME,
			org_type,
			image,
			role_name
		ORDER BY
			NAME
	)
)TF
where lower(TF.name) like '%:search_term%'
and TF.id !=:user_id
</sql>
</custom_report>
<custom_report id="37">
<sql>
SELECT
	batch_group. ID,
	TRIM (batch_group. NAME) || ' (' || batch_group. TYPE || ')' AS NAME,
	'video/android_images/' || SUBSTRING (
		TRIM (batch_group. NAME)
		FROM
			1 FOR 1
	) || '.png' AS image
FROM
	batch_group
where 
lower(batch_group.name) like '%:search_term%'
and batch_group.college_id in (select user_org_mapping.organization_id from user_org_mapping where  user_org_mapping.user_id = :user_id)
GROUP BY
	batch_group. ID,
	batch_group. NAME,
	image
ORDER BY
	TRIM (batch_group. NAME)
</sql>
</custom_report>
<custom_report id="38">
<sql>
SELECT
	istar_user. ID,
	user_profile.first_name,
	user_profile.profile_image,
	istar_user.email
FROM
	
	istar_user,
	user_profile,
	user_org_mapping
WHERE

istar_user. ID = user_profile.user_id
AND istar_user. ID = user_org_mapping.user_id
AND user_org_mapping.organization_id IN (
	SELECT
		organization_id
	FROM
		user_org_mapping
	WHERE
		user_id = :user_id
)
and lower(istar_user.email) like '%:search_term%'
GROUP BY
	istar_user. ID,
	user_profile.first_name,
	user_profile.profile_image,
	istar_user.email 

</sql>
</custom_report>
</custom_report_list>