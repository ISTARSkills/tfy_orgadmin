<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<istar_reports>
<reports id="3040" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Section Name" isVisible="true" name="name" />		
		<column columnHandler="NONE" display_name="rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
SELECT 	batch_group. NAME, 	CAST (AVG(master) AS INTEGER) AS master, 	CAST (AVG(rookie) AS INTEGER) AS rookie, 	CAST (AVG(apprentice) AS INTEGER) AS apprentice, 	CAST (AVG(wizard) AS INTEGER) AS wizard FROM 	mastery_level_per_course, 	batch_group WHERE 	mastery_level_per_course.college_id = :college_id AND course_id = :course_id AND batch_group. ID = mastery_level_per_course.batch_group_id GROUP BY 	batch_group. NAME		</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Section Wise Performance of Students</title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>
<reports id="3041" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
		<column columnHandler="NONE" display_name="rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
SELECT 	course.course_name, 	CAST (AVG(master)  AS INTEGER) AS master, 	CAST (AVG(rookie)  AS INTEGER) AS rookie, 	CAST ( 		AVG (apprentice)  AS INTEGER 	) AS apprentice, 	CAST (AVG(wizard)  AS INTEGER) AS wizard, 	CAST ( 		( 			AVG (master) + AVG (rookie) + AVG (apprentice) + AVG (wizard) 		) AS INTEGER 	) AS total FROM 	mastery_level_per_course, 	course WHERE 	 mastery_level_per_course.college_id = :college_id AND batch_group_id = :batch_group_id AND course. ID = mastery_level_per_course.course_id GROUP BY 	course.course_name ORDER BY 	total		</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Program Wise Performance of Students</title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>
<reports id="3042" type_of_report="table">	
	    <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="PROFILE_IMAGE" display_name="Profile Image" isVisible="true" name="profile_image" />
		<column columnHandler="NONE" display_name="First Name" isVisible="true" name="first_name" />
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
		<column columnHandler="NONE" display_name="Mobile Number" isVisible="true" name="mobile" />
		<column columnHandler="STAR_RATING" display_name="Attendance" isVisible="true" name="atten_perc" />
		<column columnHandler="NONE" display_name="Section/Roles" isVisible="true" name="batch_groups" />		
		<column columnHandler="USER_HANDLER" display_name="Action" isVisible="true" name="id"/>		
	<sql>
SELECT ID,
	COALESCE(trim(profile_image),'http://api.talentify.in/video/android_images/S.png') as profile_image,
	COALESCE(first_name,'NA') as first_name,
	(case when atten_perc is not null then
						
					case 
					when atten_perc 	&lt;= 20 then 1
					when atten_perc 	&gt; 20 and atten_perc &lt;=40 then 2
					when atten_perc 	&gt; 40 and atten_perc &lt;=60 then 3
          when atten_perc 	&gt; 60 and atten_perc &lt;=80 then 4
          when atten_perc 	&gt; 80 and atten_perc &lt;=100 then 5
					end
		else 0
	end ) as atten_perc,
	email,
	 mobile,
	COALESCE(batch_groups,'') as batch_groups,	
	COALESCE(courses,'') as courses,
	COALESCE(course_ids,'') as course_ids, count(*) OVER() as total_rows
FROM
	(
		SELECT
			istar_user. ID,
			user_profile.first_name,
			istar_user.email,
			istar_user.mobile,
			CASE
		WHEN user_profile.profile_image LIKE 'null'
		OR user_profile.profile_image IS NULL THEN
			'http://api.talentify.in/video/android_images/' || UPPER (
				SUBSTRING (
					user_profile.first_name
					FROM
						1 FOR 1
				)
			) || '.png'
		ELSE
			'http://api.talentify.in/' || user_profile.profile_image
		END AS profile_image,
		string_agg (
			DISTINCT (batch_group. NAME),
			', '
		) AS batch_groups,
		string_agg (DISTINCT(course_name), ', ') AS courses,
		string_agg (
			DISTINCT (
				CAST (batch_group. ID AS VARCHAR)
			),
			', '
		) AS batch_group_ids,
		string_agg (
			DISTINCT (CAST(course. ID AS VARCHAR)),
			', '
		) AS course_ids
	FROM

	istar_user left join user_profile on (user_profile.user_id = istar_user. ID)
	left join user_org_mapping on (user_org_mapping.user_id = istar_user. ID)
	left join user_role on (user_role.user_id = istar_user. ID)
	left join batch_students on (istar_user. ID = batch_students.student_id)
	left join batch_group on (batch_students.batch_group_id = batch_group. ID AND batch_group.college_id = :college_id)
	left join batch on (batch_group. ID = batch.batch_group_id)
	left join course on (batch.course_id = course. ID)
		
	WHERE
		user_org_mapping.organization_id = :college_id
	
	and	user_role.role_id in (select id from role where role_name='STUDENT') 
GROUP BY
		istar_user. ID,
		user_profile.first_name,
		istar_user.email,
		user_profile.profile_image
	) T1
LEFT JOIN (
	SELECT
		user_id,
		COALESCE (
			CAST (
				(
					(
						COUNT (*) FILTER (

							WHERE
								attendance.status = 'ABSENT'
						)
					) * 100 / (
						COUNT (*) FILTER (

							WHERE
								attendance.status = 'ABSENT'
							OR attendance.status = 'PRESENT'
						)
					)
				) AS INTEGER
			),
			0
		) AS atten_perc
	FROM
		attendance
	WHERE
		user_id IN (
			SELECT
				istar_user. ID
			FROM
				istar_user,
				user_org_mapping
			WHERE
				istar_user. ID = user_org_mapping.user_id
			AND user_org_mapping.organization_id = :college_id
		)
	GROUP BY
		user_id
) T2 ON (T1. ID = T2.user_id) 
order by :order_by_column :order_type limit :limit offset :offset

		</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Section Wise Performance of Students</title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>

<reports id="3043" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Date" isVisible="true" name="created_at" />		
		<column columnHandler="NONE" display_name="Section" isVisible="true" name="batch_group_name" />
		<column columnHandler="NONE" display_name="Avg Score" isVisible="true" name="avg_score" />
		
	<sql>
	SELECT 	created_at, 	batch_group_name, 	avg_score FROM 	bg_progress WHERE 	college_id = :college_id ORDER BY 	created_at
</sql>
	<filter_sql>
		
	</filter_sql>	
		<title></title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>

<reports id="3044" type_of_report="column">	
		<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
		<column columnHandler="NONE" display_name="Avg Score" isVisible="true" name="avg_score" />
		
	<sql>
SELECT DISTINCT 	csobj.skill_objective_id, 	C .course_name, 	CAST ( 		AVG (sp.percentage) AS INTEGER 	)as avg_score FROM 	batch_group AS bg, 	batch AS b, 	course_skill_objective AS csobj, 	course C, 	skill_precentile sp, 	batch_students AS bs WHERE 	bg.college_id = :college_id AND b.batch_group_id = bg. ID AND bs.batch_group_id = b.batch_group_id AND b.course_id = csobj.course_id AND csobj.course_id = C . ID AND csobj.skill_objective_id = sp.skill_id AND bs.student_id = sp.student_id GROUP BY 	C .course_name, 	csobj.skill_objective_id ORDER BY 	avg_score </sql>
	<filter_sql>
		
	</filter_sql>	
		<title></title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>

<reports id="3045" type_of_report="table">	
		<column columnHandler="NONE" display_name="Id" isVisible="true" name="bg_id" />       
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="bg_name" />
		<column columnHandler="NONE" display_name="Type" isVisible="true" name="bg_type" />
		<column columnHandler="NONE" display_name="Parent Group" isVisible="true" name="bg_parent_group" />
		<column columnHandler="NONE" display_name="Number of Batchs" isVisible="true" name="batches" />
		<column columnHandler="NONE" display_name="Number of Students" isVisible="true" name="students" />
		<column columnHandler="NONE" display_name="Group Code" isVisible="true" name="batch_code" />
		<column columnHandler="BG_ROLE_HANDLER" display_name="Edit" isVisible="true" name="bg_id"/>
	<sql>
SELECT
	T1.bg_id,
	T1.bg_name,
	T1.batch_code,
	T1.bg_type,
	T1.bg_parent_group as bg_parent_group,
	COALESCE (T2.batches, 0) AS batches,
	COALESCE (T3.students, 0) AS students,
	COUNT (*) OVER () AS total_rows
FROM
	(
		SELECT
			batch_group. ID AS bg_id,
			batch_group.type  as bg_type,
			batch_group. NAME AS bg_name,
			batch_group.bg_desc AS bg_desc,
			batch_group.batch_code,
			COALESCE(PBG.name,'NONE') as bg_parent_group
		FROM
			batch_group left join  batch_group PBG on (PBG.id = batch_group.parent_group_id)
 		WHERE
			batch_group.college_id = :college_id
	) T1
LEFT JOIN (
	SELECT
		COUNT (batch. ID) AS batches,
		batch.batch_group_id
	FROM
		batch
	WHERE
		batch.batch_group_id IN (
			SELECT
				batch_group. ID
			FROM
				batch_group
			WHERE
				batch_group.college_id = :college_id
		)
	GROUP BY
		batch.batch_group_id
) T2 ON (T2.batch_group_id = T1.bg_id)
LEFT JOIN (
	SELECT
		batch_students.batch_group_id,
		COUNT (batch_students.student_id) AS students
	FROM
		batch_students
	WHERE
		batch_students.batch_group_id IN (
			SELECT
				batch_group. ID
			FROM
				batch_group
			WHERE
				batch_group.college_id = :college_id
		)
	GROUP BY
		batch_students.batch_group_id
) T3 ON (T3.batch_group_id = T1.bg_id)
 order by :order_by_column :order_type limit :limit offset :offset</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Sections Details</title>
		<y_axis_title>Number of Sections</y_axis_title>
</reports>
<reports id="3046" type_of_report="table">	
	    <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="PROFILE_IMAGE" display_name="Profile Image" isVisible="true" name="profile_image" />
		<column columnHandler="NONE" display_name="First Name" isVisible="true" name="first_name" />
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
		<column columnHandler="NONE" display_name="Mobile Number" isVisible="true" name="mobile" />
		<column columnHandler="STAR_RATING" display_name="Attendance" isVisible="true" name="atten_perc" />
		<column columnHandler="NONE" display_name="Batch Groups" isVisible="true" name="batch_groups" />		
		<column columnHandler="USER_HANDLER" display_name="Action" isVisible="true" name="id"/>		
	<sql>
SELECT 	profile_image, 	first_name, 	(case when atten_perc is not null then 						 					case 					when atten_perc 	&lt;= 20 then 1 					when atten_perc 	&gt; 20 and atten_perc &lt;=40 then 2 					when atten_perc 	&gt; 40 and atten_perc &lt;=60 then 3           when atten_perc 	&gt; 60 and atten_perc &lt;=80 then 4           when atten_perc 	&gt; 80 and atten_perc &lt;=100 then 5 					end 		else 0 	end ) as atten_perc, 	email,   mobile, 	batch_groups, 	ID, 	courses, 	course_ids, count(*) OVER() as total_rows FROM 	( 		SELECT 			istar_user. ID, 			user_profile.first_name, 			istar_user.email,       coalesce (istar_user.mobile,0) as mobile, 			CASE 		WHEN user_profile.profile_image LIKE 'null' 		OR user_profile.profile_image IS NULL THEN 			'http://api.talentify.in/video/android_images/' || UPPER ( 				SUBSTRING ( 					user_profile.first_name 					FROM 						1 FOR 1 				) 			) || '.png' 		ELSE 			'http://api.talentify.in/' || user_profile.profile_image 		END AS profile_image, 		string_agg ( 			DISTINCT (batch_group. NAME), 			', ' 		) AS batch_groups, 		string_agg (DISTINCT(course_name), ', ') AS courses, 		string_agg ( 			DISTINCT ( 				CAST (batch_group. ID AS VARCHAR) 			), 			', ' 		) AS batch_group_ids, 		string_agg ( 			DISTINCT (CAST(course. ID AS VARCHAR)), 			', ' 		) AS course_ids 	FROM 		course, 		batch, 		batch_group, 		istar_user, 		batch_students, 		user_profile, 		user_org_mapping 	WHERE 		user_org_mapping.organization_id in (SELECT id FROM organization) 	AND user_org_mapping.user_id = istar_user. ID 	AND istar_user. ID = batch_students.student_id 	AND batch_students.batch_group_id = batch_group. ID 	AND batch_group.college_id in (SELECT id FROM organization) 	AND user_profile.user_id = istar_user. ID 	AND batch_group. ID = batch.batch_group_id 	AND batch.course_id = course. ID 	GROUP BY 		istar_user. ID, 		user_profile.first_name, 		istar_user.email, 		user_profile.profile_image 	) T1 LEFT JOIN ( 	SELECT 		user_id, 		COALESCE ( 			CAST ( 				( 					( 						COUNT (*) FILTER (  							WHERE 								attendance.status = 'ABSENT' 						) 					) * 100 / ( 						COUNT (*) FILTER (  							WHERE 								attendance.status = 'ABSENT' 							OR attendance.status = 'PRESENT' 						) 					) 				) AS INTEGER 			), 			0 		) AS atten_perc 	FROM 		attendance 	WHERE 		user_id IN ( 			SELECT 				istar_user. ID 			FROM 				istar_user, 				user_org_mapping 			WHERE 				istar_user. ID = user_org_mapping.user_id 			AND user_org_mapping.organization_id in (SELECT id FROM organization) 		) 	GROUP BY 		user_id ) T2 ON (T1. ID = T2.user_id) order by :order_by_column :order_type limit :limit offset :offset

		</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Section Wise Performance of Students</title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>
<reports id="3047" type_of_report="table">	
		<column columnHandler="NONE" display_name="Account Name" isVisible="true" name="cname" />
		<column columnHandler="NONE" display_name="Master" isVisible="true" name="avgmaaster" />
		<column columnHandler="NONE" display_name="Wizard" isVisible="true" name="avgwiz" />
		<column columnHandler="NONE" display_name="Rooki" isVisible="true" name="avgrooki" />
		<column columnHandler="NONE" display_name="Apprentice" isVisible="true" name="avgapp" />		
	<sql>
SELECT 	T1.cname, 	T1.summaster / countmaster AS avgmaaster, 	T1.sumwizard / countwizard AS avgwiz, 	T1.sumrookie / countrookie AS avgrooki, 	T1.sumapprentice / countapprentice AS avgapp,   count(*) OVER() as total_rows FROM 	( 		SELECT 			organization. NAME AS cname, 			SUM ( 				mastery_level_per_course.apprentice 			) AS sumapprentice, 			SUM ( 				mastery_level_per_course.rookie 			) AS sumrookie, 			SUM ( 				mastery_level_per_course.master 			) AS summaster, 			SUM ( 				mastery_level_per_course.wizard 			) AS sumwizard, 			COUNT ( 				mastery_level_per_course.apprentice 			) AS countapprentice, 			COUNT ( 				mastery_level_per_course.rookie 			) AS countrookie, 			COUNT ( 				mastery_level_per_course.master 			) AS countmaster, 			COUNT ( 				mastery_level_per_course.wizard 			) AS countwizard 		FROM 			mastery_level_per_course, 			organization 		WHERE 			organization. ID = mastery_level_per_course.college_id 		GROUP BY 			cname 	) T1 order by :order_by_column :order_type limit :limit offset :offset
		</sql>
	<filter_sql>
		
	</filter_sql>	
		<title></title>
		<y_axis_title></y_axis_title>
</reports>

<reports id="3039" type_of_report="table">	
		<column columnHandler="NONE" display_name="ID" isVisible="true" name="tid" />
		<column columnHandler="NONE" display_name="Trainer Name" isVisible="true" name="tname" />
		<column columnHandler="NONE" display_name="Trainer Email" isVisible="true" name="temail" />
		<column columnHandler="STAR_RATING" display_name="Rating" isVisible="true" name="avgrating" />
		<column columnHandler="NONE" display_name="Late Started" isVisible="true" name="late_started" />	
		<column columnHandler="NONE" display_name="Early Ended" isVisible="true" name="early_ended" />	
		<column columnHandler="NONE" display_name="Location" isVisible="true" name="city" />		
		<column columnHandler="NONE" display_name="Unbilled Hours" isVisible="true" name="hours" />			
	<sql>
SELECT   TF.tid, 	TF.tname, 	TF.joindate, 	TF.temail, 	TF.avgrating, 	COALESCE (TF.LATE_STARTED, 0) AS LATE_STARTED, 	COALESCE (TF.EARLY_ENDED, 0) AS EARLY_ENDED, 	TF.city, 	COALESCE (TF.hours, 0) AS hours, 	COALESCE (TF. MIN, 0) AS MIN, count(*) OVER() as total_rows 	 FROM 	( 		( 			SELECT 				tid, 				joindate, 				tname, 				temail, 				city, 				( 					CASE 					WHEN round( 						AVG (student_feedback.rating) 					) IS NULL THEN 						1 					ELSE 						round( 							AVG (student_feedback.rating) 						) 					END 				) AS avgrating 			FROM 				( 					SELECT 						istar_user. ID AS tid, 						istar_user.created_at AS joindate, 						user_profile.first_name AS tname, 						istar_user.email AS temail, 						pincode.city AS city 					FROM 						address, 						pincode, 						istar_user, 						user_profile, 						user_role 					WHERE 						user_profile.address_id = address. ID 					AND istar_user. ID = user_profile.user_id 					AND address.pincode_id = pincode. ID 					AND user_profile.user_id = user_role.user_id 					AND user_role.role_id = 14 				) xxx 			LEFT JOIN batch_schedule_event ON ( 				xxx.tid = batch_schedule_event.actor_id 			) 			LEFT JOIN student_feedback ON ( 				student_feedback.trainer_id = xxx.tid 				AND student_feedback.event_id = batch_schedule_event. ID 			) 			GROUP BY 				tid, 				joindate, 				tname, 				temail, 				city 			ORDER BY 				tid 		) T1 		LEFT JOIN ( 			SELECT 				exception_log.trainer_id AS t_id, 				COUNT (*) FILTER (  					WHERE 						exception_log.exception_type = 'LATE_STARTED' 				) AS LATE_STARTED, 				COUNT (*) FILTER (  					WHERE 						exception_log.exception_type = 'EARLY_ENDED' 				) AS EARLY_ENDED 			FROM 				exception_log 			WHERE 				exception_log.exception_component = 'EVENT_DELIVERY' 			GROUP BY 				exception_log.trainer_id 		) T2 ON (T1.tid = T2.t_id) 		LEFT JOIN ( 			SELECT 				batch_schedule_event.actor_id AS tids, 				SUM ( 					batch_schedule_event.eventhour 				) AS hours, 				SUM ( 					batch_schedule_event.eventminute 				) AS MIN 			FROM 				batch_schedule_event 			WHERE 				batch_schedule_event. TYPE != 'BATCH_SCHEDULE_EVENT_PRESENTOR' 			AND batch_schedule_event. TYPE != 'BATCH_SCHEDULE_EVENT_STUDENT' 			GROUP BY 				actor_id 		) T3 ON (T3.tids = T1.tid) 	) TF	order by :order_by_column :order_type limit :limit offset :offset	</sql>
	<filter_sql>
		
	</filter_sql>	
		<title></title>
		<y_axis_title></y_axis_title>
</reports>

<reports id="3048" type_of_report="pie">	
		<column columnHandler="NONE" display_name="Category" isVisible="true" name="category" />
		<column columnHandler="NONE" display_name="Count" isVisible="true" name="count" />
	<sql>
	select 
cast ((avg(master)*100/(avg(apprentice) +avg(apprentice)+ avg(wizard)+ avg(rookie))) as integer) as master, cast ((avg(apprentice)*100/(avg(apprentice) +avg(apprentice)+ avg(wizard)+ avg(rookie))) as integer ) as apprentice, cast ((avg(wizard)*100/(avg(apprentice) +avg(apprentice)+ avg(wizard)+ avg(rookie))) as integer) as wizard, cast ((avg(rookie)*100/(avg(apprentice) +avg(apprentice)+ avg(wizard)+ avg(rookie))) as integer) as rookie  FROM
			mastery_level_per_course, batch
		WHERE
mastery_level_per_course.course_id = batch.course_id
and mastery_level_per_course.batch_group_id = batch.batch_group_id
			and batch.id  = :batch_id		AND college_id = :college_id
		GROUP BY
			mastery_level_per_course.course_id,
			college_id 
		HAVING ((avg(apprentice) +avg(apprentice)+ avg(wizard)+ avg(rookie)) >0)	
</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Over All Level of Mastery</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3049" type_of_report="bar">	
        <column columnHandler="NONE" display_name="Skill Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="Wizard" isVisible="true" name="wizard" />
		<column columnHandler="NONE" display_name="Rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="Apprentice" isVisible="true" name="apprentice" />
	<sql>	
WITH summary AS (
	SELECT
		skill_objective. NAME,
		rookie,
		master,
		apprentice,
		wizard,
		ROW_NUMBER () OVER (
			PARTITION BY skill_objective. NAME
			ORDER BY
				mastery_level_per_course.created_at DESC
		) AS rk
	FROM
		mastery_level_per_course,
		skill_objective,
		batch
	WHERE
		batch.batch_group_id = mastery_level_per_course.batch_group_id
	AND batch. ID = :batch_id
	AND college_id = :college_id
AND skill_objective.type = 'SKILL'
	AND skill_objective. ID = mastery_level_per_course.skill_id
	AND (
		rookie + master + apprentice + wizard > 0
	)
) SELECT
	s.*
FROM
	summary s
WHERE
	s.rk = 1 
</sql>
<filter_sql>
		
	</filter_sql>	
		<title>Level Of Mastery Per Skill</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3051" type_of_report="bar">	
        <column columnHandler="NONE" display_name="Skill Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="Wizard" isVisible="true" name="wizard" />
		<column columnHandler="NONE" display_name="Rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="Apprentice" isVisible="true" name="apprentice" />
	<sql>	
WITH summary AS ( 	SELECT 		pp.name, 		CAST (mm.rookie AS INTEGER) AS rookie, 		CAST (mm.master AS INTEGER) AS master, 		CAST (mm.apprentice AS INTEGER) AS apprentice, 		CAST (mm.wizard AS INTEGER) AS wizard, 		ROW_NUMBER () OVER ( 			PARTITION BY pp.name 			ORDER BY 				mm.created_at DESC 		) AS rk 	FROM 		mastery_level_per_course mm, 		skill_objective pp 	WHERE 		course_id = :course_id 	AND college_id = :college_id AND pp.type = 'SKILL'	AND pp. ID = mm.skill_id 	AND ( 		rookie + master + apprentice + wizard > 0 	) ) SELECT 	s.* FROM 	summary s WHERE 	s.rk = 1
</sql><filter_sql>
		
	</filter_sql>	
		<title>Level Of Mastery Per Skill</title>
		<y_axis_title>Percentage of Student</y_axis_title>
</reports>
<reports id="3050" type_of_report="pie">	
		<column columnHandler="NONE" display_name="Category" isVisible="true" name="category" />
		<column columnHandler="NONE" display_name="Count" isVisible="true" name="count" />
	<sql>	
select 
cast ((avg(master)*100/(avg(apprentice) +avg(apprentice)+ avg(wizard)+ avg(rookie))) as integer) as master, cast ((avg(apprentice)*100/(avg(apprentice) +avg(apprentice)+ avg(wizard)+ avg(rookie))) as integer ) as apprentice, cast ((avg(wizard)*100/(avg(apprentice) +avg(apprentice)+ avg(wizard)+ avg(rookie))) as integer) as wizard, cast ((avg(rookie)*100/(avg(apprentice) +avg(apprentice)+ avg(wizard)+ avg(rookie))) as integer) as rookie  FROM
			mastery_level_per_course
		WHERE
			course_id = :course_id	AND college_id = :college_id
		GROUP BY
			course_id,
			college_id 
		HAVING ((avg(apprentice) +avg(apprentice)+ avg(wizard)+ avg(rookie)) >0)


</sql> <filter_sql>
		
	</filter_sql>	
		<title>Over All Level of Mastery</title>
		<y_axis_title>Percentage od Students</y_axis_title>
</reports>
<reports id="3052" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
		<column columnHandler="NONE" display_name="rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
SELECT
	course.course_name,
	CAST (AVG(master) AS INTEGER) AS master,
	CAST (AVG(rookie) AS INTEGER) AS rookie,
	CAST (AVG(apprentice) AS INTEGER) AS apprentice,
	CAST (AVG(wizard) AS INTEGER) AS wizard,
	CAST (
		(
			AVG (master) + AVG (rookie) + AVG (apprentice) + AVG (wizard)
		) AS INTEGER
	) AS total
FROM
	mastery_level_per_course,
	course
WHERE
	mastery_level_per_course.college_id = :college_id
AND batch_group_id in (select distinct id from batch_group where parent_group_id = :batch_group_id
UNION select id from batch_group where id = :batch_group_id )
AND course. ID = mastery_level_per_course.course_id
GROUP BY
	course.course_name
ORDER BY
	total 	
	</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Role Wise Performance of Students</title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>
<reports id="3053" type_of_report="area">	
	    <column columnHandler="NONE" display_name="Created At" isVisible="true" name="row_key" />		
		<column columnHandler="NONE" display_name="Attendance" isVisible="true" name="col_value" />
		<column columnHandler="NONE" display_name="Batch Name" isVisible="true" name="col_name" />		
	<sql>
SELECT
	attendance_stats.created_at as row_key,
	cast (attendance_stats.percentage_attendance as integer) AS col_value,
	batch. NAME AS col_name
FROM
	attendance_stats,
	batch, batch_group
WHERE
batch.batch_group_id = batch_group.id
and batch.course_id = attendance_stats.course_id
and batch_group.id = attendance_stats.batch_group_id
and attendance_stats.course_id	 = :course_id	
and batch_group.college_id = :college_id
AND attendance_stats.percentage_attendance != 0
GROUP BY
	attendance_stats.created_at,
	attendance_stats.percentage_attendance,
	batch. NAME
ORDER BY
	attendance_stats.created_at 		
	</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Attendance Record in Sections Over Time</title>
		<y_axis_title>Percentage</y_axis_title>
</reports>
<reports id="3054" type_of_report="area">	
	    <column columnHandler="NONE" display_name="Created At" isVisible="true" name="row_key" />		
		<column columnHandler="NONE" display_name="Attendance" isVisible="true" name="col_value" />
		<column columnHandler="NONE" display_name="Batch Name" isVisible="true" name="col_name" />		
	<sql>
SELECT
	attendance_stats.created_at as row_key,
	cast (attendance_stats.percentage_attendance as integer) AS col_value,
	batch. NAME AS col_name
FROM
	attendance_stats,
	batch
WHERE
	batch.id = :batch_id
and attendance_stats.course_id = batch.course_id
AND batch.batch_group_id = attendance_stats.batch_group_id
AND attendance_stats.percentage_attendance != 0

GROUP BY
	attendance_stats.created_at,
	attendance_stats.percentage_attendance,
	batch. NAME
ORDER BY
	attendance_stats.created_at 		
	</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Attendance Record of Batch  Over Time</title>
		<y_axis_title>Percentage</y_axis_title>
</reports>
<reports id="3055" type_of_report="table">
 <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="NONE" display_name="ClassRoom Name" isVisible="true" name="classroom_identifier" />
		<column columnHandler="NONE" display_name="Organization" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Max Students" isVisible="true" name="max_students" />
		<column columnHandler="NONE" display_name="IP Address" isVisible="true" name="ip_address" />
			
<sql>select classroom_details.id, classroom_identifier, max_students, ip_address, organization.name , count(*) over() as total_rows 
from classroom_details, organization where 
organization.id = classroom_details.organization_id 
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3056" type_of_report="table">
		<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
		<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
		<column columnHandler="NONE" display_name="# Students" isVisible="true" name="student_count" />
		<column columnHandler="NONE" display_name="Completed" isVisible="true" name="completed" />
		<column columnHandler="NONE" display_name="Start Date" isVisible="true" name="start_date" />
		<column columnHandler="NONE" display_name="End Date" isVisible="true" name="end_date" />
		<column columnHandler="NONE" display_name="Scheduled Days" isVisible="true" name="scheduled_days"/>
		<column columnHandler="NONE" display_name="Task Frequency" isVisible="true" name="frequency"/>
			
<sql>
select course.id, course_name, student_count, student_count as completed, cast (start_date as varchar) as start_date, cast (end_date as varchar) as end_date, scheduled_days, frequency , cast (count(*) over() as integer) as total_rows 
from course, auto_scheduler_data
where course.id = auto_scheduler_data.course_id
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3057" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<column columnHandler="NONE" display_name="# Courses" isVisible="true" name="courses" />
<sql>
select distinct istar_user.id , istar_user.email, cast (count(DISTINCT student_playlist.lesson_id) as INTEGER) as tasks, cast (count(DISTINCT student_playlist.course_id) as INTEGER) as courses,
 count(*) over() as total_rows 
from istar_user  
join user_org_mapping on (istar_user.id = user_org_mapping.user_id and user_org_mapping.organization_id = :college_id) 
join user_role on (istar_user.id = user_role.user_id and user_role.role_id=(select id from role where role_name='STUDENT'))
left join student_playlist on (istar_user.id = student_playlist.student_id)
group by istar_user.id , istar_user.email
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3058" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<column columnHandler="NONE" display_name="# Courses" isVisible="true" name="courses" />	
<sql>
select DISTINCT TF.id, TF.name , 
cast (min (TF.stu_tasks) as integer) as tasks,
min(TF.courses) as courses,
count(*) over() as total_rows  from (
select DISTINCT batch_group.id , batch_group.name, student_playlist.student_id, 
count(distinct student_playlist.lesson_id)as stu_tasks, cast (count(DISTINCT course_id) as integer)  as courses from student_playlist, batch_students, batch_group
where student_playlist.student_id = batch_students.student_id
and batch_students.batch_group_id = batch_group.id
and batch_group.college_id = :college_id
and batch_group.type = 'SECTION'
group by batch_group.id , batch_group.name, student_playlist.student_id
order by batch_group.id,batch_group.name, student_playlist.student_id
) TF
group by TF.id, TF.name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3059" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<column columnHandler="NONE" display_name="# Courses" isVisible="true" name="courses" />
<sql>
select DISTINCT TF.id, TF.name , 
cast (min (TF.stu_tasks) as integer) as tasks,
min(TF.courses) as courses,
count(*) over() as total_rows  from (
select DISTINCT batch_group.id , batch_group.name, student_playlist.student_id, 
count(distinct student_playlist.lesson_id)as stu_tasks, cast (count(DISTINCT course_id) as integer)  as courses from student_playlist, batch_students, batch_group
where student_playlist.student_id = batch_students.student_id
and batch_students.batch_group_id = batch_group.id
and batch_group.college_id = :college_id
and batch_group.type = 'ROLE'
group by batch_group.id , batch_group.name, student_playlist.student_id
order by batch_group.id,batch_group.name, student_playlist.student_id
) TF
group by TF.id, TF.name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3060" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<sql>
select course.id, course.course_name, cast (count(distinct student_playlist.lesson_id) as integer) as tasks, cast (count(*) over() as integer) as total_rows  from course 
left join student_playlist on (course.id = student_playlist.course_id and student_playlist.student_id = :entity_id)
where 
course.id in (select distinct course_id from batch where batch_group_id in (select distinct batch_group_id from batch_students where student_id  = :entity_id))
group by  course.id, course.course_name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3061" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
<column columnHandler="NONE" display_name="# Students" isVisible="true" name="total_students" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<sql>
select TF.id , TF.course_name, cast ((select count(*) from batch_students where batch_group_id =:entity_id) as integer) as total_students , cast (min(lessons) as integer) as tasks, cast (count(*) over() as integer) as total_rows from (select course.id , course.course_name, student_playlist.student_id, count(distinct student_playlist.lesson_id) as lessons
from 
course left join student_playlist on (student_playlist.course_id = course.id and student_playlist.student_id in (select distinct student_id from batch_students where batch_group_id=:entity_id))
where course.id in (select distinct course_id from batch where batch_group_id = :entity_id)
group by course.id , course.course_name,student_playlist.student_id
) TF 
group by TF.id , TF.course_name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3062" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
<column columnHandler="NONE" display_name="# Students" isVisible="true" name="total_students" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<sql>
select TF.id , TF.course_name, cast ((select count(*) from batch_students where batch_group_id =:entity_id) as integer) as total_students , cast (min(lessons) as integer) as tasks, cast (count(*) over() as integer) as total_rows from (select course.id , course.course_name, student_playlist.student_id, count(distinct student_playlist.lesson_id) as lessons
from 
course left join student_playlist on (student_playlist.course_id = course.id and student_playlist.student_id in (select distinct student_id from batch_students where batch_group_id=:entity_id))
where course.id in (select distinct course_id from batch where batch_group_id = :entity_id)
group by course.id , course.course_name,student_playlist.student_id
) TF 
group by TF.id , TF.course_name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
</istar_reports>
