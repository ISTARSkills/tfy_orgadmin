<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<istar_reports>
<reports id="3040" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Section Name" isVisible="true" name="name" />		
		<column columnHandler="NONE" display_name="rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
select batch_group.name, ACTUALFINAL.master , ACTUALFINAL.rookie , ACTUALFINAL.apprentice ,ACTUALFINAL.wizard   from  (select batch_group_id, cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (rookie_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as rookie,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (apprentice_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as apprentice,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (master_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as master,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (wizard_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as wizard
from 
(
select batch_group_id, cast (count(*)filter(where percentage &gt;=(select cast (property_value as integer ) from constant_properties where property_name ='rookie_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='rookie_max')) as integer) rookie_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='apprentice_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='apprentice_max')) as integer) apprentice_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='master_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='master_max')) as integer) as master_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='wizard_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='wizard_max'))as integer) as wizard_count
from 
(
select batch_group_id, istar_user, (case when max_points = 0 then 0 else  (points_scored*100)/max_points end ) as percentage 
from (select batch_group_id, istar_user, sum(points) as points_scored , sum(max_points) as max_points from (WITH summary AS (
    SELECT 
	  custom_eval ( CAST ( REPLACE ( REPLACE ( REPLACE ( COALESCE (P .points, '0'), ':per_lesson_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_lesson_points') ), ':per_assessment_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_assessment_points') ), ':per_question_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_question_points') ) AS TEXT ) ) AS points,
    custom_eval ( CAST ( REPLACE ( REPLACE ( REPLACE ( COALESCE (P .max_points, '0'), ':per_lesson_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_lesson_points') ), ':per_assessment_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_assessment_points') ), ':per_question_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_question_points') ) AS TEXT ) ) AS max_points,
		p.istar_user, p.skill_objective, p.item_id, p.item_type,P.batch_group_id,
    ROW_NUMBER() OVER(PARTITION BY p.istar_user, p.skill_objective, p.item_id, p.item_type ,P.batch_group_id
                                 ORDER BY p.created_at DESC) AS rk
      FROM user_gamification p
			where p.course_id = :course_id and p.org_id = :college_id
)
SELECT s.*
  FROM summary s
 WHERE s.rk = 1
)TT
group by batch_group_id, istar_user
)TF
)TCOUNT
group by batch_group_id
)TFINAL
) ACTUALFINAL join batch_group on (ACTUALFINAL.batch_group_id= batch_group.id)

</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Section Wise Performance of Students</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3041" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
		<column columnHandler="NONE" display_name="rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>

SELECT
	course. course_name ,
	ACTUALFINAL.master,
	ACTUALFINAL.rookie,
	ACTUALFINAL.apprentice,
	ACTUALFINAL.wizard
FROM
	(
		SELECT
			course_id,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							rookie_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS rookie,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							apprentice_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS apprentice,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							master_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS master,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							wizard_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS wizard
		FROM
			(
				SELECT
					course_id,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt;= (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'rookie_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'rookie_max'
							)
						) AS INTEGER
					) rookie_count,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt; (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'apprentice_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'apprentice_max'
							)
						) AS INTEGER
					) apprentice_count,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt; (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'master_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'master_max'
							)
						) AS INTEGER
					) AS master_count,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt; (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'wizard_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'wizard_max'
							)
						) AS INTEGER
					) AS wizard_count
				FROM
					(
						SELECT
							course_id,
							istar_user,
							(
								CASE
								WHEN max_points = 0 THEN
									0
								ELSE
									(points_scored * 100) / max_points
								END
							) AS percentage
						FROM
							(
								SELECT
									course_id,
									istar_user,
									SUM (points) AS points_scored,
									SUM (max_points) AS max_points
								FROM
									(
										WITH summary AS (
											SELECT
												custom_eval (
													CAST (
														REPLACE (
															REPLACE (
																REPLACE (
																	COALESCE (P .points, '0'),
																	':per_lesson_points',
																	(
																		SELECT
																			CAST (property_value AS VARCHAR)
																		FROM
																			constant_properties
																		WHERE
																			property_name = 'per_lesson_points'
																	)
																),
																':per_assessment_points',
																(
																	SELECT
																		CAST (property_value AS VARCHAR)
																	FROM
																		constant_properties
																	WHERE
																		property_name = 'per_assessment_points'
																)
															),
															':per_question_points',
															(
																SELECT
																	CAST (property_value AS VARCHAR)
																FROM
																	constant_properties
																WHERE
																	property_name = 'per_question_points'
															)
														) AS TEXT
													)
												) AS points,
												custom_eval (
													CAST (
														REPLACE (
															REPLACE (
																REPLACE (
																	COALESCE (P .max_points, '0'),
																	':per_lesson_points',
																	(
																		SELECT
																			CAST (property_value AS VARCHAR)
																		FROM
																			constant_properties
																		WHERE
																			property_name = 'per_lesson_points'
																	)
																),
																':per_assessment_points',
																(
																	SELECT
																		CAST (property_value AS VARCHAR)
																	FROM
																		constant_properties
																	WHERE
																		property_name = 'per_assessment_points'
																)
															),
															':per_question_points',
															(
																SELECT
																	CAST (property_value AS VARCHAR)
																FROM
																	constant_properties
																WHERE
																	property_name = 'per_question_points'
															)
														) AS TEXT
													)
												) AS max_points,
												P .istar_user,
												P .skill_objective,
												P .item_id,
												P .item_type,
												P .course_id,
												ROW_NUMBER () OVER (
													PARTITION BY P .istar_user,
													P .skill_objective,
													P .item_id,
													P .item_type,
													P .course_id
												ORDER BY
													P .created_at DESC
												) AS rk
											FROM
												user_gamification P
											WHERE
												P .batch_group_id = :batch_group_id
											AND P .org_id = :college_id
										) SELECT
											s.*
										FROM
											summary s
										WHERE
											s.rk = 1
									) TT
								GROUP BY
									course_id,
									istar_user
							) TF
					) TCOUNT
				GROUP BY
					course_id
			) TFINAL
	) ACTUALFINAL
JOIN course ON (
	ACTUALFINAL.course_id = course. ID
)
</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Program Wise Performance of Students</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3042" type_of_report="table">	
	    <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="PROFILE_IMAGE" display_name="Profile Image" isVisible="true" name="profile_image" />
		<column columnHandler="NONE" display_name="First Name" isVisible="true" name="first_name" />
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
		<column columnHandler="NONE" display_name="Mobile Number" isVisible="true" name="mobile" />
		<column columnHandler="STAR_RATING" display_name="Attendance" isVisible="true" name="atten_perc" />
		<column columnHandler="NONE" display_name="Section/Roles" isVisible="true" name="batch_groups" />		
		<column columnHandler="USER_HANDLER" display_name="Action" isVisible="true" name="id"/>		
	<sql>
SELECT ID,
	COALESCE(trim(profile_image),'http://cdn.talentify.in/video/android_images/S.png') as profile_image,
	COALESCE(first_name,'NA') as first_name,
	(case when atten_perc is not null then
						
					case 
					when atten_perc 	&lt;= 20 then 1
					when atten_perc 	&gt; 20 and atten_perc &lt;=40 then 2
					when atten_perc 	&gt; 40 and atten_perc &lt;=60 then 3
          when atten_perc 	&gt; 60 and atten_perc &lt;=80 then 4
          when atten_perc 	&gt; 80 and atten_perc &lt;=100 then 5
					end
		else 0
	end ) as atten_perc,
	email,
	 mobile,
	COALESCE(batch_groups,'') as batch_groups,	
	COALESCE(courses,'') as courses,
	COALESCE(course_ids,'') as course_ids, count(*) OVER() as total_rows
FROM
	(
		SELECT
			istar_user. ID,
			user_profile.first_name,
			istar_user.email,
			istar_user.mobile,
			CASE
		WHEN user_profile.profile_image LIKE 'null'
		OR user_profile.profile_image IS NULL THEN
			'http://cdn.talentify.in/video/android_images/' || UPPER (
				SUBSTRING (
					user_profile.first_name
					FROM
						1 FOR 1
				)
			) || '.png'
		ELSE
			'http://cdn.talentify.in/' || user_profile.profile_image
		END AS profile_image,
		string_agg (
			DISTINCT (batch_group. NAME),
			', '
		) AS batch_groups,
		string_agg (DISTINCT(course_name), ', ') AS courses,
		string_agg (
			DISTINCT (
				CAST (batch_group. ID AS VARCHAR)
			),
			', '
		) AS batch_group_ids,
		string_agg (
			DISTINCT (CAST(course. ID AS VARCHAR)),
			', '
		) AS course_ids
	FROM

	istar_user left join user_profile on (user_profile.user_id = istar_user. ID)
	left join user_org_mapping on (user_org_mapping.user_id = istar_user. ID)
	left join user_role on (user_role.user_id = istar_user. ID)
	left join batch_students on (istar_user. ID = batch_students.student_id)
	left join batch_group on (batch_students.batch_group_id = batch_group. ID AND batch_group.college_id = :college_id)
	left join batch on (batch_group. ID = batch.batch_group_id)
	left join course on (batch.course_id = course. ID)
		
	WHERE
		user_org_mapping.organization_id = :college_id
	
	and	user_role.role_id in (select id from role where role_name='STUDENT') 
GROUP BY
		istar_user. ID,
		user_profile.first_name,
		istar_user.email,
		user_profile.profile_image
	) T1
LEFT JOIN (
	SELECT
		user_id,
		COALESCE (
			CAST (
				(
					(
						COUNT (*) FILTER (

							WHERE
								attendance.status = 'ABSENT'
						)
					) * 100 / (
						COUNT (*) FILTER (

							WHERE
								attendance.status = 'ABSENT'
							OR attendance.status = 'PRESENT'
						)
					)
				) AS INTEGER
			),
			0
		) AS atten_perc
	FROM
		attendance
	WHERE
		user_id IN (
			SELECT
				istar_user. ID
			FROM
				istar_user,
				user_org_mapping
			WHERE
				istar_user. ID = user_org_mapping.user_id
			AND user_org_mapping.organization_id = :college_id
		)
	GROUP BY
		user_id
) T2 ON (T1. ID = T2.user_id) 
order by :order_by_column :order_type limit :limit offset :offset

		</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Section Wise Performance of Students</title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>

<reports id="3043" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Date" isVisible="true" name="created_at" />		
		<column columnHandler="NONE" display_name="Section" isVisible="true" name="batch_group_name" />
		<column columnHandler="NONE" display_name="Avg Score" isVisible="true" name="avg_score" />
		
	<sql>
	SELECT 	created_at, 	batch_group_name, 	avg_score FROM 	bg_progress WHERE 	college_id = :college_id ORDER BY 	created_at
</sql>
	<filter_sql>
		
	</filter_sql>	
		<title></title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>

<reports id="3044" type_of_report="column">	
		<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
		<column columnHandler="NONE" display_name="Avg Score" isVisible="true" name="avg_score" />
		
	<sql>
SELECT DISTINCT 	csobj.skill_objective_id, 	C .course_name, 	CAST ( 		AVG (sp.percentage) AS INTEGER 	)as avg_score FROM 	batch_group AS bg, 	batch AS b, 	course_skill_objective AS csobj, 	course C, 	skill_precentile sp, 	batch_students AS bs WHERE 	bg.college_id = :college_id AND b.batch_group_id = bg. ID AND bs.batch_group_id = b.batch_group_id AND b.course_id = csobj.course_id AND csobj.course_id = C . ID AND csobj.skill_objective_id = sp.skill_id AND bs.student_id = sp.student_id GROUP BY 	C .course_name, 	csobj.skill_objective_id ORDER BY 	avg_score </sql>
	<filter_sql>
		
	</filter_sql>	
		<title></title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>

<reports id="3045" type_of_report="table">	
		<column columnHandler="NONE" display_name="Id" isVisible="true" name="bg_id" />       
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="bg_name" />
		<column columnHandler="NONE" display_name="Type" isVisible="true" name="bg_type" />
		<column columnHandler="NONE" display_name="Parent Group" isVisible="true" name="bg_parent_group" />
		<column columnHandler="NONE" display_name="Number of Batchs" isVisible="true" name="batches" />
		<column columnHandler="NONE" display_name="Number of Students" isVisible="true" name="students" />
		<column columnHandler="NONE" display_name="Group Code" isVisible="true" name="batch_code" />
		<column columnHandler="BG_ROLE_HANDLER" display_name="Edit" isVisible="true" name="bg_id"/>
	<sql>
SELECT
	T1.bg_id,
	T1.bg_name,
	T1.batch_code,
	T1.bg_type,
	T1.bg_parent_group as bg_parent_group,
	COALESCE (T2.batches, 0) AS batches,
	COALESCE (T3.students, 0) AS students,
	COUNT (*) OVER () AS total_rows
FROM
	(
		SELECT
			batch_group. ID AS bg_id,
			batch_group.type  as bg_type,
			batch_group. NAME AS bg_name,
			batch_group.bg_desc AS bg_desc,
			batch_group.batch_code,
			COALESCE(PBG.name,'NONE') as bg_parent_group
		FROM
			batch_group left join  batch_group PBG on (PBG.id = batch_group.parent_group_id)
 		WHERE
			batch_group.college_id = :college_id
	) T1
LEFT JOIN (
	SELECT
		COUNT (batch. ID) AS batches,
		batch.batch_group_id
	FROM
		batch
	WHERE
		batch.batch_group_id IN (
			SELECT
				batch_group. ID
			FROM
				batch_group
			WHERE
				batch_group.college_id = :college_id
		)
	GROUP BY
		batch.batch_group_id
) T2 ON (T2.batch_group_id = T1.bg_id)
LEFT JOIN (
	SELECT
		batch_students.batch_group_id,
		COUNT (batch_students.student_id) AS students
	FROM
		batch_students
	WHERE
		batch_students.batch_group_id IN (
			SELECT
				batch_group. ID
			FROM
				batch_group
			WHERE
				batch_group.college_id = :college_id
		)
	GROUP BY
		batch_students.batch_group_id
) T3 ON (T3.batch_group_id = T1.bg_id)
 order by :order_by_column :order_type limit :limit offset :offset</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Sections Details</title>
		<y_axis_title>Number of Sections</y_axis_title>
</reports>
<reports id="3046" type_of_report="table">	
	    <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="PROFILE_IMAGE" display_name="Profile Image" isVisible="true" name="profile_image" />
		<column columnHandler="NONE" display_name="First Name" isVisible="true" name="first_name" />
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
		<column columnHandler="NONE" display_name="Mobile Number" isVisible="true" name="mobile" />
		<column columnHandler="STAR_RATING" display_name="Attendance" isVisible="true" name="atten_perc" />
		<column columnHandler="NONE" display_name="Organization" isVisible="true" name="organization_name" />
		<column columnHandler="NONE" display_name="Batch Groups" isVisible="true" name="batch_groups" />		
		<column columnHandler="USER_HANDLER" display_name="Action" isVisible="true" name="id"/>		
	<sql>
SELECT
	profile_image,
	first_name,
	(
		CASE
		WHEN atten_perc IS NOT NULL THEN
			CASE
		WHEN atten_perc &lt;= 20 THEN
			1
		WHEN atten_perc &gt; 20
		AND atten_perc &lt;= 40 THEN
			2
		WHEN atten_perc &gt; 40
		AND atten_perc &lt;= 60 THEN
			3
		WHEN atten_perc &gt; 60
		AND atten_perc &lt;= 80 THEN
			4
		WHEN atten_perc &gt; 80
		AND atten_perc &lt;= 100 THEN
			5
		END
		ELSE
			0
		END
	) AS atten_perc,
	email,
	mobile,
	batch_groups,
	ID,
	courses,
	course_ids,
	organization_name,
	COUNT (*) OVER () AS total_rows
FROM
	(
		SELECT
			istar_user. ID,
			user_profile.first_name,
			istar_user.email,
			COALESCE (istar_user.mobile, 0) AS mobile,
			CASE
		WHEN user_profile.profile_image LIKE 'null'
		OR user_profile.profile_image IS NULL THEN
			'http://cdn.talentify.in/video/android_images/' || UPPER (
				SUBSTRING (
					TRIM (user_profile.first_name)
					FROM
						1 FOR 1
				)
			) || '.png'
		WHEN user_profile.profile_image LIKE '%graph.facebook.com%'
		ThEN
			user_profile.profile_image
		ELSE
			'http://cdn.talentify.in/' || user_profile.profile_image
		END AS profile_image,
		string_agg (
			DISTINCT (batch_group. NAME),
			', '
		) AS batch_groups,
		string_agg (DISTINCT(course_name), ', ') AS courses,
		string_agg (
			DISTINCT (
				CAST (batch_group. ID AS VARCHAR)
			),
			', '
		) AS batch_group_ids,
		string_agg (
			DISTINCT (CAST(course. ID AS VARCHAR)),
			', '
		) AS course_ids,
		organization. NAME AS organization_name
	FROM
		

  istar_user left join user_profile on (user_profile.user_id = istar_user. ID)
	left join user_org_mapping on (user_org_mapping.user_id = istar_user. ID)
	left join organization on (user_org_mapping.organization_id= organization.id)
	left join user_role on (user_role.user_id = istar_user. ID)
	left join batch_students on (istar_user. ID = batch_students.student_id)
	left join batch_group on (batch_students.batch_group_id = batch_group. ID)
	left join batch on (batch_group. ID = batch.batch_group_id)
	left join course on (batch.course_id = course. ID)
	where  user_role.role_id in (12,14)
	GROUP BY
		istar_user. ID,
		user_profile.first_name,
		istar_user.email,
		user_profile.profile_image,
		organization_name
	) T1
LEFT JOIN (
	SELECT
		user_id,
		COALESCE (
			CAST (
				(
					(
						COUNT (*) FILTER (

							WHERE
								attendance.status = 'ABSENT'
						)
					) * 100 / (
						COUNT (*) FILTER (

							WHERE
								attendance.status = 'ABSENT'
							OR attendance.status = 'PRESENT'
						)
					)
				) AS INTEGER
			),
			0
		)	 AS atten_perc
	FROM
		attendance
	WHERE
		user_id IN (
			SELECT
				istar_user. ID
			FROM
				istar_user,
				user_org_mapping
			WHERE
				istar_user. ID = user_org_mapping.user_id
			AND user_org_mapping.organization_id IN (SELECT ID FROM organization)
		)
	GROUP BY
		user_id
) T2 ON (T1. ID = T2.user_id)
order by :order_by_column :order_type limit :limit offset :offset
		</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Section Wise Performance of Students</title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>
<reports id="3047" type_of_report="table">	
		<column columnHandler="NONE" display_name="Account Name" isVisible="true" name="cname" />
		<column columnHandler="NONE" display_name="Master" isVisible="true" name="avgmaaster" />
		<column columnHandler="NONE" display_name="Wizard" isVisible="true" name="avgwiz" />
		<column columnHandler="NONE" display_name="Rooki" isVisible="true" name="avgrooki" />
		<column columnHandler="NONE" display_name="Apprentice" isVisible="true" name="avgapp" />		
	<sql>
SELECT 	T1.cname, 	T1.summaster / countmaster AS avgmaaster, 	T1.sumwizard / countwizard AS avgwiz, 	T1.sumrookie / countrookie AS avgrooki, 	T1.sumapprentice / countapprentice AS avgapp,   count(*) OVER() as total_rows FROM 	( 		SELECT 			organization. NAME AS cname, 			SUM ( 				mastery_level_per_course.apprentice 			) AS sumapprentice, 			SUM ( 				mastery_level_per_course.rookie 			) AS sumrookie, 			SUM ( 				mastery_level_per_course.master 			) AS summaster, 			SUM ( 				mastery_level_per_course.wizard 			) AS sumwizard, 			COUNT ( 				mastery_level_per_course.apprentice 			) AS countapprentice, 			COUNT ( 				mastery_level_per_course.rookie 			) AS countrookie, 			COUNT ( 				mastery_level_per_course.master 			) AS countmaster, 			COUNT ( 				mastery_level_per_course.wizard 			) AS countwizard 		FROM 			mastery_level_per_course, 			organization 		WHERE 			organization. ID = mastery_level_per_course.college_id 		GROUP BY 			cname 	) T1 order by :order_by_column :order_type limit :limit offset :offset
		</sql>
	<filter_sql>
		
	</filter_sql>	
		<title></title>
		<y_axis_title></y_axis_title>
</reports>

<reports id="3039" type_of_report="table">	
		<column columnHandler="NONE" display_name="ID" isVisible="true" name="tid" />
		<column columnHandler="NONE" display_name="Trainer Name" isVisible="true" name="tname" />
		<column columnHandler="NONE" display_name="Trainer Email" isVisible="true" name="temail" />
		<column columnHandler="STAR_RATING" display_name="Rating" isVisible="true" name="avgrating" />
		<column columnHandler="NONE" display_name="Late Started" isVisible="true" name="late_started" />	
		<column columnHandler="NONE" display_name="Early Ended" isVisible="true" name="early_ended" />	
		<column columnHandler="NONE" display_name="Location" isVisible="true" name="city" />		
		<column columnHandler="NONE" display_name="Unbilled Hours" isVisible="true" name="hours" />			
	<sql>
SELECT   TF.tid, 	TF.tname, 	TF.joindate, 	TF.temail, 	TF.avgrating, 	COALESCE (TF.LATE_STARTED, 0) AS LATE_STARTED, 	COALESCE (TF.EARLY_ENDED, 0) AS EARLY_ENDED, 	TF.city, 	COALESCE (TF.hours, 0) AS hours, 	COALESCE (TF. MIN, 0) AS MIN, count(*) OVER() as total_rows 	 FROM 	( 		( 			SELECT 				tid, 				joindate, 				tname, 				temail, 				city, 				( 					CASE 					WHEN round( 						AVG (student_feedback.rating) 					) IS NULL THEN 						1 					ELSE 						round( 							AVG (student_feedback.rating) 						) 					END 				) AS avgrating 			FROM 				( 					SELECT 						istar_user. ID AS tid, 						istar_user.created_at AS joindate, 						user_profile.first_name AS tname, 						istar_user.email AS temail, 						pincode.city AS city 					FROM 						address, 						pincode, 						istar_user, 						user_profile, 						user_role 					WHERE 						user_profile.address_id = address. ID 					AND istar_user. ID = user_profile.user_id 					AND address.pincode_id = pincode. ID 					AND user_profile.user_id = user_role.user_id 					AND user_role.role_id = 14 				) xxx 			LEFT JOIN batch_schedule_event ON ( 				xxx.tid = batch_schedule_event.actor_id 			) 			LEFT JOIN student_feedback ON ( 				student_feedback.trainer_id = xxx.tid 				AND student_feedback.event_id = batch_schedule_event. ID 			) 			GROUP BY 				tid, 				joindate, 				tname, 				temail, 				city 			ORDER BY 				tid 		) T1 		LEFT JOIN ( 			SELECT 				exception_log.trainer_id AS t_id, 				COUNT (*) FILTER (  					WHERE 						exception_log.exception_type = 'LATE_STARTED' 				) AS LATE_STARTED, 				COUNT (*) FILTER (  					WHERE 						exception_log.exception_type = 'EARLY_ENDED' 				) AS EARLY_ENDED 			FROM 				exception_log 			WHERE 				exception_log.exception_component = 'EVENT_DELIVERY' 			GROUP BY 				exception_log.trainer_id 		) T2 ON (T1.tid = T2.t_id) 		LEFT JOIN ( 			SELECT 				batch_schedule_event.actor_id AS tids, 				SUM ( 					batch_schedule_event.eventhour 				) AS hours, 				SUM ( 					batch_schedule_event.eventminute 				) AS MIN 			FROM 				batch_schedule_event 			WHERE 				batch_schedule_event. TYPE != 'BATCH_SCHEDULE_EVENT_PRESENTOR' 			AND batch_schedule_event. TYPE != 'BATCH_SCHEDULE_EVENT_STUDENT' 			GROUP BY 				actor_id 		) T3 ON (T3.tids = T1.tid) 	) TF	order by :order_by_column :order_type limit :limit offset :offset	</sql>
	<filter_sql>
		
	</filter_sql>	
		<title></title>
		<y_axis_title></y_axis_title>
</reports>

<reports id="3048" type_of_report="pie">	
		<column columnHandler="NONE" display_name="Category" isVisible="true" name="category" />
		<column columnHandler="NONE" display_name="Count" isVisible="true" name="count" />
	<sql>
select cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (rookie_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as rookie,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (apprentice_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as apprentice,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (master_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as master,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (wizard_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as wizard
from 
(select cast (count(*)filter(where percentage &gt;=(select cast (property_value as integer ) from constant_properties where property_name ='rookie_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='rookie_max')) as integer) rookie_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='apprentice_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='apprentice_max')) as integer) apprentice_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='master_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='master_max')) as integer) as master_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='wizard_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='wizard_max'))as integer) as wizard_count
from 
(select istar_user, (case when max_points = 0 then 0 else  (points_scored*100)/max_points end ) as percentage 
from (select istar_user, sum(points) as points_scored , sum(max_points) as max_points from (WITH summary AS (
    SELECT 
	  custom_eval ( CAST ( REPLACE ( REPLACE ( REPLACE ( COALESCE (P .points, '0'), ':per_lesson_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_lesson_points') ), ':per_assessment_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_assessment_points') ), ':per_question_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_question_points') ) AS TEXT ) ) AS points,
    custom_eval ( CAST ( REPLACE ( REPLACE ( REPLACE ( COALESCE (P .max_points, '0'), ':per_lesson_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_lesson_points') ), ':per_assessment_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_assessment_points') ), ':per_question_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_question_points') ) AS TEXT ) ) AS max_points,
           p.istar_user, p.skill_objective, p.item_id, p.item_type,P.batch_group_id,
           ROW_NUMBER() OVER(PARTITION BY p.istar_user, p.skill_objective, p.item_id, p.item_type ,P.batch_group_id
                                 ORDER BY p.created_at DESC) AS rk
      FROM user_gamification p, batch B
			where p.course_id = B.course_id and p.org_id = :college_id and B.batch_group_id = p.batch_group_id and B.id = :batch_id
)
SELECT s.*
  FROM summary s
 WHERE s.rk = 1
)TT
group by istar_user
)TF
)TCOUNT
)TFINAL
</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Over All Level of Mastery</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3049" type_of_report="bar">	
        <column columnHandler="NONE" display_name="Skill Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="Wizard" isVisible="true" name="wizard" />
		<column columnHandler="NONE" display_name="Rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="Apprentice" isVisible="true" name="apprentice" />
	<sql>	
WITH summary AS (
	SELECT
		skill_objective. NAME,
		rookie,
		master,
		apprentice,
		wizard,
		ROW_NUMBER () OVER (
			PARTITION BY skill_objective. NAME
			ORDER BY
				mastery_level_per_course.created_at DESC
		) AS rk
	FROM
		mastery_level_per_course,
		skill_objective,
		batch
	WHERE
		batch.batch_group_id = mastery_level_per_course.batch_group_id
	AND batch. ID = :batch_id
	AND college_id = :college_id
AND skill_objective.type = 'SKILL'
	AND skill_objective. ID = mastery_level_per_course.skill_id
	AND (
		rookie + master + apprentice + wizard > 0
	)
) SELECT
	s.*
FROM
	summary s
WHERE
	s.rk = 1 
</sql>
<filter_sql>
		
	</filter_sql>	
		<title>Level Of Mastery Per Skill</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3051" type_of_report="bar">	
        <column columnHandler="NONE" display_name="Skill Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="Wizard" isVisible="true" name="wizard" />
		<column columnHandler="NONE" display_name="Rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="Apprentice" isVisible="true" name="apprentice" />
	<sql>	
WITH summary AS ( 	SELECT 		pp.name, 		CAST (mm.rookie AS INTEGER) AS rookie, 		CAST (mm.master AS INTEGER) AS master, 		CAST (mm.apprentice AS INTEGER) AS apprentice, 		CAST (mm.wizard AS INTEGER) AS wizard, 		ROW_NUMBER () OVER ( 			PARTITION BY pp.name 			ORDER BY 				mm.created_at DESC 		) AS rk 	FROM 		mastery_level_per_course mm, 		skill_objective pp 	WHERE 		course_id = :course_id 	AND college_id = :college_id AND pp.type = 'SKILL'	AND pp. ID = mm.skill_id 	AND ( 		rookie + master + apprentice + wizard > 0 	) ) SELECT 	s.* FROM 	summary s WHERE 	s.rk = 1
</sql><filter_sql>
		
	</filter_sql>	
		<title>Level Of Mastery Per Skill</title>
		<y_axis_title>Percentage of Student</y_axis_title>
</reports>
<reports id="3050" type_of_report="pie">	
		<column columnHandler="NONE" display_name="Category" isVisible="true" name="category" />
		<column columnHandler="NONE" display_name="Count" isVisible="true" name="count" />
	<sql>	
select cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (rookie_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as rookie,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (apprentice_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as apprentice,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (master_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as master,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (wizard_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as wizard
from 
(select cast (count(*)filter(where percentage &gt;=(select cast (property_value as integer ) from constant_properties where property_name ='rookie_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='rookie_max')) as integer) rookie_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='apprentice_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='apprentice_max')) as integer) apprentice_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='master_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='master_max')) as integer) as master_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='wizard_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='wizard_max'))as integer) as wizard_count
from 
(select istar_user, (case when max_points = 0 then 0 else  (points_scored*100)/max_points end ) as percentage 
from (select istar_user, sum(points) as points_scored , sum(max_points) as max_points from (WITH summary AS (
    SELECT 
	  custom_eval ( CAST ( REPLACE ( REPLACE ( REPLACE ( COALESCE (P .points, '0'), ':per_lesson_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_lesson_points') ), ':per_assessment_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_assessment_points') ), ':per_question_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_question_points') ) AS TEXT ) ) AS points,
    custom_eval ( CAST ( REPLACE ( REPLACE ( REPLACE ( COALESCE (P .max_points, '0'), ':per_lesson_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_lesson_points') ), ':per_assessment_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_assessment_points') ), ':per_question_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_question_points') ) AS TEXT ) ) AS max_points,
           p.istar_user, p.skill_objective, p.item_id, p.item_type,P.batch_group_id,
           ROW_NUMBER() OVER(PARTITION BY p.istar_user, p.skill_objective, p.item_id, p.item_type ,P.batch_group_id
                                 ORDER BY p.created_at DESC) AS rk
      FROM user_gamification p
			where p.course_id = :course_id and p.org_id = :college_id
)
SELECT s.*
  FROM summary s
 WHERE s.rk = 1
)TT
group by istar_user
)TF
)TCOUNT
)TFINAL

</sql> <filter_sql>
		
	</filter_sql>	
		<title>Over All Level of Mastery</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3052" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
		<column columnHandler="NONE" display_name="rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
SELECT
	course. course_name ,
	ACTUALFINAL.master,
	ACTUALFINAL.rookie,
	ACTUALFINAL.apprentice,
	ACTUALFINAL.wizard
FROM
	(
		SELECT
			course_id,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							rookie_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS rookie,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							apprentice_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS apprentice,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							master_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS master,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							wizard_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS wizard
		FROM
			(
				SELECT
					course_id,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt;= (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'rookie_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'rookie_max'
							)
						) AS INTEGER
					) rookie_count,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt; (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'apprentice_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'apprentice_max'
							)
						) AS INTEGER
					) apprentice_count,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt; (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'master_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'master_max'
							)
						) AS INTEGER
					) AS master_count,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt; (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'wizard_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'wizard_max'
							)
						) AS INTEGER
					) AS wizard_count
				FROM
					(
						SELECT
							course_id,
							istar_user,
							(
								CASE
								WHEN max_points = 0 THEN
									0
								ELSE
									(points_scored * 100) / max_points
								END
							) AS percentage
						FROM
							(
								SELECT
									course_id,
									istar_user,
									SUM (points) AS points_scored,
									SUM (max_points) AS max_points
								FROM
									(
										WITH summary AS (
											SELECT
												custom_eval (
													CAST (
														REPLACE (
															REPLACE (
																REPLACE (
																	COALESCE (P .points, '0'),
																	':per_lesson_points',
																	(
																		SELECT
																			CAST (property_value AS VARCHAR)
																		FROM
																			constant_properties
																		WHERE
																			property_name = 'per_lesson_points'
																	)
																),
																':per_assessment_points',
																(
																	SELECT
																		CAST (property_value AS VARCHAR)
																	FROM
																		constant_properties
																	WHERE
																		property_name = 'per_assessment_points'
																)
															),
															':per_question_points',
															(
																SELECT
																	CAST (property_value AS VARCHAR)
																FROM
																	constant_properties
																WHERE
																	property_name = 'per_question_points'
															)
														) AS TEXT
													)
												) AS points,
												custom_eval (
													CAST (
														REPLACE (
															REPLACE (
																REPLACE (
																	COALESCE (P .max_points, '0'),
																	':per_lesson_points',
																	(
																		SELECT
																			CAST (property_value AS VARCHAR)
																		FROM
																			constant_properties
																		WHERE
																			property_name = 'per_lesson_points'
																	)
																),
																':per_assessment_points',
																(
																	SELECT
																		CAST (property_value AS VARCHAR)
																	FROM
																		constant_properties
																	WHERE
																		property_name = 'per_assessment_points'
																)
															),
															':per_question_points',
															(
																SELECT
																	CAST (property_value AS VARCHAR)
																FROM
																	constant_properties
																WHERE
																	property_name = 'per_question_points'
															)
														) AS TEXT
													)
												) AS max_points,
												P .istar_user,
												P .skill_objective,
												P .item_id,
												P .item_type,
												P .course_id,
												ROW_NUMBER () OVER (
													PARTITION BY P .istar_user,
													P .skill_objective,
													P .item_id,
													P .item_type,
													P .course_id
												ORDER BY
													P .created_at DESC
												) AS rk
											FROM
												user_gamification P
											WHERE
												P .batch_group_id in (select distinct id from batch_group where parent_group_id = :batch_group_id
UNION select id from batch_group where id = :batch_group_id )
											AND P .org_id = :college_id
										) SELECT
											s.*
										FROM
											summary s
										WHERE
											s.rk = 1
									) TT
								GROUP BY
									course_id,
									istar_user
							) TF
					) TCOUNT
				GROUP BY
					course_id
			) TFINAL
	) ACTUALFINAL
JOIN course ON (
	ACTUALFINAL.course_id = course. ID
)	
	</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Role Wise Performance of Students</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3053" type_of_report="area">	
	    <column columnHandler="NONE" display_name="Created At" isVisible="true" name="row_key" />		
		<column columnHandler="NONE" display_name="Attendance" isVisible="true" name="col_value" />
		<column columnHandler="NONE" display_name="Batch Name" isVisible="true" name="col_name" />		
	<sql>
SELECT
	attendance_stats.created_at as row_key,
	cast (attendance_stats.percentage_attendance as integer) AS col_value,
	batch. NAME AS col_name
FROM
	attendance_stats,
	batch, batch_group
WHERE
batch.batch_group_id = batch_group.id
and batch.course_id = attendance_stats.course_id
and batch_group.id = attendance_stats.batch_group_id
and attendance_stats.course_id	 = :course_id	
and batch_group.college_id = :college_id
AND attendance_stats.percentage_attendance != 0
GROUP BY
	attendance_stats.created_at,
	attendance_stats.percentage_attendance,
	batch. NAME
ORDER BY
	attendance_stats.created_at 		
	</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Attendance Record in Sections Over Time</title>
		<y_axis_title>Percentage</y_axis_title>
</reports>
<reports id="3054" type_of_report="area">	
	    <column columnHandler="NONE" display_name="Created At" isVisible="true" name="row_key" />		
		<column columnHandler="NONE" display_name="Attendance" isVisible="true" name="col_value" />
		<column columnHandler="NONE" display_name="Batch Name" isVisible="true" name="col_name" />		
	<sql>
SELECT
	attendance_stats.created_at as row_key,
	cast (attendance_stats.percentage_attendance as integer) AS col_value,
	batch. NAME AS col_name
FROM
	attendance_stats,
	batch
WHERE
	batch.id = :batch_id
and attendance_stats.course_id = batch.course_id
AND batch.batch_group_id = attendance_stats.batch_group_id
AND attendance_stats.percentage_attendance != 0

GROUP BY
	attendance_stats.created_at,
	attendance_stats.percentage_attendance,
	batch. NAME
ORDER BY
	attendance_stats.created_at 		
	</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Attendance Record of Batch  Over Time</title>
		<y_axis_title>Percentage</y_axis_title>
</reports>
<reports id="3055" type_of_report="table">
 <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="NONE" display_name="ClassRoom Name" isVisible="true" name="classroom_identifier" />
		<column columnHandler="NONE" display_name="Organization" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Max Students" isVisible="true" name="max_students" />
		<column columnHandler="NONE" display_name="IP Address" isVisible="true" name="ip_address" />
			
<sql>select classroom_details.id, classroom_identifier, max_students, ip_address, organization.name , count(*) over() as total_rows 
from classroom_details, organization where 
organization.id = classroom_details.organization_id 
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3056" type_of_report="table">
		<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
		<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
		<column columnHandler="NONE" display_name="# Students" isVisible="true" name="student_count" />
		<column columnHandler="NONE" display_name="Completed" isVisible="true" name="completed" />
		<column columnHandler="NONE" display_name="Start Date" isVisible="true" name="start_date" />
		<column columnHandler="NONE" display_name="End Date" isVisible="true" name="end_date" />
		<column columnHandler="NONE" display_name="Scheduled Days" isVisible="true" name="scheduled_days"/>
		<column columnHandler="NONE" display_name="Task Frequency" isVisible="true" name="frequency"/>
			
<sql>
select course.id, course_name, student_count, student_count as completed, cast (start_date as varchar) as start_date, cast (end_date as varchar) as end_date, scheduled_days, frequency , cast (count(*) over() as integer) as total_rows 
from course, auto_scheduler_data
where course.id = auto_scheduler_data.course_id
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3057" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<column columnHandler="NONE" display_name="# Courses" isVisible="true" name="courses" />
<sql>
SELECT DISTINCT
	istar_user. ID,
	istar_user.email,
	CAST (
		COUNT (
			DISTINCT student_playlist.lesson_id
		) AS INTEGER
	) AS tasks,
	CAST (
		COALESCE(COUNT (
			DISTINCT batch.course_id
		),0 )AS INTEGER
	) AS courses,
	COUNT (*) OVER () AS total_rows
FROM
	istar_user
JOIN user_org_mapping ON (
	istar_user. ID = user_org_mapping.user_id
	AND user_org_mapping.organization_id = :college_id
)
JOIN user_role ON (
	istar_user. ID = user_role.user_id
	AND user_role.role_id in (
		SELECT
			ID
		FROM
			ROLE
		WHERE
			role_name in ( 'STUDENT','TRAINER')
	)
)
left join batch_students on (batch_students.student_id = user_role.user_id)
left join batch on (batch_students.batch_group_id = batch.batch_group_id)
LEFT JOIN student_playlist ON (
	istar_user. ID = student_playlist.student_id
)
GROUP BY
	istar_user. ID,
	istar_user.email
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3058" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<column columnHandler="NONE" display_name="# Courses" isVisible="true" name="courses" />	
<sql>
select  TFINAL.id , TFINAL.name, TFINAL.tasks, cast (COALESCE(count(DISTINCT batch.course_id),0) as integer) as courses, count(*) over() as total_rows from  (select DISTINCT TF.id, TF.name , 
cast (min (TF.stu_tasks) as integer) as tasks,
count(*) over() as total_rows  from (
SELECT DISTINCT
	batch_group. ID,
	batch_group. NAME,
	student_playlist.student_id,
	COUNT (
		DISTINCT student_playlist.lesson_id
	) AS stu_tasks
FROM
batch_group
left join batch_students on (batch_students.batch_group_id = batch_group.id )
left join student_playlist on (batch_students.student_id = student_playlist.student_id)
where 
batch_group.college_id = :college_id AND batch_group. TYPE = 'SECTION' and batch_group.is_historical_group='f'
GROUP BY
	batch_group. ID,
	batch_group. NAME,
	student_playlist.student_id
ORDER BY
	batch_group. ID,
	batch_group. NAME,
	student_playlist.student_id
) TF
group by TF.id, TF.name
)TFINAL 
left join batch on (TFINAL.id = batch.batch_group_id)
group by TFINAL.id , TFINAL.name, TFINAL.tasks
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3059" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<column columnHandler="NONE" display_name="# Courses" isVisible="true" name="courses" />
<sql>
select  TFINAL.id , TFINAL.name, TFINAL.tasks, cast (COALESCE(count(DISTINCT batch.course_id),0) as integer) as courses, count(*) over() as total_rows from  (select DISTINCT TF.id, TF.name , 
cast (min (TF.stu_tasks) as integer) as tasks,
count(*) over() as total_rows  from (
SELECT DISTINCT
	batch_group. ID,
	batch_group. NAME,
	student_playlist.student_id,
	COUNT (
		DISTINCT student_playlist.lesson_id
	) AS stu_tasks
FROM
batch_group
left join batch_students on (batch_students.batch_group_id = batch_group.id )
left join student_playlist on (batch_students.student_id = student_playlist.student_id)
where 
batch_group.college_id = :college_id AND batch_group. TYPE = 'ROLE' and batch_group.is_historical_group='f'
GROUP BY
	batch_group. ID,
	batch_group. NAME,
	student_playlist.student_id
ORDER BY
	batch_group. ID,
	batch_group. NAME,
	student_playlist.student_id
) TF
group by TF.id, TF.name
)TFINAL 
left join batch on (TFINAL.id = batch.batch_group_id)
group by TFINAL.id , TFINAL.name, TFINAL.tasks
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3060" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<sql>
select course.id, course.course_name, cast (count(distinct student_playlist.lesson_id) as integer) as tasks, cast (count(*) over() as integer) as total_rows  from course 
left join student_playlist on (course.id = student_playlist.course_id and student_playlist.student_id = :entity_id)
where 
course.id in (select distinct course_id from batch where batch_group_id in (select distinct batch_group_id from batch_students where student_id  = :entity_id))
group by  course.id, course.course_name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3061" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
<column columnHandler="NONE" display_name="# Students" isVisible="true" name="total_students" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<sql>
select TF.id , TF.course_name, cast ((select count(*) from batch_students where batch_group_id =:entity_id) as integer) as total_students , cast (min(lessons) as integer) as tasks, cast (count(*) over() as integer) as total_rows from (select course.id , course.course_name, student_playlist.student_id, count(distinct student_playlist.lesson_id) as lessons
from 
course left join student_playlist on (student_playlist.course_id = course.id and student_playlist.student_id in (select distinct student_id from batch_students where batch_group_id=:entity_id))
where course.id in (select distinct course_id from batch where batch_group_id = :entity_id)
group by course.id , course.course_name,student_playlist.student_id
) TF 
group by TF.id , TF.course_name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3062" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
<column columnHandler="NONE" display_name="# Students" isVisible="true" name="total_students" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<sql>
select TF.id , TF.course_name, cast ((select count(*) from batch_students where batch_group_id =:entity_id) as integer) as total_students , cast (min(lessons) as integer) as tasks, cast (count(*) over() as integer) as total_rows from (select course.id , course.course_name, student_playlist.student_id, count(distinct student_playlist.lesson_id) as lessons
from 
course left join student_playlist on (student_playlist.course_id = course.id and student_playlist.student_id in (select distinct student_id from batch_students where batch_group_id=:entity_id))
where course.id in (select distinct course_id from batch where batch_group_id = :entity_id)
group by course.id , course.course_name,student_playlist.student_id
) TF 
group by TF.id , TF.course_name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>

<reports id="3063" type_of_report="table">
<column columnHandler="NONE" display_name="StudentID" isVisible="true" name="student_id" />		
<column columnHandler="NONE" display_name="Student Name" isVisible="true" name="student_name" />
<column columnHandler="NONE" display_name="Trainer Name" isVisible="true" name="trainer_name" />
<column columnHandler="NONE" display_name="Rating" isVisible="true" name="rating" />
<column columnHandler="NONE" display_name="Comment" isVisible="true" name="comment" />
<sql>
SELECT 	af. ID AS student_id, 	ups.first_name AS student_name, 	upt.first_name AS trainer_name, 	af.rating AS rating,   af.comment as comment, CAST (COUNT(*) OVER() AS INTEGER) AS total_rows FROM 	student_feedback af, 	user_profile ups, 	user_profile upt, 	user_org_mapping uo WHERE 	af.student_id = ups.user_id AND af.trainer_id = upt.user_id order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3064" type_of_report="table">
 <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="NONE" display_name="ClassRoom Name" isVisible="true" name="classroom_identifier" />
		<column columnHandler="NONE" display_name="Organization" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Max Students" isVisible="true" name="max_students" />
		<column columnHandler="NONE" display_name="IP Address" isVisible="true" name="ip_address" />			
<sql>select classroom_details.id, classroom_identifier, max_students, ip_address, organization.name , count(*) over() as total_rows 
from classroom_details, organization where 
organization.id = classroom_details.organization_id 
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3065" type_of_report="table">
 <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="TRAINER_PROFILE_HANDLER" display_name="Email" isVisible="true" name="email" />
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="first_name" />
		<column columnHandler="TRAINER_ASSESSMENT_LIST_HANDLER" display_name="Assessment List" isVisible="true" name="assessment_list" />					
<sql>
select TrainerDeatils.*,string_agg(TrainerDeatils.id ||'!#'||assessment.id ||'!#'|| assessment.assessmenttitle,'!ASSESS!')  as assessment_list, count(*) over() as total_rows from (select istar_user.id, istar_user.email, user_profile.first_name from 
istar_user , user_role, user_profile 
where 
istar_user.id = user_role.user_id 
and istar_user.id = user_profile.user_id 
and user_role.role_id in (select id from role where role_name in ('TRAINER')) 
)TrainerDeatils
left join task on (TrainerDeatils.id = task.actor and task.item_type='ASSESSMENT') 
join assessment on (task.item_id = assessment.id )
group by TrainerDeatils.id, email, first_name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3066" type_of_report="table">
 <column columnHandler="NONE" display_name="Course Id" isVisible="false" name="course_id" />		
		<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
		<column columnHandler="NONE" display_name="Cluster Id" isVisible="false" name="cluster_id" />
		<column columnHandler="NONE" display_name="Cluster Name" isVisible="true" name="cluster_name" />			
		<column columnHandler="NONE" display_name="Requirement" isVisible="true" name="req" />		
		<column columnHandler="NONE" display_name="Cities" isVisible="true" name="cities" />
		<column columnHandler="NONE" display_name="L2" isVisible="true" name="l2count" />
		<column columnHandler="NONE" display_name="L3" isVisible="true" name="l3count" />			
		<column columnHandler="NONE" display_name="L4" isVisible="true" name="l4count" />		
		<column columnHandler="NONE" display_name="L5" isVisible="true" name="l5count" />
		<column columnHandler="NONE" display_name="L6" isVisible="true" name="l6count" />
		<column columnHandler="NONE" display_name="Net Requirement" isVisible="true" name="net" />						
<sql>
select STATIC_TAB.course_id,
STATIC_TAB.course_name,
STATIC_TAB.cluster_id,
STATIC_TAB.cluster_name,
STATIC_TAB.req,
STATIC_TAB.cities,
COALESCE(FINAL_L2.l2count,0) as l2count,
COALESCE(FINAL_L3.l3count,0) as l3count,
COALESCE(FINAL_L4.l4count,0) as l4count,
COALESCE(FINAL_L5.l5count,0) as l5count,
COALESCE(FINAL_L6.l6count,0) as l6count,
STATIC_TAB.req - COALESCE(FINAL_L6.l6count,0) as net, count(*)over() as total_rows
from (select COURSE_TAB.course_id, COURSE_TAB.course_name, cluster.id as cluster_id, cluster.cluster_name,
COURSE_TAB.trainer_count as req, COALESCE(string_agg(distinct pincode.city,', '),'') as cities   
from (select DISTINCT course_id, course_name, cluster_id, trainer_count from  cluster_requirement , course
where cluster_requirement.course_id = course.id
)COURSE_TAB
left join cluster on (COURSE_TAB.cluster_id = cluster.id)
left join cluster_pincode_mapping cpm on (cpm.cluster_id = cluster.id)
left join pincode on (pincode.id = cpm.pincode_id)
group by COURSE_TAB.course_id, COURSE_TAB.course_name, cluster.id, cluster.cluster_name,
COURSE_TAB.trainer_count
)STATIC_TAB 
left join (
select course_id, cluster_id, l4count from (select count(DISTINCT tes.trainer_id) as l4count, tes.course_id,  cpm.cluster_id
from trainer_empanelment_status tes , trainer_prefred_location tpl, pincode, cluster_pincode_mapping cpm
where 
tes.trainer_id = tpl.trainer_id
and tpl.pincode = pincode.pin
and pincode.id = cpm.pincode_id
and tes.stage = 'L4' and tes.empanelment_status ='SELECTED'
group by course_id , cluster_id
)L4_TAB
)FINAL_L4 on (FINAL_L4.course_id= STATIC_TAB.course_id and FINAL_L4.cluster_id=STATIC_TAB.cluster_id)
left join (
select course_id, cluster_id, l5count from (select count(DISTINCT tes.trainer_id) as l5count, tes.course_id,  cpm.cluster_id
from trainer_empanelment_status tes , trainer_prefred_location tpl, pincode, cluster_pincode_mapping cpm
where 
tes.trainer_id = tpl.trainer_id
and tpl.pincode = pincode.pin
and pincode.id = cpm.pincode_id
and tes.stage = 'L5' and tes.empanelment_status ='SELECTED'
group by course_id , cluster_id
)L5_TAB
)FINAL_L5 on (FINAL_L5.course_id= STATIC_TAB.course_id and FINAL_L5.cluster_id=STATIC_TAB.cluster_id)
left join (
select course_id, cluster_id, l6count from (select count(DISTINCT tes.trainer_id) as l6count, tes.course_id,  cpm.cluster_id
from trainer_empanelment_status tes , trainer_prefred_location tpl, pincode, cluster_pincode_mapping cpm
where 
tes.trainer_id = tpl.trainer_id
and tpl.pincode = pincode.pin
and pincode.id = cpm.pincode_id
and tes.stage = 'L6' and tes.empanelment_status ='SELECTED'
group by course_id , cluster_id
)L6_TAB
)FINAL_L6 on (FINAL_L6.course_id= STATIC_TAB.course_id and FINAL_L6.cluster_id=STATIC_TAB.cluster_id)
left join (
select course_id, cluster_id, l3count from (select count(DISTINCT tes.trainer_id) as l3count, tes.course_id,  cpm.cluster_id
from trainer_empanelment_status tes , trainer_prefred_location tpl, pincode, cluster_pincode_mapping cpm
where 
tes.trainer_id = tpl.trainer_id
and tpl.pincode = pincode.pin
and pincode.id = cpm.pincode_id
and tes.stage = 'L3' and tes.empanelment_status ='SELECTED'
group by course_id , cluster_id
)L3_TAB
)FINAL_L3 on (FINAL_L3.course_id= STATIC_TAB.course_id and FINAL_L3.cluster_id=STATIC_TAB.cluster_id)
left join (
select course_id, cluster_id, l2count from (select count(DISTINCT tes.trainer_id) as l2count, tes.course_id,  cpm.cluster_id
from trainer_empanelment_status tes , trainer_prefred_location tpl, pincode, cluster_pincode_mapping cpm
where 
tes.trainer_id = tpl.trainer_id
and tpl.pincode = pincode.pin
and pincode.id = cpm.pincode_id
and tes.stage = 'L2' and tes.empanelment_status ='SELECTED'
group by course_id , cluster_id
)L2_TAB
)FINAL_L2 on (FINAL_L2.course_id= STATIC_TAB.course_id and FINAL_L2.cluster_id=STATIC_TAB.cluster_id)
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
</istar_reports>
