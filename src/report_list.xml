<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<istar_reports>
	<reports id="108" type_of_report="table">
		<column columnHandler="NONE" display_name="ID" isVisible="true" name="id" />
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="classroom_identifier"  />
		 <column columnHandler="EDIT_CLASSROOM_HANDLER" display_name="EDIT" isVisible="true" name="edit_id" />
		  
<table_name>classroom_details</table_name>
		<sql>
		SELECT
			ID,
			classroom_identifier
		FROM
			classroom_details
		WHERE
			organization_id = :org_id
		</sql>
		<title> All classroom associated with this organization</title>
	</reports>

	<reports id="191" type_of_report="table">
		<column columnHandler="NONE" display_name="Student ID" isVisible="true" name="stu_id" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Student Name" isVisible="true" name="name" edit_type="READ_ONLY"/>
		<column columnHandler="NULL_HANDLER" display_name="Score" isVisible="true" name="points_earned" edit_type="READ_ONLY"/>
		<column columnHandler="VIEW_ASSESSMENT_REPORT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
	    
		<sql >
			SELECT DISTINCT
	T3.ass_id,
	T3.lesson_title,
	T3.eventdate,
	T3.event_id,
	T3.stu_id,
	T3. NAME AS NAME,
	T3.email,
	R.points_earned,
        (
		'T' || T3.stu_id || 'A' || T3.ass_id ||'D'||to_char(T3.eventdate,'YYYYMMDDThhMIss')||'E'
	) as status

FROM
	(
		SELECT DISTINCT
			T2.ass_id,
			T2.lesson_title,
			IAE.eventdate,
			CAST (IAE. ID AS VARCHAR(50)) AS event_id,
			T1.stu_id,
			T1. NAME,
			T1.email
		FROM
			istar_assessment_event IAE,
			(
				SELECT
					S. ID AS stu_id,
					S. NAME,
					S.email
				FROM
					batch B,
					batch_group BG,
					batch_students BS,
					student S
				WHERE
					B.batch_group_id = BG. ID
				AND BG. ID = BS.batch_group_id
				AND BS.student_id = S. ID
				AND B. ID = :batchID
			) T1,
			(
				SELECT
					assessment. ID AS ass_id,
					lesson.title AS lesson_title
				FROM
					lesson,
					cmsession,
					MODULE,
					course,
					assessment,
					batch
				WHERE
					lesson.session_id = cmsession. ID
				AND cmsession.module_id = MODULE . ID
				AND course. ID = MODULE .course_id
				AND batch.course_id = course. ID
				AND batch. ID = :batchID
				AND lesson.dtype = 'ASSESSMENT'
				AND assessment.lesson_id = lesson. ID
			) T2
		WHERE
			IAE.actor_id = T1.stu_id
		AND T2.ass_id = IAE.assessment_id
	) T3
LEFT OUTER JOIN report R ON (
	R.user_id = T3.stu_id
	AND R.assessment_id = T3.ass_id
)
WHERE
	to_char(
		T3.eventdate,
		'YYYYMMDDThhMIss'
	) LIKE :date_time_key
AND T3.ass_id = :assessmentID
		</sql>
		<title> Assessment report for a batch</title>
	</reports>

	<reports id="192" type_of_report="table">
	    <column columnHandler="DATE" display_name="Event date" isVisible="true" name="eventdate" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Assessment ID" isVisible="true" name="ass_id" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Lesson title" isVisible="true" name="lesson_title" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Number of Qns" isVisible="true" name="total" edit_type="READ_ONLY"/>
		<column columnHandler="NULL_HANDLER" display_name="Average Score" isVisible="true" name="average_score" edit_type="READ_ONLY"/>
		<column columnHandler="VIEW_ASSESSMENT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status" edit_type="READ_ONLY"/>
		<sql >
			SELECT DISTINCT  round(( SUM (R.score) * 100 / SUM (T3.total_questions) ),2)AS average_score, T3.total_questions  as total, T3.ass_id, T3.lesson_title,('B'||:batch_id||'A'||T3.ass_id||'D'||to_char(T3.eventdate,'YYYYMMDDThhMIss')||'E') as status,  T3.eventdate
			FROM	(  SELECT DISTINCT T2.total_questions, T2.ass_id, T2.lesson_title, IAE.eventdate, CAST (IAE. ID AS VARCHAR(50)) AS event_id, T1.stu_id, T1. NAME, T1.email
							FROM istar_assessment_event IAE,
								(  SELECT S. ID AS stu_id, S. NAME, S.email
									FROM 	batch B, batch_group BG, batch_students BS, student S
									WHERE B.batch_group_id = BG. ID AND BG. ID = BS.batch_group_id AND BS.student_id = S. ID AND B. ID = :batch_id
								) T1,
								(   SELECT assessment. ID AS ass_id, lesson.title AS lesson_title, 
									( SELECT COUNT (*) FROM assessment_question WHERE assessmentid = assessment. ID ) AS total_questions
									FROM lesson, cmsession, MODULE, course, assessment,  batch
									WHERE lesson.session_id = cmsession. ID AND cmsession.module_id = MODULE . ID AND course. ID = MODULE .course_id 
												AND batch.course_id = course. ID AND batch. ID = :batch_id AND lesson.dtype = 'ASSESSMENT' AND assessment.lesson_id = lesson. ID
								) T2 WHERE IAE.actor_id = T1.stu_id AND T2.ass_id = IAE.assessment_id
						) T3
			LEFT OUTER JOIN report R ON ( R.user_id = T3.stu_id AND R.assessment_id = T3.ass_id )
			GROUP BY T3.ass_id, T3.ass_id, T3.lesson_title, T3.eventdate, T3.total_questions
			ORDER BY T3.eventdate DESC
		</sql>
		<title> Assessments' summary report  associated with a batch</title>
	</reports>

	<reports id="193" type_of_report="table">
		<column columnHandler="DATE" display_name="Event Date" isVisible="true" name="eventdate" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Student Name" isVisible="true" name="student_name" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Rating" isVisible="true" name="rating" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Noise" isVisible="true" name="noise" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Attendance" isVisible="true" name="attendance" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Sick" isVisible="true" name="sick" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Content" isVisible="true" name="content" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Assignment" isVisible="true" name="assignment" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Internals" isVisible="true" name="internals" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Electricity" isVisible="true" name="electricity" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Time" isVisible="true" name="time" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Internet" isVisible="true" name="internet" edit_type="READ_ONLY"/>
		<column columnHandler="NULL_HANDLER" display_name="Comments" isVisible="true" name="comments" edit_type="READ_ONLY"/>
		<column columnHandler="TRAINER_LOGS_HANDLER" display_name="Trainer Logs" isVisible="true" name="status" edit_type="READ_ONLY"/>
		<sql >
			SELECT DISTINCT
				CAST ( trainer_feedback.event_id AS VARCHAR (50) ) as status,
				batch_schedule_event.eventdate,
				student. NAME as student_name,
				rating,
				noise,
				attendance,
				sick,
				content,
				assignment,
				internals,
				electricity,
				time,
				internet,
				comments
			FROM
				trainer_feedback,
				batch_schedule_event,
				student
			WHERE
				student. ID = batch_schedule_event.actor_id
			AND trainer_feedback.event_id = batch_schedule_event. ID
			AND trainer_feedback.batch_id = :batch_id
			ORDER BY
				batch_schedule_event.eventdate DESC;
		</sql>
		<title> Trainer feedback report associated with a batch</title>
	</reports>

	<reports id="194" type_of_report="table">
		<column columnHandler="NONE" display_name="Trainer Id" isVisible="true" name="id" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Gender" isVisible="true" name="gender" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Password" isVisible="true" name="password" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="mobile" isVisible="true" name="mobile" edit_type="READ_ONLY"/>
		<sql >
			SELECT
				s.id,
				s.email,
				s.name,
				s.gender,
				s.password,
				s.mobile
			FROM
				trainer_course tc,
				student s
			WHERE
				s. ID = tc.trainer_id
				and s.user_type = 'TRAINER'
			ORDER BY
				NAME 
		</sql>
		<title> Trainer list associated with a course</title>
	</reports>

	<reports id="195" type_of_report="table">
		<column columnHandler="NONE" display_name="Trainer Id" isVisible="true" name="id" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Gender" isVisible="true" name="gender" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Password" isVisible="true" name="password" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="mobile" isVisible="true" name="mobile" edit_type="READ_ONLY"/>
		<sql >
			SELECT
				s.id,
				s.email,
				s.name,
				s.gender,
				s.password,
				s.mobile
			FROM
				trainer_course tc,
				student s
			WHERE
				s. ID = tc.trainer_id
				and s.user_type = 'TRAINER'
				and tc.course_id=:course_id
			ORDER BY
				NAME 
		</sql>
		<title> Trainer list associated with a course</title>
	</reports>

	<reports id="196" type_of_report="table">
		<column columnHandler="NONE" display_name="Trainer Id" isVisible="true" name="id"  />
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Gender" isVisible="true" name="gender" />
		<column columnHandler="NONE" display_name="Password" isVisible="true" name="password" />
		<column columnHandler="NONE" display_name="mobile" isVisible="true" name="mobile"/>
		<column columnHandler="NONE" display_name="Mother Name" isVisible="false" name="mother_name" />
		<column columnHandler="NONE" display_name="Father Name" isVisible="false" name="father_name" />
		<column columnHandler="NONE" display_name="User Type" isVisible="false" name="user_type" />
		<column columnHandler="VIEW_TRAINER" display_name="View Profile" isVisible="true" name="iddd"/>
		<column columnHandler="EDIT_TRAINER_HANDLER" display_name="EDIT" isVisible="true" name="edit_id" />
		
		<table_name>trainer</table_name>
		<sql >
			SELECT
				id,
				email,
				name,
				gender,
				password,
				mobile, 
				id as iddd
			FROM
				student
			WHERE
				user_type = 'TRAINER'
			ORDER BY
				NAME 
		</sql>
		<title> Trainer list </title>
	</reports>
	
	<reports id="197" type_of_report="table">
	    <column columnHandler="NONE" display_name="BatchGroup Code" isVisible="true" name="bgcode" />
		<column columnHandler="NONE" display_name="BatchGroup Id" isVisible="true" name="id" />
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Student Count" isVisible="true" name="stu_count" />
		<column columnHandler="NONE" display_name="Batch Count" isVisible="true" name="batch_count" />
		<column columnHandler="NONE" display_name="View" isVisible="true" name="status" />
		<column columnHandler="EDIT_BATCHGROUP_HANDLER" display_name="EDIT" isVisible="true" name="edit_id" />
		
		<table_name>batch_group</table_name>
		<sql >
			SELECT
			CASE WHEN batch_group.batch_code ISNULL THEN 'N/A'
         ELSE batch_group.batch_code 
       END as bgcode ,
				batch_group. ID,
				batch_group. NAME,
				(
					SELECT
						COUNT (*)
					FROM
						batch_students
					WHERE
						batch_group_id = batch_group. ID
				) AS stu_count,
				(
					SELECT
						COUNT (*)
					FROM
						batch
					WHERE
						batch.batch_group_id = batch_group. ID
				) AS batch_count,
				('&lt;a href=''/orgadmin/batch_group/dashboard.jsp?batch_group_id='||batch_group. ID||''' class=''btn btn-primary btn-xs''&gt;&lt;i class=''fa fa-folder''&gt;&lt;/i&gt; View &lt;/a&gt;') as status
			FROM
				batch_group
			WHERE
				college_id = :org_id
			ORDER BY
				NAME
		</sql>
		<update_sql >
			SELECT
				batch_group.id,
				batch_group.name,
				batch_group.max_students
			FROM
				batch_group
			WHERE
				org_id = :org_id
			ORDER BY
				NAME
		</update_sql>
		<title> Batches in an organization </title>
	</reports>
	
	<reports id="198" type_of_report="table">
		<column columnHandler="NONE" display_name="Student Id" isVisible="true" name="id" />
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
		<column columnHandler="NONE" display_name="Password" isVisible="true" name="password" />
		<column columnHandler="NONE" display_name="Mobile" isVisible="true" name="mobile" />
		<column columnHandler="NONE" display_name="Gender" isVisible="true" name="gender" />
		<column columnHandler="NONE" display_name="User Type" isVisible="false" name="user_type" />
		<column columnHandler="NONE" display_name="Mother Name" isVisible="false" name="mother_name" />
		<column columnHandler="NONE" display_name="Father Name" isVisible="false" name="father_name" />
		<column columnHandler="VIEW_STUDENT" display_name="View Profile" isVisible="true" name="iddd"/>
	<column columnHandler="EDIT_TRAINER_HANDLER" display_name="EDIT" isVisible="true" name="edit_id" />
		<table_name>student</table_name>
		<sql >
			SELECT
				s.id as id,
				s.email as email,
				s.name as name,
				s.gender as gender,
				s.password as password,
				s.user_type as user_type,
				s.mobile as mobile,
				s.father_name,
				s.mother_name
			FROM
				student s
			WHERE
				organization_id = :org_id
			AND user_type = 'STUDENT'
			ORDER BY
				NAME
		</sql>
		<title> Students in an organization </title>
	</reports>
	
	<reports id="199" type_of_report="table">
		<column columnHandler="NONE" display_name="ID" isVisible="true" name="id" />
		<column columnHandler="DATE" display_name="Event date" isVisible="true" name="event_date" />
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="trainer_name" />
		<column columnHandler="NONE" display_name="Present count" isVisible="true" name="present" />
		<column columnHandler="NONE" display_name="Absent count" isVisible="true" name="absent" />
		<column columnHandler="BATCH_ATTENDANCE_HANDLER" display_name="View" isVisible="true" name="id" />

		<sql>
			SELECT
				CAST ( batch_schedule_event. ID AS VARCHAR (50) ) as id,
				batch_schedule_event.eventdate as event_date,
				student. NAME as trainer_name,
				COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ) AS present,
				COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ) AS absent
			FROM
				batch_schedule_event
			LEFT JOIN attendance ON ( attendance.event_id = batch_schedule_event. ID )
			LEFT JOIN student ON ( student. ID = batch_schedule_event.actor_id )
			WHERE
				batch_schedule_event.batch_id = :batch_id
			AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND batch_schedule_event.event_name LIKE '%REAL EVENT%'
			GROUP BY
				batch_schedule_event. ID,
				batch_schedule_event.eventdate,
				student. NAME
			ORDER BY
				batch_schedule_event.eventdate DESC
		</sql>
		<title> Attendance records of a batch</title>
	</reports>
	
	<reports id="200" type_of_report="line" dateselector="true">
		<column columnHandler="DATE" display_name="Event date" isVisible="true" name="event_date" />
		<column columnHandler="NONE" display_name="Present count" isVisible="true" name="present" />
		<column columnHandler="NONE" display_name="Absent count" isVisible="true" name="absent" />

		<sql>
			SELECT
				CAST ( batch_schedule_event. ID AS VARCHAR (50) ) as id,
				batch_schedule_event.eventdate as  event_date,
				student. NAME as trainer_name,
				COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ) AS present,
				COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ) AS absent
			FROM
				batch_schedule_event
			LEFT JOIN attendance ON ( attendance.event_id = batch_schedule_event. ID )
			LEFT JOIN student ON ( student. ID = batch_schedule_event.actor_id )
			WHERE
				batch_schedule_event.batch_id = :batch_id
			AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND batch_schedule_event.event_name LIKE '%REAL EVENT%'
			GROUP BY
				batch_schedule_event. ID,
				batch_schedule_event.eventdate,
				student. NAME
			ORDER BY
				batch_schedule_event.eventdate ASC
		</sql>
		<title> Attendance records of a batch</title>
	</reports>
	<reports id="201" type_of_report="column">
		<column columnHandler="NONE" display_name="Batch Name" isVisible="true" name="batch_name" />
		<column columnHandler="NONE" display_name="Percentage Present" isVisible="true" name="present_percent" />
		<column columnHandler="NONE" display_name="Percentage Absent" isVisible="true" name="absent_percent" />

		<sql>
			SELECT
		case when ((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) > 0
		then 	((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT')*100)/((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) )
			else 0
end 
as absent_percent,
case when ((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) > 0
		then 	((COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT')*100)/((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) )
			else 0
end 
as present_percent,
				batch.name as batch_name
			FROM
				batch_schedule_event
			LEFT JOIN attendance ON ( attendance.event_id = batch_schedule_event. ID )
			left join batch on (batch.id =batch_schedule_event.batch_id )
			WHERE
			batch_schedule_event.batch_id in (
SELECT
	distinct B.id
FROM
	batch B,
	batch_group BG
WHERE
	BG. ID = B.batch_group_id
and BG.college_id=:org_id

)
			AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND batch_schedule_event.event_name LIKE '%REAL EVENT%'
group by batch.name
			
			
		</sql>
		<title> Attendance records of all batches</title>
	</reports>
	<reports id="202" type_of_report="column">
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Avg Rating" isVisible="true" name="average_rating" />

		<sql>
			SELECT 
sum(trainer_feedback.rating) as average_rating, batch.name

FROM
	trainer_feedback, batch
	
WHERE
batch.id = trainer_feedback.batch_id
and trainer_feedback.event_id in (select distinct  batch_schedule_event.id from batch_schedule_event, batch, batch_group
where  batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
and batch_schedule_event.event_name not like '%TEST%'
AND batch_schedule_event.batch_id = batch. ID
AND batch.batch_group_id = batch_group. ID
AND batch_group.college_id = :org_id
 )
group by (batch.name)
order by batch.name



			
			
		</sql>
		<title> Feedback by Trainer Per Batch</title>
	</reports>
	<reports id="203" type_of_report="table">
		<column columnHandler="NONE" display_name="Trainer Id" isVisible="true" name="id" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Gender" isVisible="true" name="gender" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="mobile" isVisible="true" name="mobile" edit_type="READ_ONLY"/>
		<sql >
			SELECT DISTINCT
				s.id,
				s.email,
				s.name,
				s.gender,
				
				s.mobile
			FROM
				trainer_batch tc,
				student s
			WHERE
				s. ID = tc.trainer_id
				and s.user_type = 'TRAINER'
				and tc.batch_id= :batch_id
			ORDER BY
				NAME 
		</sql>
		<title> Trainer list associated with a Batch</title>
	</reports>
	<reports id="204" type_of_report="pie">
		<column columnHandler="NONE" display_name="Org Name" isVisible="true" name="org_name" />
		<column columnHandler="NONE" display_name="Percentage Present" isVisible="true" name="present_percent" />
		<column columnHandler="NONE" display_name="Percentage Absent" isVisible="true" name="absent_percent" />

		<sql>
			SELECT
		case when ((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) > 0
		then 	((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT')*100)/((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) )
			else 0
end 
as absent_percent,
case when ((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) > 0
		then 	((COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT')*100)/((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) )
			else 0
end 
as present_percent,
				organization.name as org_name
			FROM
			batch_schedule_event
			LEFT JOIN attendance ON ( attendance.event_id = batch_schedule_event. ID )
			left join batch on (batch.id =batch_schedule_event.batch_id )
			left join batch_group on (batch_group.id = batch.batch_group_id)
			left join organization on (organization.id = batch_group.college_id)
			
			WHERE
			batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND batch_schedule_event.event_name LIKE '%REAL EVENT%'
group by organization.name
			
			
		</sql>
		<title> Attendance records of all organization</title>
	</reports>
	<reports id="205" type_of_report="table">
		<column columnHandler="NONE" display_name="ID" isVisible="true" name="id" edit_type="READ_ONLY"/>
			<column columnHandler="NONE" display_name="Event Schedule" isVisible="true" name="eventdate" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Trainer Name" isVisible="true" name="name" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="event_name" edit_type="READ_ONLY"/>
		<column columnHandler="UPDATE_ATTENDANCE_HANDLER" display_name="Update" isVisible="true" name="id" edit_type="READ_ONLY"/>
		<sql >
			SELECT distinct 
	cast (batch_schedule_event.id as varchar(50)), event_name, to_char(eventdate,'DD-MM-YYYY HH:mm:ss') as eventdate, student.name
FROM
	batch_schedule_event, student
WHERE
	batch_id = :batch_id
and student.id = batch_schedule_event.actor_id
AND event_name NOT LIKE '%TEST%'
AND TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
		</sql>
		<title> Update Attendance for a batch</title>
	</reports>
	
	<reports id="206" type_of_report="table">
	    <column columnHandler="DATE" display_name="Event date" isVisible="true" name="eventdate" />
		<column columnHandler="NONE" display_name="Assessment ID" isVisible="true" name="ass_id" />
		<column columnHandler="NONE" display_name="BatchName" isVisible="true" name="batch_name" />
		<column columnHandler="NONE" display_name="Lesson title" isVisible="true" name="lesson_title"/>
		<column columnHandler="NONE" display_name="Number of Qns" isVisible="true" name="total" />
		<column columnHandler="NONE" display_name="Number student attended" isVisible="true" name="attended" />
		<column columnHandler="NULL_HANDLER" display_name="Average Score" isVisible="true" name="average_score" />
		<column columnHandler="VIEW_ASSESSMENT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
		<sql >
				SELECT distinct 
istar_assessment_event.eventdate AS eventdate,
istar_assessment_event.assessment_id AS ass_id,
lesson.title AS lesson_title,
('B'||batch.id||'A'||istar_assessment_event.assessment_id||'D'||to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')||'E') as status,
(
SELECT
COUNT (*)
FROM
assessment_question
WHERE
assessmentid = assessment. ID
) AS total,
batch. NAME AS batch_name,
batch.id as batch_id ,
count(istar_assessment_event.actor_id) || '/' || (SELECT
count(student_id)
FROM
batch_students bs,
batch b,
batch_group bg
WHERE
b.batch_group_id = bg. ID
AND bg. ID = bs.batch_group_id
AND b. ID = batch.id  )  as attended,
ROUND( AVG(score),2 )as average_score

FROM
istar_assessment_event,
assessment,
lesson,
batch, report

WHERE
istar_assessment_event.assessment_id = assessment. ID
and report.assessment_id = istar_assessment_event.assessment_id
and report.user_id = istar_assessment_event.actor_id
AND assessment.lesson_id = lesson. ID
AND batch. ID = istar_assessment_event.batch_id
AND batch_id IN (
SELECT DISTINCT
batch. ID
FROM
BATCH,
batch_group,
college
WHERE
college. ID = batch_group.college_id
AND batch.BATCH_GROUP_ID = batch_group. ID
AND college. ID = :org_id
)
group by batch.id ,istar_assessment_event.assessment_id,batch_name,eventdate,lesson_title, total		
			ORDER BY istar_assessment_event.eventdate DESC
		</sql>
		<title> Assessments' summary report  associated with a org</title>
	</reports>
	
	<reports id="207" type_of_report="table">
	    <column columnHandler="DATE" display_name="Event date" isVisible="true" name="eventdate" />
		<column columnHandler="NONE" display_name="Assessment ID" isVisible="true" name="ass_id" />
		<column columnHandler="NONE" display_name="BatchName" isVisible="true" name="batch_name" />
		<column columnHandler="NONE" display_name="Lesson title" isVisible="true" name="lesson_title"/>
		<column columnHandler="NONE" display_name="Number of Qns" isVisible="true" name="total" />
		<column columnHandler="NONE" display_name="Number student attended" isVisible="true" name="attended" />
		<column columnHandler="NULL_HANDLER" display_name="Average Score" isVisible="true" name="average_score" />
		<column columnHandler="VIEW_ASSESSMENT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
		<sql >
				SELECT distinct 
istar_assessment_event.eventdate AS eventdate,
istar_assessment_event.assessment_id AS ass_id,
lesson.title AS lesson_title,
('B'||batch.id||'A'||istar_assessment_event.assessment_id||'D'||to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')||'E') as status,
(
SELECT
COUNT (*)
FROM
assessment_question
WHERE
assessmentid = assessment. ID
) AS total,
batch. NAME AS batch_name,
batch.id as batch_id ,
count(istar_assessment_event.actor_id) || '/' || (SELECT
count(student_id)
FROM
batch_students bs,
batch b,
batch_group bg
WHERE
b.batch_group_id = bg. ID
AND bg. ID = bs.batch_group_id
AND b. ID = batch.id  )  as attended,
ROUND( AVG(score),2 ) as average_score

FROM
istar_assessment_event,
assessment,
lesson,
batch, report

WHERE
istar_assessment_event.assessment_id = assessment. ID
and report.assessment_id = istar_assessment_event.assessment_id
and report.user_id = istar_assessment_event.actor_id
AND assessment.lesson_id = lesson. ID
AND batch. ID = istar_assessment_event.batch_id
AND batch_id IN (
SELECT DISTINCT
batch. ID
FROM
BATCH,
batch_group
WHERE
 batch.BATCH_GROUP_ID = batch_group. ID
AND batch_group. ID= :batch_group_id

)
group by batch.id ,istar_assessment_event.assessment_id,batch_name,eventdate,lesson_title, total	
			ORDER BY istar_assessment_event.eventdate DESC
		</sql>
		<title> Assessments' summary report  associated with a Batches</title>
	</reports>
	
	<reports id="208" type_of_report="table">
	    <column columnHandler="DATE" display_name="Event date" isVisible="true" name="eventdate" />
		<column columnHandler="NONE" display_name="Assessment ID" isVisible="true" name="ass_id" />
		
		<column columnHandler="NONE" display_name="Lesson title" isVisible="true" name="lesson_title"/>
		<column columnHandler="NONE" display_name="Number of Qns" isVisible="true" name="total" />
		<column columnHandler="NONE" display_name="Number student attended" isVisible="true" name="attended" />
		<column columnHandler="NULL_HANDLER" display_name="Average Score" isVisible="true" name="average_score" />
		<column columnHandler="VIEW_ASSESSMENT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
		<sql >
SELECT distinct 
istar_assessment_event.eventdate AS eventdate,
istar_assessment_event.assessment_id AS ass_id,
lesson.title AS lesson_title,
('B'||batch.id||'A'||istar_assessment_event.assessment_id||'D'||to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')||'E') as status,
(
SELECT
COUNT (*)
FROM
assessment_question
WHERE
assessmentid = assessment. ID
) AS total,
batch. NAME AS batch_name,
batch.id as batch_id ,
count(istar_assessment_event.actor_id) || '/' || (SELECT
count(student_id)
FROM
batch_students bs,
batch b,
batch_group bg
WHERE
b.batch_group_id = bg. ID
AND bg. ID = bs.batch_group_id
AND b. ID = batch.id  )  as attended,
ROUND( AVG(score),2 ) as average_score

FROM
istar_assessment_event,
assessment,
lesson,
batch, report

WHERE
istar_assessment_event.assessment_id = assessment. ID
and report.assessment_id = istar_assessment_event.assessment_id
and report.user_id = istar_assessment_event.actor_id
AND assessment.lesson_id = lesson. ID
AND batch. ID = istar_assessment_event.batch_id
AND batch_id IN (
SELECT DISTINCT
batch. ID
FROM
BATCH,
batch_group
WHERE
 batch.BATCH_GROUP_ID = batch_group. ID
AND batch.ID= :batch_id

)
group by batch.id ,istar_assessment_event.assessment_id,batch_name,eventdate,lesson_title, total	
			ORDER BY istar_assessment_event.eventdate DESC
		</sql>
		<title> Assessments' summary report  associated with a Batches</title>
	</reports>
	
	<reports id="209" type_of_report="table">
	    <column columnHandler="NONE" display_name="Batch Id" isVisible="true" name="bg_id" />
	    <column columnHandler="NONE" display_name="Program" isVisible="true" name="batch_group_name" />
	    <column columnHandler="NONE" display_name="Student ID" isVisible="true" name="id" />
	    <column columnHandler="NONE" display_name="Name" isVisible="true" name="student_name" />
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
	    <column columnHandler="NONE" display_name="User Type" isVisible="true" name="user_type" />
	    
	
		<sql >
			SELECT DISTINCT
			batch_group.id as bg_id,
		    batch_group.name as batch_group_name,
		    student.id,
			student.email,
			
			student.name as student_name,
			batch_students.user_type
			FROM
				student,
				batch_group,
				batch_students
			WHERE
				batch_group. ID = batch_students.batch_group_id
			AND batch_students.student_id = student.id
			AND batch_group.college_id= :org_id
			ORDER BY bg_id
			
		</sql>
		<title> Notification  associated with a Batches</title>
	</reports>
	
	<reports id="210" type_of_report="table">
	    <column columnHandler="NONE" display_name="Date" isVisible="true" name="date" />
	    <column columnHandler="NONE" display_name="Assessment Name" isVisible="true" name="lesson_name" />
	    <column columnHandler="NONE" display_name="Total Questions" isVisible="true" name="total_q" />
	   <column columnHandler="NULL_HANDLER" display_name="Average Score" isVisible="true" name="average_score" />
		<column columnHandler="VIEW_ASSESSMENT_REPORT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
	    
	
		<sql >
SELECT DISTINCT
	istar_assessment_event.eventdate AS DATE,
	report.score AS average_score,
	lesson.title lesson_name,
	
--	istar_assessment_event.assessment_id,
	COUNT (assessment_question) AS total_q,
	(
		'T' || actor_id || 'A' || istar_assessment_event.assessment_id ||'D'||to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')||'E'
	) AS status
FROM
	istar_assessment_event,
	report,
	assessment,
	lesson,
	assessment_question
WHERE
	istar_assessment_event.actor_id = :trainer_id
AND istar_assessment_event.assessment_id = report.assessment_id
AND istar_assessment_event.assessment_id = assessment. ID
AND assessment.lesson_id = lesson. ID
AND istar_assessment_event.assessment_id = assessment_question.assessmentid
GROUP BY
	istar_assessment_event.eventdate,
	report.score,
	lesson.title,
	istar_assessment_event.assessment_id,
istar_assessment_event.actor_id
ORDER BY
	istar_assessment_event.eventdate
			
		</sql>
		<title> </title>
	</reports>
	<reports id="211" type_of_report="table">
	<column columnHandler="NONE" display_name="Qusetion Id" isVisible="true" name="qid" />
	    <column columnHandler="NONE" display_name="Qusetion" isVisible="true" name="question" />
	     <column columnHandler="NONE" display_name="All Option" isVisible="true" name="options" />
	     <column columnHandler="NONE" display_name="Correct Option" isVisible="true" name="answer" />
	    <column columnHandler="NONE" display_name="Result" isVisible="true" name="is_correct" />
	 
		<sql>
			SELECT
	q. ID AS qid,
	q.question_text AS question,
	array_to_string(
		ARRAY_AGG (
			REPLACE (
				REPLACE (ao. TEXT, '&lt;&#47;p&gt;', ''),
				'&lt;p&gt;',
				''
			)
		),
		'&lt;br&gt;'
	) AS OPTIONS,
	array_to_string(
		ARRAY_AGG (
			CASE
			WHEN ao.marking_scheme = 1 THEN
				ao. TEXT
			ELSE
				''
			END
		),
		''
	) AS answer,
	(
		CASE
		WHEN sa.correct IS TRUE THEN
			'Correct'
		WHEN sa.correct IS FALSE THEN
			'Incorrect'
		ELSE
			'Skipped'
		END
	) AS is_correct
FROM
	assessment_question aq
INNER JOIN question q ON TRUE
LEFT JOIN student_assessment sa ON (
	q. ID = sa.question_id
	AND sa.assessment_id = aq.assessmentid
	AND sa.student_id = :trainer_id
),
 assessment_option ao
WHERE
	aq.questionid = q. ID
AND aq.assessmentid = :assessment_id
AND ao.question_id = q. ID
GROUP BY
	q. ID,
	q.question_text,
	is_correct
ORDER BY
	q. ID
		</sql>
		<title> </title>
	</reports>
	
	<reports id="212" type_of_report="table">
	    <column columnHandler="DATE" display_name="Date" isVisible="true" name="date" />
	    <column columnHandler="NONE" display_name="Assessment Name" isVisible="true" name="lesson_name" />
	    <column columnHandler="NONE" display_name="Total Questions" isVisible="true" name="total_q" />
	    <column columnHandler="NULL_HANDLER" display_name="Score" isVisible="true" name="average_score" />
		<column columnHandler="VIEW_ASSESSMENT_REPORT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
	    
	
		<sql >
SELECT DISTINCT
istar_assessment_event.actor_id,
istar_assessment_event.eventdate as date,
 istar_assessment_event.assessment_id,
lesson.title as lesson_name,
 report.score as average_score,
(
SELECT
COUNT (*) as total_q
FROM
assessment_question
WHERE
assessment_question.assessmentid = istar_assessment_event.assessment_id
),
(
		'T' || actor_id || 'A' || istar_assessment_event.assessment_id ||'D'||to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')||'E'
	) as status

FROM
istar_assessment_event,
report,
lesson, 
assessment
WHERE
istar_assessment_event.actor_id = :user_id
AND report.assessment_id = istar_assessment_event.assessment_id
AND report.user_id = istar_assessment_event.actor_id
and lesson.id = assessment.lesson_id
and assessment.id = istar_assessment_event.assessment_id
GROUP BY istar_assessment_event.eventdate,istar_assessment_event.assessment_id, lesson.title,istar_assessment_event.actor_id, report.score

			
		</sql>
		<title> </title>
	</reports>
	
	<reports id="213" type_of_report="table">
	    <column columnHandler="DATE" display_name="Date" isVisible="true" name="date" />
	    <column columnHandler="NONE" display_name="Assessment Name" isVisible="true" name="lesson_name" />
	    <column columnHandler="NONE" display_name="Total Questions" isVisible="true" name="total_q" />
	   <column columnHandler="NULL_HANDLER" display_name="Average Score" isVisible="true" name="average_score" />
		<column columnHandler="VIEW_ASSESSMENT_REPORT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
	    
	
		<sql >
SELECT DISTINCT
istar_assessment_event.actor_id,
istar_assessment_event.eventdate as date,
 istar_assessment_event.assessment_id,
lesson.title as lesson_name,
 report.score as average_score,
(
SELECT
COUNT (*) as total_q
FROM
assessment_question
WHERE
assessment_question.assessmentid = istar_assessment_event.assessment_id
),
(
		'T' || actor_id || 'A' || istar_assessment_event.assessment_id ||'D'||to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')||'E'
	)

FROM
istar_assessment_event,
report,
lesson, 
assessment
WHERE
istar_assessment_event.actor_id = :user_id
And istar_assessment_event.batch_id = :batch_id
AND report.assessment_id = istar_assessment_event.assessment_id
AND report.user_id = istar_assessment_event.actor_id
and lesson.id = assessment.lesson_id
and assessment.id = istar_assessment_event.assessment_id
GROUP BY istar_assessment_event.eventdate,istar_assessment_event.assessment_id, lesson.title,istar_assessment_event.actor_id, report.score

			
		</sql>
		<title> </title>
	</reports>
	
	<reports id="214" type_of_report="column">
		<column columnHandler="DATE" display_name="Event date" isVisible="true" name="event_date" />
		<column columnHandler="NONE" display_name="Present count" isVisible="true" name="present" />
		<column columnHandler="NONE" display_name="Absent count" isVisible="true" name="absent" />

		<sql>
			SELECT
				CAST ( batch_schedule_event. ID AS VARCHAR (50) ) as id,
				batch_schedule_event.eventdate as  event_date,
				student. NAME as trainer_name,
				COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ) AS present,
				COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ) AS absent
			FROM
				batch_schedule_event
			LEFT JOIN attendance ON ( attendance.event_id = batch_schedule_event. ID  AND attendance.user_id= :user_id )
			LEFT JOIN student ON ( student. ID = batch_schedule_event.actor_id )
			WHERE
				batch_schedule_event.batch_id = :batch_id
			AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND batch_schedule_event.event_name LIKE '%REAL EVENT%'
			GROUP BY
				batch_schedule_event. ID,
				batch_schedule_event.eventdate,
				student. NAME
			ORDER BY
				batch_schedule_event.eventdate DESC
		</sql>
		<title> Attendance records of a batch</title>
	</reports>
	
	<reports id="215" type_of_report="table">
	
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="s_name" />
		<column columnHandler="NONE" display_name="Batch" isVisible="true" name="b_name" />
		<column columnHandler="NONE" display_name="No Of Class" isVisible="true" name="no_class" />
		<column columnHandler="DURATION_HANDLER" display_name="HRS/MIN" isVisible="true" name="status" />
		
				
		<sql>
			SELECT DISTINCT
count(batch_schedule_event. ID) as no_class,
	
cast(sum((batch_schedule_event.eventhour*60 + batch_schedule_event.eventminute) )as integer) as status,

	batch.name as b_name,
     student.name as s_name
FROM
	batch_schedule_event,
	batch,
	batch_group,
  college,
  student
WHERE
	batch_schedule_event.batch_id = batch.id
AND
batch.batch_group_id = batch_group.id
AND
batch_group.college_id = college.id
AND
college.id = :org_id
AND 
student.user_type='TRAINER'
AND
batch_schedule_event.actor_id=student.id
GROUP BY b_name,s_name
		
		</sql>
		<title>trainer teaching duration </title>
	</reports>
	
	<reports id="216" type_of_report="column">
	
		<column columnHandler="NONE" display_name="College" isVisible="true" name="c_name" />
		<column columnHandler="NONE" display_name="Present" isVisible="true" name="present" />
		<column columnHandler="NONE" display_name="Absent" isVisible="true" name="absent" />
		
				
		<sql>
			SELECT DISTINCT
	college.name as c_name,
 count(*) FILTER( WHERE attendance.status='PRESENT')as present,
 count(*) FILTER( WHERE attendance.status='ABSENT')as absent,
 count(attendance.status)
FROM
	batch_schedule_event,
	attendance,
	batch,
	batch_group
LEFT JOIN college ON  (
	batch_group.college_id = college. ID
)
WHERE
	batch_schedule_event.batch_id = batch. ID
AND batch.batch_group_id = batch_group. ID
AND batch_schedule_event.id = attendance.event_id
GROUP BY c_name
		
		</sql>
		<title> </title>
	</reports>
	<reports id="217" type_of_report="table">
	
		<column columnHandler="NONE" display_name="ID" isVisible="true" name="stu_id" />
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="s_name" />
		<column columnHandler="DURATION_HANDLER" display_name="HOURS" isVisible="true" name="status" />
		
				
		<sql>

SELECT
	count(batch_schedule_event. ID) as no_class,

	sum((batch_schedule_event.eventhour*60 + batch_schedule_event.eventminute) )as status,
	student.name as s_name, 
	student.id as stu_id 
FROM
	batch_schedule_event,
  student
WHERE
batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
AND
batch_schedule_event.event_name LIKE '%REAL EVENT%'
AND
batch_schedule_event.actor_id = student.id

and student.user_type='TRAINER'
GROUP BY student.name, student.id 

		
		</sql>
		<title> </title>
	</reports>
	
	
	<reports id="218" type_of_report="table">
	
	    <column columnHandler="DATE" display_name="Date" isVisible="true" name="date" />
		<column columnHandler="NONE" display_name="No Class" isVisible="true" name="no_class" />
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="s_name" />
		<column columnHandler="NONE" display_name="Events" isVisible="true" name="class" />
		<column columnHandler="DURATION_HANDLER" display_name="HOURS" isVisible="true" name="status" />
		
				
		<sql>

SELECT
	count(batch_schedule_event. ID) as no_class,
	batch_schedule_event.eventdate as date,
	SUBSTRING(batch_schedule_event.event_name,22) as class,
	sum((batch_schedule_event.eventhour*60 + batch_schedule_event.eventminute) )as status,
	student.name as s_name, student.id as stu_id
FROM
	batch_schedule_event,
  student
WHERE
batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
AND
batch_schedule_event.event_name LIKE '%REAL EVENT%'
AND
batch_schedule_event.actor_id = student.id

and student.user_type='TRAINER'
GROUP BY student.name, student.id, eventdate,batch_schedule_event.event_name
order by batch_schedule_event.eventdate desc

		
		</sql>
		<title> </title>
		
	</reports>
	<reports id="219" type_of_report="table">
	
	    <column columnHandler="DATE" display_name="Date" isVisible="true" name="date" />
		
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="s_name" />
		<column columnHandler="NONE" display_name="Class" isVisible="true" name="class" />
		<column columnHandler="DURATION_HANDLER" display_name="HOURS" isVisible="true" name="status" />
		
				
		<sql>
SELECT
	batch_schedule_event.eventdate as date,
	
	
	SUBSTRING(batch_schedule_event.event_name,22) as class,
	sum((batch_schedule_event.eventhour*60 + batch_schedule_event.eventminute) )as status,
	student.name as s_name, student.id as stu_id
FROM
	batch_schedule_event,
  student
WHERE
batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
AND
batch_schedule_event.event_name LIKE '%REAL EVENT%'
AND
batch_schedule_event.actor_id = student.id
AND
cast (batch_schedule_event.eventdate as date) &gt;=   cast (:start_date as date)
AND
cast (batch_schedule_event.eventdate as date) &lt;=   cast (:end_date as date)
and student.user_type='TRAINER'
and student.id = :trainer_id
GROUP BY student.name, student.id, eventdate,batch_schedule_event.event_name
order by batch_schedule_event.eventdate DESC
		
		</sql>
		<title> </title>
		
	</reports>
	
	<reports id="220" type_of_report="table">
	
	    <column columnHandler="DATE" display_name="Date" isVisible="true" name="date" />
		
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="s_name" />
		<column columnHandler="NONE" display_name="Class" isVisible="true" name="class" />
		<column columnHandler="DURATION_HANDLER" display_name="HOURS" isVisible="true" name="status" />
		
				
		<sql>
SELECT
	batch_schedule_event.eventdate as date,
	
	
	SUBSTRING(batch_schedule_event.event_name,22) as class,
	sum((batch_schedule_event.eventhour*60 + batch_schedule_event.eventminute) )as status,
	student.name as s_name, student.id as stu_id
FROM
	batch_schedule_event,
  student
WHERE
batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
AND
batch_schedule_event.event_name LIKE '%REAL EVENT%'
AND
batch_schedule_event.actor_id = student.id

and student.user_type='TRAINER'
and student.id = :user_id
GROUP BY student.name, student.id, eventdate,batch_schedule_event.event_name
order by batch_schedule_event.eventdate DESC
		
		</sql>
		<title> </title>
		
	</reports>
	<reports id="221" type_of_report="area">
	
	   		
		<column columnHandler="NONE" display_name="question_id" isVisible="true" name="question_id" />
		 <column columnHandler="NONE" display_name="student_id" isVisible="true" name="student_id" />
		<column columnHandler="NONE" display_name="assessment_id" isVisible="true" name="assessment_id" />
		
				
		<sql>
select student_id, question_id, assessment_id from student_assessment where student_id in (18,3242,1275,1245)
		
		</sql>
		<title> </title>
		
	</reports>
	<reports id="222" type_of_report="pie">	
	    <column columnHandler="NONE" display_name="city" isVisible="true" name="city" />		
		<column columnHandler="NONE" display_name="stu_count" isVisible="true" name="perc" />
	<sql>
SELECT
	TFINAL.city,
	cast (100 * TFINAL.stu_count / SUM (TFINAL.stu_count) OVER () as integer ) AS perc 
FROM
	(
		SELECT DISTINCT
			pincode.city,
			COUNT (
				DISTINCT student_profile_data.student_id
			) AS stu_count
		FROM
			pincode,
			student_profile_data,
			jobs_event,
			vacancy
		WHERE
			student_profile_data.pincode = pincode.pin
		AND student_profile_data.student_id = jobs_event.actor_id
		AND jobs_event.vacancy_id = vacancy. ID
		AND vacancy.recruiter_id = :recruiter_id
		GROUP BY
			pincode.city
	) TFINAL
		
		</sql>
		<title>Where From </title>
		
	</reports>
		<reports id="223" type_of_report="pie">	
	    <column columnHandler="NONE" display_name="city" isVisible="true" name="under_graduate_degree_name" />		
		<column columnHandler="NONE" display_name="stu_count" isVisible="true" name="perc" />
	<sql>
SELECT
	outerTable.under_graduate_degree_name,
	SUM (percentageOfStudent) AS perc
FROM
	(
		SELECT
			COALESCE (
				TFINAL.under_graduate_degree_name,
				'OTHERS'
			) AS under_graduate_degree_name,
			CAST (
				100 * TFINAL.total_stu / SUM (TFINAL.total_stu) OVER () AS INTEGER
			) AS percentageOfStudent
		FROM
			(
				SELECT
					COUNT (DISTINCT student_id) AS total_stu,
					CASE
				WHEN student_profile_data.under_graduate_degree_name IN ('', ' ') THEN
					NULL
				ELSE
					student_profile_data.under_graduate_degree_name
				END
				FROM
					student_profile_data,
					jobs_event,
					vacancy
				WHERE
					student_profile_data.student_id = jobs_event.actor_id
				AND vacancy. ID = jobs_event.vacancy_id
				AND vacancy.recruiter_id =:recruiter_id
				GROUP BY
					student_profile_data.under_graduate_degree_name
			) TFINAL
	) outerTable
GROUP BY
outerTable.under_graduate_degree_name	
		</sql>
		<title>UnderGraduate Education </title>
		
	</reports>
	<reports id="224" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Stream" isVisible="true" name="under_graduation_specialization_name" />		
		<column columnHandler="NONE" display_name="Placed" isVisible="true" name="selected" />
		<column columnHandler="NONE" display_name="Not Placed" isVisible="true" name="non_selected" />
	<sql>
	
	SELECT
	coalesce(student_profile_data.under_graduation_specialization_name, 'OTHERS') as under_graduation_specialization_name,
	COUNT (*) FILTER (

		WHERE
			jobs_event.status = 'Offered'
	) AS selected,
	CASE when (
		(
			COUNT (*) FILTER (

				WHERE
					jobs_event.status = 'TARGETED'
			)
		) - (
			COUNT (*) FILTER (

				WHERE
					jobs_event.status = 'Offered'
			)
		)
	) &lt; 0 THEN
		0
	ELSE
		(
			COUNT (*) FILTER (

				WHERE
					jobs_event.status = 'TARGETED'
			) - (
				COUNT (*) FILTER (

					WHERE
						jobs_event.status = 'Offered'
				)
			)
		)
	END AS non_selected,
	COUNT (*) FILTER (

		WHERE
			jobs_event.status = 'TARGETED'
	) AS tttttt
FROM
	student_profile_data,
	jobs_event,
	vacancy
WHERE
	student_profile_data.student_id = jobs_event.actor_id
AND vacancy. ID = jobs_event.vacancy_id
AND vacancy.recruiter_id = :recruiter_id
GROUP BY
	student_profile_data.under_graduation_specialization_name

		</sql>
		<title>Stream wise graph </title>
		
	</reports>
	<reports id="225" type_of_report="column">	
	    <column columnHandler="NONE" display_name="stream" isVisible="true" name="stream" />		
		<column columnHandler="NONE" display_name="Country Avg." isVisible="true" name="country_avg" />
		<column columnHandler="NONE" display_name="City Avg." isVisible="true" name="city_avg" />
		<column columnHandler="NONE" display_name="Selection Rate" isVisible="true" name="selection_rate" />
	<sql>
select 'computer' as stream , 25 as country_avg , 25 as city_avg , 25 as selection_rate  
union
select 'electrical' as stream , 10 as country_avg, 25 as city_avg , 25 as selection_rate 
union 
select 'mechanical' as stream , 15 as country_avg , 25 as city_avg , 25 as selection_rate 
union
select 'mechanical' as stream , 50 as country_avg  , 25 as city_avg , 25 as selection_rate 
		
		</sql>
		<title>Selection rules </title>
		
	</reports>
	<reports id="226" type_of_report="pie">	
	    <column columnHandler="NONE" display_name="Industry" isVisible="true" name="industry" />		
		<column columnHandler="NONE" display_name="Percentage" isVisible="true" name="perce" />
	<sql>
	SELECT
	industry,
	industryCount * 100 / SUM (industryCount) OVER () AS perce
FROM
	(
		SELECT
			COUNT (*) AS industryCount,
			industry
		FROM
			(
				SELECT DISTINCT
					company.industry,
					vacancy.profile_title
				FROM
					company
				INNER JOIN vacancy ON vacancy.company_id = company. ID
				INNER JOIN jobs_event ON vacancy. ID = jobs_event.vacancy_id
				INNER JOIN student ON jobs_event.actor_id = student. ID
				WHERE
					student.organization_id =:collegeId
			) AS tempTable
		GROUP BY
			industry
	) AS outerTable
GROUP BY
	industry,
	industryCount
		</sql>
		<title>Recruiter types </title>
		
	</reports>
	<reports id="227" type_of_report="pie">	
	    <column columnHandler="NONE" display_name="city" isVisible="true" name="pg_degree_name" />		
		<column columnHandler="NONE" display_name="stu_count" isVisible="true" name="perc" />
	<sql>
SELECT
	outerTable.pg_degree_name,
	SUM (percentageOfStudent) as perc
FROM
	(
		SELECT
			COALESCE (
				TFINAL.pg_degree_name,
				'OTHERS'
			) AS pg_degree_name,
			CAST (
				100 * TFINAL.total_stu / SUM (TFINAL.total_stu) OVER () AS INTEGER
			) AS percentageOfStudent
		FROM
			(
				SELECT
					COUNT (DISTINCT student_id) AS total_stu,
					CASE
				WHEN student_profile_data.pg_degree_name IN ('', ' ') THEN
					NULL
				ELSE
					student_profile_data.pg_degree_name
				END
				FROM
					student_profile_data,
					jobs_event,
					vacancy
				WHERE
					student_profile_data.student_id = jobs_event.actor_id
				AND vacancy. ID = jobs_event.vacancy_id
				AND vacancy.recruiter_id = :recruiter_id
				GROUP BY
					student_profile_data.pg_degree_name
			) TFINAL
	) outerTable
GROUP BY
	outerTable.pg_degree_name	
		</sql>
		<title>Postgraduate Education </title>
		
	</reports>
	<reports id="228" type_of_report="table">
		<column columnHandler="NONE" display_name="Student ID" isVisible="true" name="stu_id" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Student Name" isVisible="true" name="name" edit_type="READ_ONLY"/>
		<column columnHandler="NULL_HANDLER" display_name="Score" isVisible="true" name="score" edit_type="READ_ONLY"/>
		<column columnHandler="VIEW_ASSESSMENT_REPORT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
	    
		<sql >
			SELECT DISTINCT
istar_assessment_event.eventdate,
istar_assessment_event.assessment_id as ass_id,
  lesson.title,
  student.name,
	istar_assessment_event.actor_id as stu_id,
	CASE
WHEN report.score ISNULL THEN
	'0'
ELSE
	report.score
END AS score,
     (
		'T' || istar_assessment_event.actor_id || 'A' || istar_assessment_event.assessment_id ||'D'||to_char(eventdate,'YYYYMMDDThhMIss')||'E'
	) as status

FROM
  assessment,
  lesson,
   student,
	istar_assessment_event
LEFT JOIN report ON (
	istar_assessment_event.assessment_id = report.assessment_id
	AND istar_assessment_event.actor_id = report.user_id
)
WHERE
		to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')
	 LIKE :date_time_key
 AND istar_assessment_event.batch_id = :batchID
AND istar_assessment_event.assessment_id = assessment.id
AND assessment.id = :assessmentID
AND assessment.lesson_id = lesson.id
AND student.id = istar_assessment_event.actor_id
		</sql>
		<title>Trainer Assessment report for a batch</title>
	</reports>
	
	<reports id="229" type_of_report="table">
		<column columnHandler="NONE" display_name="BatchGroup Code" isVisible="true" name="bgcode" />
		<column columnHandler="NONE" display_name="College Name" isVisible="true" name="colname" />
		<column columnHandler="NONE" display_name="BatchGroup Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Student Count" isVisible="true" name="stu_count" />
		<column columnHandler="NONE" display_name="Batch Count" isVisible="true" name="batch_count" />
		<column columnHandler="NONE" display_name="View" isVisible="true" name="status" />
		<sql >
			SELECT
	CASE
WHEN batch_group.batch_code ISNULL THEN
	'N/A'
ELSE
	batch_group.batch_code
END AS bgcode,
 batch_group. ID,
 college. NAME as colName,
 batch_group. NAME,
 (
	SELECT
		COUNT (*)
	FROM
		batch_students
	WHERE
		batch_group_id = batch_group. ID
) AS stu_count,
 (
	SELECT
		COUNT (*)
	FROM
		batch
	WHERE
		batch.batch_group_id = batch_group. ID
) AS batch_count,
 (
	'&lt;a href=''/orgadmin/batch_group/dashboard.jsp?batch_group_id=' || batch_group. ID || ''' class=''btn btn-primary btn-xs''&gt;&lt;i class=''fa fa-folder''&gt;&lt;/i&gt; View &lt;/a&gt;'
) AS status
FROM
	batch_group,
	college
WHERE
	batch_group.college_id = college. ID
ORDER BY
	college. NAME
		</sql>
		<title>All Batch Group List</title>
	</reports>
	
	<reports id="300" type_of_report="table">
		<column columnHandler="DATE" display_name="Event date" isVisible="true" name="event_date" />
		<column columnHandler="NONE" display_name="Trainer Name" isVisible="true" name="trainer_name" />
		<column columnHandler="NONE" display_name="Present count" isVisible="true" name="present" />
		<column columnHandler="NONE" display_name="Absent count" isVisible="true" name="absent" />
		<column columnHandler="VIEW_ATTENDANCE_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>

		<sql>
			SELECT
				CAST ( batch_schedule_event. ID AS VARCHAR (50) ) as id,
				batch_schedule_event.eventdate as  event_date,
				student. NAME as trainer_name,
				COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ) AS present,
				COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ) AS absent,
				('B'||batch_schedule_event.batch_id ||'A'||batch_schedule_event.id||'D'||to_char(batch_schedule_event.eventdate,'YYYYMMDDThhMIss')||'E'||student. NAME||'F') as status
			FROM
				batch_schedule_event
			LEFT JOIN attendance ON ( attendance.event_id = batch_schedule_event. ID )
			LEFT JOIN student ON ( student. ID = batch_schedule_event.actor_id )
			WHERE
				batch_schedule_event.batch_id = :batch_id
			AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND batch_schedule_event.event_name LIKE '%REAL EVENT%'
			GROUP BY
				batch_schedule_event. ID,
				batch_schedule_event.batch_id ,
				batch_schedule_event.eventdate,
				student. NAME
			ORDER BY
				batch_schedule_event.eventdate DESC
		</sql>
		<title> Attendance records of a batch</title>
	</reports>
	
		<reports id="301" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Stream" isVisible="true" name="under_graduation_specialization_name" />		
		<column columnHandler="NONE" display_name="Placed" isVisible="true" name="selected" />
		<column columnHandler="NONE" display_name="Not Placed" isVisible="true" name="non_selected" />
	<sql>
	
	SELECT
	coalesce(student_profile_data.under_graduation_specialization_name, 'OTHERS') as under_graduation_specialization_name,
	COUNT (*) FILTER (

		WHERE
			jobs_event.status = 'Offered'
	) AS selected,
	CASE when (
		(
			COUNT (*) FILTER (

				WHERE
					jobs_event.status = 'TARGETED'
			)
		) - (
			COUNT (*) FILTER (

				WHERE
					jobs_event.status = 'Offered'
			)
		)
	) &lt; 0 THEN
		0
	ELSE
		(
			COUNT (*) FILTER (

				WHERE
					jobs_event.status = 'TARGETED'
			) - (
				COUNT (*) FILTER (

					WHERE
						jobs_event.status = 'Offered'
				)
			)
		)
	END AS non_selected,
	COUNT (*) FILTER (

		WHERE
			jobs_event.status = 'TARGETED'
	) AS tttttt
FROM
	student_profile_data,
	jobs_event,
	vacancy,
	student
WHERE
	student_profile_data.student_id = jobs_event.actor_id
AND vacancy. ID = jobs_event.vacancy_id
AND student_profile_data.student_id = student.id
AND student.organization_id = :college_id
GROUP BY
	student_profile_data.under_graduation_specialization_name

		</sql>
		<title>Branch wise graph </title>
		
	</reports>
	
	<reports id="302" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Job" isVisible="true" name="vacancy_name" />		
		<column columnHandler="NONE" display_name="Targeted" isVisible="true" name="targeted" />
		<column columnHandler="NONE" display_name="Interview" isVisible="true" name="interview" />
		<column columnHandler="NONE" display_name="Offered" isVisible="true" name="offered" />
	<sql>
	
WITH student_profiles AS (
	SELECT
		*
	FROM
		student
	INNER JOIN student_profile_data ON student. ID = student_profile_data.student_id
	WHERE
		student.organization_id = :college_id
) SELECT
		vacancy.profile_title as vacancy_name,
		COUNT (*) FILTER (
		WHERE
			jobs_event.status = 'TARGETED'
	) AS targeted,
COUNT (*) FILTER (
		WHERE
			jobs_event.status = 'Offered'
	) AS offered,
COUNT (*) FILTER (
		WHERE
			jobs_event.status != 'Offered' AND jobs_event.status != 'TARGETED'
	) AS interview
FROM
	student_profiles inner join jobs_event on student_profiles.student_id = jobs_event.actor_id inner join
	vacancy on vacancy.id = jobs_event.vacancy_id
WHERE
	vacancy.status = 'PUBLISHED'
GROUP BY vacancy.id
		</sql>
		<title>Jobs Wise Students Progress</title>
		
	</reports>
	
		<reports id="303" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
	    <column columnHandler="NONE" display_name="novice" isVisible="true" name="novice" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
	SELECT
	TFINAL.course_name,
CASE  WHEN TFINAL.perc &lt; '26' THEN COALESCE(TFINAL.perc,0) ELSE 0  END as novice,
CASE  WHEN TFINAL.perc &gt; '25' AND TFINAL.perc &lt; '51' THEN COALESCE(TFINAL.perc,0) ELSE 0 END as apprentice,
CASE  WHEN TFINAL.perc &gt; '50' AND TFINAL.perc &lt; '76' THEN COALESCE(TFINAL.perc,0) ELSE 0 END as master,
CASE  WHEN TFINAL.perc &gt; '75' AND TFINAL.perc &lt; '101' THEN COALESCE(TFINAL.perc,0) ELSE 0 END as wizard

FROM

(SELECT
			TF.course_name,
			CASE TF.tot
		WHEN 0 THEN
			0
		ELSE
			TF.poi * 100 / TF.tot
		END AS perc
 FROM 
(
SELECT
	T1.course_id,
	T1.course_name,
	SUM (T1.pe) AS poi,
	SUM (T1.tp) AS tot
FROM
	(
		SELECT DISTINCT
			course. ID AS course_id,
			course.course_name AS course_name,
			assessment. ID,
			COALESCE (report.points_earned, 0) AS pe,
			COALESCE (report.total_points, 0) AS tp
		FROM
			course,
			cmsession,
			MODULE,
			lesson,
			assessment,
			report
		WHERE
			MODULE .course_id = course. ID
		AND MODULE . ID = cmsession.module_id
		AND cmsession. ID = lesson.session_id
		AND lesson. ID = assessment.lesson_id
		AND assessment. ID = report.assessment_id
		AND report.user_id = 456

	) T1
GROUP BY
	T1.course_id,
	T1.course_name
)TF
	) TFINAL
GROUP BY
	TFINAL.course_name,TFINAL.perc
		</sql>
		<title>Assessment Student Graph</title>
	</reports>
	
	<reports id="304" type_of_report="stacked-column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
		<column columnHandler="NONE" display_name="novice" isVisible="true" name="novice" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
SELECT
	TFINAL.course_name,
	COUNT (*) FILTER (WHERE TFINAL.perc &lt; '26') AS novice,
	COUNT (*) FILTER (

		WHERE
			TFINAL.perc &gt; '25'
		AND TFINAL.perc &lt; '50'
	) AS apprentice,
	COUNT (*) FILTER (

		WHERE
			TFINAL.perc &gt; '49'
		AND TFINAL.perc &lt; '75'
	) AS master,
	COUNT (*) FILTER (

		WHERE
			TFINAL.perc &gt; '74'
		AND TFINAL.perc &lt; '101'
	) AS wizard
FROM
	(
		SELECT
			TF.course_name,
			TF.user_id,
			CASE TF.tot
		WHEN 0 THEN
			0
		ELSE
			TF.poi * 100 / TF.tot
		END AS perc
		FROM
			(
				SELECT
					T1.course_id,
					T1.course_name,
					T1.user_id,
					SUM (T1.points_earned) AS poi,
					SUM (T1.total_points) AS tot
				FROM
					(
						SELECT
							course. ID AS course_id,
							course.course_name,
							assessment. ID AS assess_id,
							report.user_id,
							report.points_earned,
							report.total_points
						FROM
							batch,
							course,
							cmsession,
							MODULE,
							lesson,
							assessment,
							report
						WHERE
							batch.course_id = course. ID
						AND MODULE .course_id = course. ID
						AND MODULE . ID = cmsession.module_id
						AND cmsession. ID = lesson.session_id
						AND lesson. ID = assessment.lesson_id
						AND batch.batch_group_id = :batchg_id
						AND report.assessment_id = assessment. ID
						AND report.user_id IN (
							SELECT
								student_id
							FROM
								batch_students
							WHERE
								batch_group_id = :batchg_id
						)
					) T1
				GROUP BY
					T1.course_id,
					T1.course_name,
					T1.user_id
			) TF
	) TFINAL
GROUP BY
	TFINAL.course_name
		</sql>
		<title>Assessment Batch Graph</title>
	</reports>

<reports id="3030" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
	    <column columnHandler="NONE" display_name="novice" isVisible="true" name="novice" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
	SELECT
	TFINAL.course_name,
CASE  WHEN TFINAL.perc &lt; '26' THEN COALESCE(TFINAL.perc,0) ELSE 0  END as novice,
CASE  WHEN TFINAL.perc &gt; '25' AND TFINAL.perc &lt; '51' THEN COALESCE(TFINAL.perc,0) ELSE 0 END as apprentice,
CASE  WHEN TFINAL.perc &gt; '50' AND TFINAL.perc &lt; '76' THEN COALESCE(TFINAL.perc,0) ELSE 0 END as master,
CASE  WHEN TFINAL.perc &gt; '75' AND TFINAL.perc &lt; '101' THEN COALESCE(TFINAL.perc,0) ELSE 0 END as wizard

FROM

(SELECT
			TF.course_name,
			CASE TF.tot
		WHEN 0 THEN
			0
		ELSE
			TF.poi * 100 / TF.tot
		END AS perc
 FROM 
(
SELECT
	T1.course_id,
	T1.course_name,
	SUM (T1.pe) AS poi,
	SUM (T1.tp) AS tot
FROM
	(
		SELECT DISTINCT
			course. ID AS course_id,
			course.course_name AS course_name,
			assessment. ID,
			COALESCE (report.points_earned, 0) AS pe,
			COALESCE (report.total_points, 0) AS tp
		FROM
			course,
			cmsession,
			MODULE,
			lesson,
			assessment,
			report
		WHERE
			MODULE .course_id = course. ID
		AND MODULE . ID = cmsession.module_id
		AND cmsession. ID = lesson.session_id
		AND lesson. ID = assessment.lesson_id
		AND assessment. ID = report.assessment_id
		AND report.user_id = 456

	) T1
GROUP BY
	T1.course_id,
	T1.course_name
)TF
	) TFINAL
GROUP BY
	TFINAL.course_name,TFINAL.perc
		</sql>
		<title>Assessment Student Graph</title>
	</reports>
	
	<reports id="3040" type_of_report="stacked-column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
		<column columnHandler="NONE" display_name="novice" isVisible="true" name="novice" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
SELECT
	TFINAL.course_name,
	COUNT (*) FILTER (WHERE TFINAL.perc &lt; '26') AS novice,
	COUNT (*) FILTER (

		WHERE
			TFINAL.perc &gt; '25'
		AND TFINAL.perc &lt; '50'
	) AS apprentice,
	COUNT (*) FILTER (

		WHERE
			TFINAL.perc &gt; '49'
		AND TFINAL.perc &lt; '75'
	) AS master,
	COUNT (*) FILTER (

		WHERE
			TFINAL.perc &gt; '74'
		AND TFINAL.perc &lt; '101'
	) AS wizard
FROM
	(
		SELECT
			TF.course_name,
			TF.user_id,
			CASE TF.tot
		WHEN 0 THEN
			0
		ELSE
			TF.poi * 100 / TF.tot
		END AS perc
		FROM
			(
				SELECT
					T1.course_id,
					T1.course_name,
					T1.user_id,
					SUM (T1.points_earned) AS poi,
					SUM (T1.total_points) AS tot
				FROM
					(
						SELECT
							course. ID AS course_id,
							course.course_name,
							assessment. ID AS assess_id,
							report.user_id,
							report.points_earned,
							report.total_points
						FROM
							batch,
							course,
							cmsession,
							MODULE,
							lesson,
							assessment,
							report
						WHERE
							batch.course_id = course. ID
						AND MODULE .course_id = course. ID
						AND MODULE . ID = cmsession.module_id
						AND cmsession. ID = lesson.session_id
						AND lesson. ID = assessment.lesson_id
						AND batch.batch_group_id = :batchg_id
						AND report.assessment_id = assessment. ID
						AND report.user_id IN (
							SELECT
								student_id
							FROM
								batch_students
							WHERE
								batch_group_id = :batchg_id
						)
					) T1
				GROUP BY
					T1.course_id,
					T1.course_name,
					T1.user_id
			) TF
	) TFINAL
GROUP BY
	TFINAL.course_name
		</sql>
		<title>Assessment Batch Graph</title>
	</reports>
<reports id="108" type_of_report="table">
		<column columnHandler="NONE" display_name="ID" isVisible="true" name="id" />
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="classroom_identifier"  />
		 <column columnHandler="EDIT_CLASSROOM_HANDLER" display_name="EDIT" isVisible="true" name="edit_id" />
		  
<table_name>classroom_details</table_name>
		<sql>
		SELECT
			ID,
			classroom_identifier
		FROM
			classroom_details
		WHERE
			organization_id = :org_id
		</sql>
		<title> All classroom associated with this organization</title>
	</reports>

	<reports id="191" type_of_report="table">
		<column columnHandler="NONE" display_name="Student ID" isVisible="true" name="stu_id" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Student Name" isVisible="true" name="name" edit_type="READ_ONLY"/>
		<column columnHandler="NULL_HANDLER" display_name="Score" isVisible="true" name="points_earned" edit_type="READ_ONLY"/>
		<column columnHandler="VIEW_ASSESSMENT_REPORT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
	    
		<sql >
			SELECT DISTINCT
	T3.ass_id,
	T3.lesson_title,
	T3.eventdate,
	T3.event_id,
	T3.stu_id,
	T3. NAME AS NAME,
	T3.email,
	R.points_earned,
        (
		'T' || T3.stu_id || 'A' || T3.ass_id ||'D'||to_char(T3.eventdate,'YYYYMMDDThhMIss')||'E'
	) as status

FROM
	(
		SELECT DISTINCT
			T2.ass_id,
			T2.lesson_title,
			IAE.eventdate,
			CAST (IAE. ID AS VARCHAR(50)) AS event_id,
			T1.stu_id,
			T1. NAME,
			T1.email
		FROM
			istar_assessment_event IAE,
			(
				SELECT
					S. ID AS stu_id,
					S. NAME,
					S.email
				FROM
					batch B,
					batch_group BG,
					batch_students BS,
					student S
				WHERE
					B.batch_group_id = BG. ID
				AND BG. ID = BS.batch_group_id
				AND BS.student_id = S. ID
				AND B. ID = :batchID
			) T1,
			(
				SELECT
					assessment. ID AS ass_id,
					lesson.title AS lesson_title
				FROM
					lesson,
					cmsession,
					MODULE,
					course,
					assessment,
					batch
				WHERE
					lesson.session_id = cmsession. ID
				AND cmsession.module_id = MODULE . ID
				AND course. ID = MODULE .course_id
				AND batch.course_id = course. ID
				AND batch. ID = :batchID
				AND lesson.dtype = 'ASSESSMENT'
				AND assessment.lesson_id = lesson. ID
			) T2
		WHERE
			IAE.actor_id = T1.stu_id
		AND T2.ass_id = IAE.assessment_id
	) T3
LEFT OUTER JOIN report R ON (
	R.user_id = T3.stu_id
	AND R.assessment_id = T3.ass_id
)
WHERE
	to_char(
		T3.eventdate,
		'YYYYMMDDThhMIss'
	) LIKE :date_time_key
AND T3.ass_id = :assessmentID
		</sql>
		<title> Assessment report for a batch</title>
	</reports>

	<reports id="192" type_of_report="table">
	    <column columnHandler="DATE" display_name="Event date" isVisible="true" name="eventdate" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Assessment ID" isVisible="true" name="ass_id" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Lesson title" isVisible="true" name="lesson_title" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Number of Qns" isVisible="true" name="total" edit_type="READ_ONLY"/>
		<column columnHandler="NULL_HANDLER" display_name="Average Score" isVisible="true" name="average_score" edit_type="READ_ONLY"/>
		<column columnHandler="VIEW_ASSESSMENT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status" edit_type="READ_ONLY"/>
		<sql >
			SELECT DISTINCT  round(( SUM (R.score) * 100 / SUM (T3.total_questions) ),2)AS average_score, T3.total_questions  as total, T3.ass_id, T3.lesson_title,('B'||:batch_id||'A'||T3.ass_id||'D'||to_char(T3.eventdate,'YYYYMMDDThhMIss')||'E') as status,  T3.eventdate
			FROM	(  SELECT DISTINCT T2.total_questions, T2.ass_id, T2.lesson_title, IAE.eventdate, CAST (IAE. ID AS VARCHAR(50)) AS event_id, T1.stu_id, T1. NAME, T1.email
							FROM istar_assessment_event IAE,
								(  SELECT S. ID AS stu_id, S. NAME, S.email
									FROM 	batch B, batch_group BG, batch_students BS, student S
									WHERE B.batch_group_id = BG. ID AND BG. ID = BS.batch_group_id AND BS.student_id = S. ID AND B. ID = :batch_id
								) T1,
								(   SELECT assessment. ID AS ass_id, lesson.title AS lesson_title, 
									( SELECT COUNT (*) FROM assessment_question WHERE assessmentid = assessment. ID ) AS total_questions
									FROM lesson, cmsession, MODULE, course, assessment,  batch
									WHERE lesson.session_id = cmsession. ID AND cmsession.module_id = MODULE . ID AND course. ID = MODULE .course_id 
												AND batch.course_id = course. ID AND batch. ID = :batch_id AND lesson.dtype = 'ASSESSMENT' AND assessment.lesson_id = lesson. ID
								) T2 WHERE IAE.actor_id = T1.stu_id AND T2.ass_id = IAE.assessment_id
						) T3
			LEFT OUTER JOIN report R ON ( R.user_id = T3.stu_id AND R.assessment_id = T3.ass_id )
			GROUP BY T3.ass_id, T3.ass_id, T3.lesson_title, T3.eventdate, T3.total_questions
			ORDER BY T3.eventdate DESC
		</sql>
		<title> Assessments' summary report  associated with a batch</title>
	</reports>

	<reports id="193" type_of_report="table">
		<column columnHandler="DATE" display_name="Event Date" isVisible="true" name="eventdate" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Student Name" isVisible="true" name="student_name" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Rating" isVisible="true" name="rating" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Noise" isVisible="true" name="noise" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Attendance" isVisible="true" name="attendance" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Sick" isVisible="true" name="sick" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Content" isVisible="true" name="content" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Assignment" isVisible="true" name="assignment" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Internals" isVisible="true" name="internals" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Electricity" isVisible="true" name="electricity" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Time" isVisible="true" name="time" edit_type="READ_ONLY"/>
		<column columnHandler="BOOLEAN_COLUMN_HANDLER" display_name="Internet" isVisible="true" name="internet" edit_type="READ_ONLY"/>
		<column columnHandler="NULL_HANDLER" display_name="Comments" isVisible="true" name="comments" edit_type="READ_ONLY"/>
		<column columnHandler="TRAINER_LOGS_HANDLER" display_name="Trainer Logs" isVisible="true" name="status" edit_type="READ_ONLY"/>
		<sql >
			SELECT DISTINCT
				CAST ( trainer_feedback.event_id AS VARCHAR (50) ) as status,
				batch_schedule_event.eventdate,
				student. NAME as student_name,
				rating,
				noise,
				attendance,
				sick,
				content,
				assignment,
				internals,
				electricity,
				time,
				internet,
				comments
			FROM
				trainer_feedback,
				batch_schedule_event,
				student
			WHERE
				student. ID = batch_schedule_event.actor_id
			AND trainer_feedback.event_id = batch_schedule_event. ID
			AND trainer_feedback.batch_id = :batch_id
			ORDER BY
				batch_schedule_event.eventdate DESC;
		</sql>
		<title> Trainer feedback report associated with a batch</title>
	</reports>

	<reports id="194" type_of_report="table">
		<column columnHandler="NONE" display_name="Trainer Id" isVisible="true" name="id" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Gender" isVisible="true" name="gender" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Password" isVisible="true" name="password" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="mobile" isVisible="true" name="mobile" edit_type="READ_ONLY"/>
		<sql >
			SELECT
				s.id,
				s.email,
				s.name,
				s.gender,
				s.password,
				s.mobile
			FROM
				trainer_course tc,
				student s
			WHERE
				s. ID = tc.trainer_id
				and s.user_type = 'TRAINER'
			ORDER BY
				NAME 
		</sql>
		<title> Trainer list associated with a course</title>
	</reports>

	<reports id="195" type_of_report="table">
		<column columnHandler="NONE" display_name="Trainer Id" isVisible="true" name="id" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Gender" isVisible="true" name="gender" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Password" isVisible="true" name="password" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="mobile" isVisible="true" name="mobile" edit_type="READ_ONLY"/>
		<sql >
			SELECT
				s.id,
				s.email,
				s.name,
				s.gender,
				s.password,
				s.mobile
			FROM
				trainer_course tc,
				student s
			WHERE
				s. ID = tc.trainer_id
				and s.user_type = 'TRAINER'
				and tc.course_id=:course_id
			ORDER BY
				NAME 
		</sql>
		<title> Trainer list associated with a course</title>
	</reports>

	<reports id="196" type_of_report="table">
		<column columnHandler="NONE" display_name="Trainer Id" isVisible="true" name="id"  />
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Gender" isVisible="true" name="gender" />
		<column columnHandler="NONE" display_name="Password" isVisible="true" name="password" />
		<column columnHandler="NONE" display_name="mobile" isVisible="true" name="mobile"/>
		<column columnHandler="NONE" display_name="Mother Name" isVisible="false" name="mother_name" />
		<column columnHandler="NONE" display_name="Father Name" isVisible="false" name="father_name" />
		<column columnHandler="NONE" display_name="User Type" isVisible="false" name="user_type" />
		<column columnHandler="VIEW_TRAINER" display_name="View Profile" isVisible="true" name="iddd"/>
		<column columnHandler="EDIT_TRAINER_HANDLER" display_name="EDIT" isVisible="true" name="edit_id" />
		
		<table_name>trainer</table_name>
		<sql >
			SELECT
				id,
				email,
				name,
				gender,
				password,
				mobile, 
				id as iddd
			FROM
				student
			WHERE
				user_type = 'TRAINER'
			ORDER BY
				NAME 
		</sql>
		<title> Trainer list </title>
	</reports>
	
	<reports id="197" type_of_report="table">
	    <column columnHandler="NONE" display_name="BatchGroup Code" isVisible="true" name="bgcode" />
		<column columnHandler="NONE" display_name="BatchGroup Id" isVisible="true" name="id" />
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Student Count" isVisible="true" name="stu_count" />
		<column columnHandler="NONE" display_name="Batch Count" isVisible="true" name="batch_count" />
		<column columnHandler="NONE" display_name="View" isVisible="true" name="status" />
		<column columnHandler="EDIT_BATCHGROUP_HANDLER" display_name="EDIT" isVisible="true" name="edit_id" />
		
		<table_name>batch_group</table_name>
		<sql >
			SELECT
			CASE WHEN batch_group.batch_code ISNULL THEN 'N/A'
         ELSE batch_group.batch_code 
       END as bgcode ,
				batch_group. ID,
				batch_group. NAME,
				(
					SELECT
						COUNT (*)
					FROM
						batch_students
					WHERE
						batch_group_id = batch_group. ID
				) AS stu_count,
				(
					SELECT
						COUNT (*)
					FROM
						batch
					WHERE
						batch.batch_group_id = batch_group. ID
				) AS batch_count,
				('&lt;a href=''/orgadmin/batch_group/dashboard.jsp?batch_group_id='||batch_group. ID||''' class=''btn btn-primary btn-xs''&gt;&lt;i class=''fa fa-folder''&gt;&lt;/i&gt; View &lt;/a&gt;') as status
			FROM
				batch_group
			WHERE
				college_id = :org_id
			ORDER BY
				NAME
		</sql>
		<update_sql >
			SELECT
				batch_group.id,
				batch_group.name,
				batch_group.max_students
			FROM
				batch_group
			WHERE
				org_id = :org_id
			ORDER BY
				NAME
		</update_sql>
		<title> Batches in an organization </title>
	</reports>
	
	<reports id="198" type_of_report="table">
		<column columnHandler="NONE" display_name="Student Id" isVisible="true" name="id" />
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
		<column columnHandler="NONE" display_name="Password" isVisible="true" name="password" />
		<column columnHandler="NONE" display_name="Mobile" isVisible="true" name="mobile" />
		<column columnHandler="NONE" display_name="Gender" isVisible="true" name="gender" />
		<column columnHandler="NONE" display_name="User Type" isVisible="false" name="user_type" />
		<column columnHandler="NONE" display_name="Mother Name" isVisible="false" name="mother_name" />
		<column columnHandler="NONE" display_name="Father Name" isVisible="false" name="father_name" />
		<column columnHandler="VIEW_STUDENT" display_name="View Profile" isVisible="true" name="iddd"/>
	<column columnHandler="EDIT_TRAINER_HANDLER" display_name="EDIT" isVisible="true" name="edit_id" />
		<table_name>student</table_name>
		<sql >
			SELECT
				s.id as id,
				s.email as email,
				s.name as name,
				s.gender as gender,
				s.password as password,
				s.user_type as user_type,
				s.mobile as mobile,
				s.father_name,
				s.mother_name
			FROM
				student s
			WHERE
				organization_id = :org_id
			AND user_type = 'STUDENT'
			ORDER BY
				NAME
		</sql>
		<title> Students in an organization </title>
	</reports>
	
	<reports id="199" type_of_report="table">
		<column columnHandler="NONE" display_name="ID" isVisible="true" name="id" />
		<column columnHandler="DATE" display_name="Event date" isVisible="true" name="event_date" />
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="trainer_name" />
		<column columnHandler="NONE" display_name="Present count" isVisible="true" name="present" />
		<column columnHandler="NONE" display_name="Absent count" isVisible="true" name="absent" />
		<column columnHandler="BATCH_ATTENDANCE_HANDLER" display_name="View" isVisible="true" name="id" />

		<sql>
			SELECT
				CAST ( batch_schedule_event. ID AS VARCHAR (50) ) as id,
				batch_schedule_event.eventdate as event_date,
				student. NAME as trainer_name,
				COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ) AS present,
				COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ) AS absent
			FROM
				batch_schedule_event
			LEFT JOIN attendance ON ( attendance.event_id = batch_schedule_event. ID )
			LEFT JOIN student ON ( student. ID = batch_schedule_event.actor_id )
			WHERE
				batch_schedule_event.batch_id = :batch_id
			AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND batch_schedule_event.event_name LIKE '%REAL EVENT%'
			GROUP BY
				batch_schedule_event. ID,
				batch_schedule_event.eventdate,
				student. NAME
			ORDER BY
				batch_schedule_event.eventdate DESC
		</sql>
		<title> Attendance records of a batch</title>
	</reports>
	
	<reports id="200" type_of_report="line" dateselector="true">
		<column columnHandler="DATE" display_name="Event date" isVisible="true" name="event_date" />
		<column columnHandler="NONE" display_name="Present count" isVisible="true" name="present" />
		<column columnHandler="NONE" display_name="Absent count" isVisible="true" name="absent" />

		<sql>
			SELECT
				CAST ( batch_schedule_event. ID AS VARCHAR (50) ) as id,
				batch_schedule_event.eventdate as  event_date,
				student. NAME as trainer_name,
				COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ) AS present,
				COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ) AS absent
			FROM
				batch_schedule_event
			LEFT JOIN attendance ON ( attendance.event_id = batch_schedule_event. ID )
			LEFT JOIN student ON ( student. ID = batch_schedule_event.actor_id )
			WHERE
				batch_schedule_event.batch_id = :batch_id
			AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND batch_schedule_event.event_name LIKE '%REAL EVENT%'
			GROUP BY
				batch_schedule_event. ID,
				batch_schedule_event.eventdate,
				student. NAME
			ORDER BY
				batch_schedule_event.eventdate ASC
		</sql>
		<title> Attendance records of a batch</title>
	</reports>
	<reports id="201" type_of_report="column">
		<column columnHandler="NONE" display_name="Batch Name" isVisible="true" name="batch_name" />
		<column columnHandler="NONE" display_name="Percentage Present" isVisible="true" name="present_percent" />
		<column columnHandler="NONE" display_name="Percentage Absent" isVisible="true" name="absent_percent" />

		<sql>
			SELECT
		case when ((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) > 0
		then 	((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT')*100)/((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) )
			else 0
end 
as absent_percent,
case when ((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) > 0
		then 	((COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT')*100)/((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) )
			else 0
end 
as present_percent,
				batch.name as batch_name
			FROM
				batch_schedule_event
			LEFT JOIN attendance ON ( attendance.event_id = batch_schedule_event. ID )
			left join batch on (batch.id =batch_schedule_event.batch_id )
			WHERE
			batch_schedule_event.batch_id in (
SELECT
	distinct B.id
FROM
	batch B,
	batch_group BG
WHERE
	BG. ID = B.batch_group_id
and BG.college_id=:org_id

)
			AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND batch_schedule_event.event_name LIKE '%REAL EVENT%'
group by batch.name
			
			
		</sql>
		<title> Attendance records of all batches</title>
	</reports>
	<reports id="202" type_of_report="column">
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Avg Rating" isVisible="true" name="average_rating" />

		<sql>
			SELECT 
sum(trainer_feedback.rating) as average_rating, batch.name

FROM
	trainer_feedback, batch
	
WHERE
batch.id = trainer_feedback.batch_id
and trainer_feedback.event_id in (select distinct  batch_schedule_event.id from batch_schedule_event, batch, batch_group
where  batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
and batch_schedule_event.event_name not like '%TEST%'
AND batch_schedule_event.batch_id = batch. ID
AND batch.batch_group_id = batch_group. ID
AND batch_group.college_id = :org_id
 )
group by (batch.name)
order by batch.name



			
			
		</sql>
		<title> Feedback by Trainer Per Batch</title>
	</reports>
	<reports id="203" type_of_report="table">
		<column columnHandler="NONE" display_name="Trainer Id" isVisible="true" name="id" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Gender" isVisible="true" name="gender" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="mobile" isVisible="true" name="mobile" edit_type="READ_ONLY"/>
		<sql >
			SELECT DISTINCT
				s.id,
				s.email,
				s.name,
				s.gender,
				
				s.mobile
			FROM
				trainer_batch tc,
				student s
			WHERE
				s. ID = tc.trainer_id
				and s.user_type = 'TRAINER'
				and tc.batch_id= :batch_id
			ORDER BY
				NAME 
		</sql>
		<title> Trainer list associated with a Batch</title>
	</reports>
	<reports id="204" type_of_report="pie">
		<column columnHandler="NONE" display_name="Org Name" isVisible="true" name="org_name" />
		<column columnHandler="NONE" display_name="Percentage Present" isVisible="true" name="present_percent" />
		<column columnHandler="NONE" display_name="Percentage Absent" isVisible="true" name="absent_percent" />

		<sql>
			SELECT
		case when ((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) > 0
		then 	((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT')*100)/((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) )
			else 0
end 
as absent_percent,
case when ((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) > 0
		then 	((COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT')*100)/((COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ))+(COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ))) )
			else 0
end 
as present_percent,
				organization.name as org_name
			FROM
			batch_schedule_event
			LEFT JOIN attendance ON ( attendance.event_id = batch_schedule_event. ID )
			left join batch on (batch.id =batch_schedule_event.batch_id )
			left join batch_group on (batch_group.id = batch.batch_group_id)
			left join organization on (organization.id = batch_group.college_id)
			
			WHERE
			batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND batch_schedule_event.event_name LIKE '%REAL EVENT%'
group by organization.name
			
			
		</sql>
		<title> Attendance records of all organization</title>
	</reports>
	<reports id="205" type_of_report="table">
		<column columnHandler="NONE" display_name="ID" isVisible="true" name="id" edit_type="READ_ONLY"/>
			<column columnHandler="NONE" display_name="Event Schedule" isVisible="true" name="eventdate" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Trainer Name" isVisible="true" name="name" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="event_name" edit_type="READ_ONLY"/>
		<column columnHandler="UPDATE_ATTENDANCE_HANDLER" display_name="Update" isVisible="true" name="id" edit_type="READ_ONLY"/>
		<sql >
			SELECT distinct 
	cast (batch_schedule_event.id as varchar(50)), event_name, to_char(eventdate,'DD-MM-YYYY HH:mm:ss') as eventdate, student.name
FROM
	batch_schedule_event, student
WHERE
	batch_id = :batch_id
and student.id = batch_schedule_event.actor_id
AND event_name NOT LIKE '%TEST%'
AND TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
		</sql>
		<title> Update Attendance for a batch</title>
	</reports>
	
	<reports id="206" type_of_report="table">
	    <column columnHandler="DATE" display_name="Event date" isVisible="true" name="eventdate" />
		<column columnHandler="NONE" display_name="Assessment ID" isVisible="true" name="ass_id" />
		<column columnHandler="NONE" display_name="BatchName" isVisible="true" name="batch_name" />
		<column columnHandler="NONE" display_name="Lesson title" isVisible="true" name="lesson_title"/>
		<column columnHandler="NONE" display_name="Number of Qns" isVisible="true" name="total" />
		<column columnHandler="NONE" display_name="Number student attended" isVisible="true" name="attended" />
		<column columnHandler="NULL_HANDLER" display_name="Average Score" isVisible="true" name="average_score" />
		<column columnHandler="VIEW_ASSESSMENT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
		<sql >
				SELECT distinct 
istar_assessment_event.eventdate AS eventdate,
istar_assessment_event.assessment_id AS ass_id,
lesson.title AS lesson_title,
('B'||batch.id||'A'||istar_assessment_event.assessment_id||'D'||to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')||'E') as status,
(
SELECT
COUNT (*)
FROM
assessment_question
WHERE
assessmentid = assessment. ID
) AS total,
batch. NAME AS batch_name,
batch.id as batch_id ,
count(istar_assessment_event.actor_id) || '/' || (SELECT
count(student_id)
FROM
batch_students bs,
batch b,
batch_group bg
WHERE
b.batch_group_id = bg. ID
AND bg. ID = bs.batch_group_id
AND b. ID = batch.id  )  as attended,
ROUND( AVG(score),2 )as average_score

FROM
istar_assessment_event,
assessment,
lesson,
batch, report

WHERE
istar_assessment_event.assessment_id = assessment. ID
and report.assessment_id = istar_assessment_event.assessment_id
and report.user_id = istar_assessment_event.actor_id
AND assessment.lesson_id = lesson. ID
AND batch. ID = istar_assessment_event.batch_id
AND batch_id IN (
SELECT DISTINCT
batch. ID
FROM
BATCH,
batch_group,
college
WHERE
college. ID = batch_group.college_id
AND batch.BATCH_GROUP_ID = batch_group. ID
AND college. ID = :org_id
)
group by batch.id ,istar_assessment_event.assessment_id,batch_name,eventdate,lesson_title, total		
			ORDER BY istar_assessment_event.eventdate DESC
		</sql>
		<title> Assessments' summary report  associated with a org</title>
	</reports>
	
	<reports id="207" type_of_report="table">
	    <column columnHandler="DATE" display_name="Event date" isVisible="true" name="eventdate" />
		<column columnHandler="NONE" display_name="Assessment ID" isVisible="true" name="ass_id" />
		<column columnHandler="NONE" display_name="BatchName" isVisible="true" name="batch_name" />
		<column columnHandler="NONE" display_name="Lesson title" isVisible="true" name="lesson_title"/>
		<column columnHandler="NONE" display_name="Number of Qns" isVisible="true" name="total" />
		<column columnHandler="NONE" display_name="Number student attended" isVisible="true" name="attended" />
		<column columnHandler="NULL_HANDLER" display_name="Average Score" isVisible="true" name="average_score" />
		<column columnHandler="VIEW_ASSESSMENT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
		<sql >
				SELECT distinct 
istar_assessment_event.eventdate AS eventdate,
istar_assessment_event.assessment_id AS ass_id,
lesson.title AS lesson_title,
('B'||batch.id||'A'||istar_assessment_event.assessment_id||'D'||to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')||'E') as status,
(
SELECT
COUNT (*)
FROM
assessment_question
WHERE
assessmentid = assessment. ID
) AS total,
batch. NAME AS batch_name,
batch.id as batch_id ,
count(istar_assessment_event.actor_id) || '/' || (SELECT
count(student_id)
FROM
batch_students bs,
batch b,
batch_group bg
WHERE
b.batch_group_id = bg. ID
AND bg. ID = bs.batch_group_id
AND b. ID = batch.id  )  as attended,
ROUND( AVG(score),2 ) as average_score

FROM
istar_assessment_event,
assessment,
lesson,
batch, report

WHERE
istar_assessment_event.assessment_id = assessment. ID
and report.assessment_id = istar_assessment_event.assessment_id
and report.user_id = istar_assessment_event.actor_id
AND assessment.lesson_id = lesson. ID
AND batch. ID = istar_assessment_event.batch_id
AND batch_id IN (
SELECT DISTINCT
batch. ID
FROM
BATCH,
batch_group
WHERE
 batch.BATCH_GROUP_ID = batch_group. ID
AND batch_group. ID= :batch_group_id

)
group by batch.id ,istar_assessment_event.assessment_id,batch_name,eventdate,lesson_title, total	
			ORDER BY istar_assessment_event.eventdate DESC
		</sql>
		<title> Assessments' summary report  associated with a Batches</title>
	</reports>
	
	<reports id="208" type_of_report="table">
	    <column columnHandler="DATE" display_name="Event date" isVisible="true" name="eventdate" />
		<column columnHandler="NONE" display_name="Assessment ID" isVisible="true" name="ass_id" />
		
		<column columnHandler="NONE" display_name="Lesson title" isVisible="true" name="lesson_title"/>
		<column columnHandler="NONE" display_name="Number of Qns" isVisible="true" name="total" />
		<column columnHandler="NONE" display_name="Number student attended" isVisible="true" name="attended" />
		<column columnHandler="NULL_HANDLER" display_name="Average Score" isVisible="true" name="average_score" />
		<column columnHandler="VIEW_ASSESSMENT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
		<sql >
SELECT distinct 
istar_assessment_event.eventdate AS eventdate,
istar_assessment_event.assessment_id AS ass_id,
lesson.title AS lesson_title,
('B'||batch.id||'A'||istar_assessment_event.assessment_id||'D'||to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')||'E') as status,
(
SELECT
COUNT (*)
FROM
assessment_question
WHERE
assessmentid = assessment. ID
) AS total,
batch. NAME AS batch_name,
batch.id as batch_id ,
count(istar_assessment_event.actor_id) || '/' || (SELECT
count(student_id)
FROM
batch_students bs,
batch b,
batch_group bg
WHERE
b.batch_group_id = bg. ID
AND bg. ID = bs.batch_group_id
AND b. ID = batch.id  )  as attended,
ROUND( AVG(score),2 ) as average_score

FROM
istar_assessment_event,
assessment,
lesson,
batch, report

WHERE
istar_assessment_event.assessment_id = assessment. ID
and report.assessment_id = istar_assessment_event.assessment_id
and report.user_id = istar_assessment_event.actor_id
AND assessment.lesson_id = lesson. ID
AND batch. ID = istar_assessment_event.batch_id
AND batch_id IN (
SELECT DISTINCT
batch. ID
FROM
BATCH,
batch_group
WHERE
 batch.BATCH_GROUP_ID = batch_group. ID
AND batch.ID= :batch_id

)
group by batch.id ,istar_assessment_event.assessment_id,batch_name,eventdate,lesson_title, total	
			ORDER BY istar_assessment_event.eventdate DESC
		</sql>
		<title> Assessments' summary report  associated with a Batches</title>
	</reports>
	
	<reports id="209" type_of_report="table">
	    <column columnHandler="NONE" display_name="Batch Id" isVisible="true" name="bg_id" />
	    <column columnHandler="NONE" display_name="Program" isVisible="true" name="batch_group_name" />
	    <column columnHandler="NONE" display_name="Student ID" isVisible="true" name="id" />
	    <column columnHandler="NONE" display_name="Name" isVisible="true" name="student_name" />
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
	    <column columnHandler="NONE" display_name="User Type" isVisible="true" name="user_type" />
	    
	
		<sql >
			SELECT DISTINCT
			batch_group.id as bg_id,
		    batch_group.name as batch_group_name,
		    student.id,
			student.email,
			
			student.name as student_name,
			batch_students.user_type
			FROM
				student,
				batch_group,
				batch_students
			WHERE
				batch_group. ID = batch_students.batch_group_id
			AND batch_students.student_id = student.id
			AND batch_group.college_id= :org_id
			ORDER BY bg_id
			
		</sql>
		<title> Notification  associated with a Batches</title>
	</reports>
	
	<reports id="210" type_of_report="table">
	    <column columnHandler="NONE" display_name="Date" isVisible="true" name="date" />
	    <column columnHandler="NONE" display_name="Assessment Name" isVisible="true" name="lesson_name" />
	    <column columnHandler="NONE" display_name="Total Questions" isVisible="true" name="total_q" />
	   <column columnHandler="NULL_HANDLER" display_name="Average Score" isVisible="true" name="average_score" />
		<column columnHandler="VIEW_ASSESSMENT_REPORT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
	    
	
		<sql >
SELECT DISTINCT
	istar_assessment_event.eventdate AS DATE,
	report.score AS average_score,
	lesson.title lesson_name,
	
--	istar_assessment_event.assessment_id,
	COUNT (assessment_question) AS total_q,
	(
		'T' || actor_id || 'A' || istar_assessment_event.assessment_id ||'D'||to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')||'E'
	) AS status
FROM
	istar_assessment_event,
	report,
	assessment,
	lesson,
	assessment_question
WHERE
	istar_assessment_event.actor_id = :trainer_id
AND istar_assessment_event.assessment_id = report.assessment_id
AND istar_assessment_event.assessment_id = assessment. ID
AND assessment.lesson_id = lesson. ID
AND istar_assessment_event.assessment_id = assessment_question.assessmentid
GROUP BY
	istar_assessment_event.eventdate,
	report.score,
	lesson.title,
	istar_assessment_event.assessment_id,
istar_assessment_event.actor_id
ORDER BY
	istar_assessment_event.eventdate
			
		</sql>
		<title> </title>
	</reports>
	<reports id="211" type_of_report="table">
	<column columnHandler="NONE" display_name="Qusetion Id" isVisible="true" name="qid" />
	    <column columnHandler="NONE" display_name="Qusetion" isVisible="true" name="question" />
	     <column columnHandler="NONE" display_name="All Option" isVisible="true" name="options" />
	     <column columnHandler="NONE" display_name="Correct Option" isVisible="true" name="answer" />
	    <column columnHandler="NONE" display_name="Result" isVisible="true" name="is_correct" />
	 
		<sql>
			SELECT
	q. ID AS qid,
	q.question_text AS question,
	array_to_string(
		ARRAY_AGG (
			REPLACE (
				REPLACE (ao. TEXT, '&lt;&#47;p&gt;', ''),
				'&lt;p&gt;',
				''
			)
		),
		'&lt;br&gt;'
	) AS OPTIONS,
	array_to_string(
		ARRAY_AGG (
			CASE
			WHEN ao.marking_scheme = 1 THEN
				ao. TEXT
			ELSE
				''
			END
		),
		''
	) AS answer,
	(
		CASE
		WHEN sa.correct IS TRUE THEN
			'Correct'
		WHEN sa.correct IS FALSE THEN
			'Incorrect'
		ELSE
			'Skipped'
		END
	) AS is_correct
FROM
	assessment_question aq
INNER JOIN question q ON TRUE
LEFT JOIN student_assessment sa ON (
	q. ID = sa.question_id
	AND sa.assessment_id = aq.assessmentid
	AND sa.student_id = :trainer_id
),
 assessment_option ao
WHERE
	aq.questionid = q. ID
AND aq.assessmentid = :assessment_id
AND ao.question_id = q. ID
GROUP BY
	q. ID,
	q.question_text,
	is_correct
ORDER BY
	q. ID
		</sql>
		<title> </title>
	</reports>
	
	<reports id="212" type_of_report="table">
	    <column columnHandler="DATE" display_name="Date" isVisible="true" name="date" />
	    <column columnHandler="NONE" display_name="Assessment Name" isVisible="true" name="lesson_name" />
	    <column columnHandler="NONE" display_name="Total Questions" isVisible="true" name="total_q" />
	    <column columnHandler="NULL_HANDLER" display_name="Score" isVisible="true" name="average_score" />
		<column columnHandler="VIEW_ASSESSMENT_REPORT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
	    
	
		<sql >
SELECT DISTINCT
istar_assessment_event.actor_id,
istar_assessment_event.eventdate as date,
 istar_assessment_event.assessment_id,
lesson.title as lesson_name,
 report.score as average_score,
(
SELECT
COUNT (*) as total_q
FROM
assessment_question
WHERE
assessment_question.assessmentid = istar_assessment_event.assessment_id
),
(
		'T' || actor_id || 'A' || istar_assessment_event.assessment_id ||'D'||to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')||'E'
	) as status

FROM
istar_assessment_event,
report,
lesson, 
assessment
WHERE
istar_assessment_event.actor_id = :user_id
AND report.assessment_id = istar_assessment_event.assessment_id
AND report.user_id = istar_assessment_event.actor_id
and lesson.id = assessment.lesson_id
and assessment.id = istar_assessment_event.assessment_id
GROUP BY istar_assessment_event.eventdate,istar_assessment_event.assessment_id, lesson.title,istar_assessment_event.actor_id, report.score

			
		</sql>
		<title> </title>
	</reports>
	
	<reports id="213" type_of_report="table">
	    <column columnHandler="DATE" display_name="Date" isVisible="true" name="date" />
	    <column columnHandler="NONE" display_name="Assessment Name" isVisible="true" name="lesson_name" />
	    <column columnHandler="NONE" display_name="Total Questions" isVisible="true" name="total_q" />
	   <column columnHandler="NULL_HANDLER" display_name="Average Score" isVisible="true" name="average_score" />
		<column columnHandler="VIEW_ASSESSMENT_REPORT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
	    
	
		<sql >
SELECT DISTINCT
istar_assessment_event.actor_id,
istar_assessment_event.eventdate as date,
 istar_assessment_event.assessment_id,
lesson.title as lesson_name,
 report.score as average_score,
(
SELECT
COUNT (*) as total_q
FROM
assessment_question
WHERE
assessment_question.assessmentid = istar_assessment_event.assessment_id
),
(
		'T' || actor_id || 'A' || istar_assessment_event.assessment_id ||'D'||to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')||'E'
	)

FROM
istar_assessment_event,
report,
lesson, 
assessment
WHERE
istar_assessment_event.actor_id = :user_id
And istar_assessment_event.batch_id = :batch_id
AND report.assessment_id = istar_assessment_event.assessment_id
AND report.user_id = istar_assessment_event.actor_id
and lesson.id = assessment.lesson_id
and assessment.id = istar_assessment_event.assessment_id
GROUP BY istar_assessment_event.eventdate,istar_assessment_event.assessment_id, lesson.title,istar_assessment_event.actor_id, report.score

			
		</sql>
		<title> </title>
	</reports>
	
	<reports id="214" type_of_report="column">
		<column columnHandler="DATE" display_name="Event date" isVisible="true" name="event_date" />
		<column columnHandler="NONE" display_name="Present count" isVisible="true" name="present" />
		<column columnHandler="NONE" display_name="Absent count" isVisible="true" name="absent" />

		<sql>
			SELECT
				CAST ( batch_schedule_event. ID AS VARCHAR (50) ) as id,
				batch_schedule_event.eventdate as  event_date,
				student. NAME as trainer_name,
				COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ) AS present,
				COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ) AS absent
			FROM
				batch_schedule_event
			LEFT JOIN attendance ON ( attendance.event_id = batch_schedule_event. ID  AND attendance.user_id= :user_id )
			LEFT JOIN student ON ( student. ID = batch_schedule_event.actor_id )
			WHERE
				batch_schedule_event.batch_id = :batch_id
			AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND batch_schedule_event.event_name LIKE '%REAL EVENT%'
			GROUP BY
				batch_schedule_event. ID,
				batch_schedule_event.eventdate,
				student. NAME
			ORDER BY
				batch_schedule_event.eventdate DESC
		</sql>
		<title> Attendance records of a batch</title>
	</reports>
	
	<reports id="215" type_of_report="table">
	
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="s_name" />
		<column columnHandler="NONE" display_name="Batch" isVisible="true" name="b_name" />
		<column columnHandler="NONE" display_name="No Of Class" isVisible="true" name="no_class" />
		<column columnHandler="DURATION_HANDLER" display_name="HRS/MIN" isVisible="true" name="status" />
		
				
		<sql>
			SELECT DISTINCT
count(batch_schedule_event. ID) as no_class,
	
cast(sum((batch_schedule_event.eventhour*60 + batch_schedule_event.eventminute) )as integer) as status,

	batch.name as b_name,
     student.name as s_name
FROM
	batch_schedule_event,
	batch,
	batch_group,
  college,
  student
WHERE
	batch_schedule_event.batch_id = batch.id
AND
batch.batch_group_id = batch_group.id
AND
batch_group.college_id = college.id
AND
college.id = :org_id
AND 
student.user_type='TRAINER'
AND
batch_schedule_event.actor_id=student.id
GROUP BY b_name,s_name
		
		</sql>
		<title>trainer teaching duration </title>
	</reports>
	
	<reports id="216" type_of_report="column">
	
		<column columnHandler="NONE" display_name="College" isVisible="true" name="c_name" />
		<column columnHandler="NONE" display_name="Present" isVisible="true" name="present" />
		<column columnHandler="NONE" display_name="Absent" isVisible="true" name="absent" />
		
				
		<sql>
			SELECT DISTINCT
	college.name as c_name,
 count(*) FILTER( WHERE attendance.status='PRESENT')as present,
 count(*) FILTER( WHERE attendance.status='ABSENT')as absent,
 count(attendance.status)
FROM
	batch_schedule_event,
	attendance,
	batch,
	batch_group
LEFT JOIN college ON  (
	batch_group.college_id = college. ID
)
WHERE
	batch_schedule_event.batch_id = batch. ID
AND batch.batch_group_id = batch_group. ID
AND batch_schedule_event.id = attendance.event_id
GROUP BY c_name
		
		</sql>
		<title> </title>
	</reports>
	<reports id="217" type_of_report="table">
	
		<column columnHandler="NONE" display_name="ID" isVisible="true" name="stu_id" />
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="s_name" />
		<column columnHandler="DURATION_HANDLER" display_name="HOURS" isVisible="true" name="status" />
		
				
		<sql>

SELECT
	count(batch_schedule_event. ID) as no_class,

	sum((batch_schedule_event.eventhour*60 + batch_schedule_event.eventminute) )as status,
	student.name as s_name, 
	student.id as stu_id 
FROM
	batch_schedule_event,
  student
WHERE
batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
AND
batch_schedule_event.event_name LIKE '%REAL EVENT%'
AND
batch_schedule_event.actor_id = student.id

and student.user_type='TRAINER'
GROUP BY student.name, student.id 

		
		</sql>
		<title> </title>
	</reports>
	
	
	<reports id="218" type_of_report="table">
	
	    <column columnHandler="DATE" display_name="Date" isVisible="true" name="date" />
		<column columnHandler="NONE" display_name="No Class" isVisible="true" name="no_class" />
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="s_name" />
		<column columnHandler="NONE" display_name="Events" isVisible="true" name="class" />
		<column columnHandler="DURATION_HANDLER" display_name="HOURS" isVisible="true" name="status" />
		
				
		<sql>

SELECT
	count(batch_schedule_event. ID) as no_class,
	batch_schedule_event.eventdate as date,
	SUBSTRING(batch_schedule_event.event_name,22) as class,
	sum((batch_schedule_event.eventhour*60 + batch_schedule_event.eventminute) )as status,
	student.name as s_name, student.id as stu_id
FROM
	batch_schedule_event,
  student
WHERE
batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
AND
batch_schedule_event.event_name LIKE '%REAL EVENT%'
AND
batch_schedule_event.actor_id = student.id

and student.user_type='TRAINER'
GROUP BY student.name, student.id, eventdate,batch_schedule_event.event_name
order by batch_schedule_event.eventdate desc

		
		</sql>
		<title> </title>
		
	</reports>
	<reports id="219" type_of_report="table">
	
	    <column columnHandler="DATE" display_name="Date" isVisible="true" name="date" />
		
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="s_name" />
		<column columnHandler="NONE" display_name="Class" isVisible="true" name="class" />
		<column columnHandler="DURATION_HANDLER" display_name="HOURS" isVisible="true" name="status" />
		
				
		<sql>
SELECT
	batch_schedule_event.eventdate as date,
	
	
	SUBSTRING(batch_schedule_event.event_name,22) as class,
	sum((batch_schedule_event.eventhour*60 + batch_schedule_event.eventminute) )as status,
	student.name as s_name, student.id as stu_id
FROM
	batch_schedule_event,
  student
WHERE
batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
AND
batch_schedule_event.event_name LIKE '%REAL EVENT%'
AND
batch_schedule_event.actor_id = student.id
AND
cast (batch_schedule_event.eventdate as date) &gt;=   cast (:start_date as date)
AND
cast (batch_schedule_event.eventdate as date) &lt;=   cast (:end_date as date)
and student.user_type='TRAINER'
and student.id = :trainer_id
GROUP BY student.name, student.id, eventdate,batch_schedule_event.event_name
order by batch_schedule_event.eventdate DESC
		
		</sql>
		<title> </title>
		
	</reports>
	
	<reports id="220" type_of_report="table">
	
	    <column columnHandler="DATE" display_name="Date" isVisible="true" name="date" />
		
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="s_name" />
		<column columnHandler="NONE" display_name="Class" isVisible="true" name="class" />
		<column columnHandler="DURATION_HANDLER" display_name="HOURS" isVisible="true" name="status" />
		
				
		<sql>
SELECT
	batch_schedule_event.eventdate as date,
	
	
	SUBSTRING(batch_schedule_event.event_name,22) as class,
	sum((batch_schedule_event.eventhour*60 + batch_schedule_event.eventminute) )as status,
	student.name as s_name, student.id as stu_id
FROM
	batch_schedule_event,
  student
WHERE
batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
AND
batch_schedule_event.event_name LIKE '%REAL EVENT%'
AND
batch_schedule_event.actor_id = student.id

and student.user_type='TRAINER'
and student.id = :user_id
GROUP BY student.name, student.id, eventdate,batch_schedule_event.event_name
order by batch_schedule_event.eventdate DESC
		
		</sql>
		<title> </title>
		
	</reports>
	<reports id="221" type_of_report="area">
	
	   		
		<column columnHandler="NONE" display_name="question_id" isVisible="true" name="question_id" />
		 <column columnHandler="NONE" display_name="student_id" isVisible="true" name="student_id" />
		<column columnHandler="NONE" display_name="assessment_id" isVisible="true" name="assessment_id" />
		
				
		<sql>
select student_id, question_id, assessment_id from student_assessment where student_id in (18,3242,1275,1245)
		
		</sql>
		<title> </title>
		
	</reports>
	<reports id="222" type_of_report="pie">	
	    <column columnHandler="NONE" display_name="city" isVisible="true" name="city" />		
		<column columnHandler="NONE" display_name="stu_count" isVisible="true" name="perc" />
	<sql>
SELECT
	TFINAL.city,
	cast (100 * TFINAL.stu_count / SUM (TFINAL.stu_count) OVER () as integer ) AS perc 
FROM
	(
		SELECT DISTINCT
			pincode.city,
			COUNT (
				DISTINCT student_profile_data.student_id
			) AS stu_count
		FROM
			pincode,
			student_profile_data,
			jobs_event,
			vacancy
		WHERE
			student_profile_data.pincode = pincode.pin
		AND student_profile_data.student_id = jobs_event.actor_id
		AND jobs_event.vacancy_id = vacancy. ID
		AND vacancy.recruiter_id = :recruiter_id
		GROUP BY
			pincode.city
	) TFINAL
		
		</sql>
		<title>Where From </title>
		
	</reports>
		<reports id="223" type_of_report="pie">	
	    <column columnHandler="NONE" display_name="city" isVisible="true" name="under_graduate_degree_name" />		
		<column columnHandler="NONE" display_name="stu_count" isVisible="true" name="perc" />
	<sql>
SELECT
	outerTable.under_graduate_degree_name,
	SUM (percentageOfStudent) AS perc
FROM
	(
		SELECT
			COALESCE (
				TFINAL.under_graduate_degree_name,
				'OTHERS'
			) AS under_graduate_degree_name,
			CAST (
				100 * TFINAL.total_stu / SUM (TFINAL.total_stu) OVER () AS INTEGER
			) AS percentageOfStudent
		FROM
			(
				SELECT
					COUNT (DISTINCT student_id) AS total_stu,
					CASE
				WHEN student_profile_data.under_graduate_degree_name IN ('', ' ') THEN
					NULL
				ELSE
					student_profile_data.under_graduate_degree_name
				END
				FROM
					student_profile_data,
					jobs_event,
					vacancy
				WHERE
					student_profile_data.student_id = jobs_event.actor_id
				AND vacancy. ID = jobs_event.vacancy_id
				AND vacancy.recruiter_id =:recruiter_id
				GROUP BY
					student_profile_data.under_graduate_degree_name
			) TFINAL
	) outerTable
GROUP BY
outerTable.under_graduate_degree_name	
		</sql>
		<title>UnderGraduate Education </title>
		
	</reports>
	<reports id="224" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Stream" isVisible="true" name="under_graduation_specialization_name" />		
		<column columnHandler="NONE" display_name="Placed" isVisible="true" name="selected" />
		<column columnHandler="NONE" display_name="Not Placed" isVisible="true" name="non_selected" />
	<sql>
	
	SELECT
	coalesce(student_profile_data.under_graduation_specialization_name, 'OTHERS') as under_graduation_specialization_name,
	COUNT (*) FILTER (

		WHERE
			jobs_event.status = 'Offered'
	) AS selected,
	CASE when (
		(
			COUNT (*) FILTER (

				WHERE
					jobs_event.status = 'TARGETED'
			)
		) - (
			COUNT (*) FILTER (

				WHERE
					jobs_event.status = 'Offered'
			)
		)
	) &lt; 0 THEN
		0
	ELSE
		(
			COUNT (*) FILTER (

				WHERE
					jobs_event.status = 'TARGETED'
			) - (
				COUNT (*) FILTER (

					WHERE
						jobs_event.status = 'Offered'
				)
			)
		)
	END AS non_selected,
	COUNT (*) FILTER (

		WHERE
			jobs_event.status = 'TARGETED'
	) AS tttttt
FROM
	student_profile_data,
	jobs_event,
	vacancy
WHERE
	student_profile_data.student_id = jobs_event.actor_id
AND vacancy. ID = jobs_event.vacancy_id
AND vacancy.recruiter_id = :recruiter_id
GROUP BY
	student_profile_data.under_graduation_specialization_name

		</sql>
		<title>Stream wise graph </title>
		
	</reports>
	<reports id="225" type_of_report="column">	
	    <column columnHandler="NONE" display_name="stream" isVisible="true" name="stream" />		
		<column columnHandler="NONE" display_name="Country Avg." isVisible="true" name="country_avg" />
		<column columnHandler="NONE" display_name="City Avg." isVisible="true" name="city_avg" />
		<column columnHandler="NONE" display_name="Selection Rate" isVisible="true" name="selection_rate" />
	<sql>
select 'computer' as stream , 25 as country_avg , 25 as city_avg , 25 as selection_rate  
union
select 'electrical' as stream , 10 as country_avg, 25 as city_avg , 25 as selection_rate 
union 
select 'mechanical' as stream , 15 as country_avg , 25 as city_avg , 25 as selection_rate 
union
select 'mechanical' as stream , 50 as country_avg  , 25 as city_avg , 25 as selection_rate 
		
		</sql>
		<title>Selection rules </title>
		
	</reports>
	<reports id="226" type_of_report="pie">	
	    <column columnHandler="NONE" display_name="Industry" isVisible="true" name="industry" />		
		<column columnHandler="NONE" display_name="Percentage" isVisible="true" name="perce" />
	<sql>
	SELECT
	industry,
	industryCount * 100 / SUM (industryCount) OVER () AS perce
FROM
	(
		SELECT
			COUNT (*) AS industryCount,
			industry
		FROM
			(
				SELECT DISTINCT
					company.industry,
					vacancy.profile_title
				FROM
					company
				INNER JOIN vacancy ON vacancy.company_id = company. ID
				INNER JOIN jobs_event ON vacancy. ID = jobs_event.vacancy_id
				INNER JOIN student ON jobs_event.actor_id = student. ID
				WHERE
					student.organization_id =:collegeId
			) AS tempTable
		GROUP BY
			industry
	) AS outerTable
GROUP BY
	industry,
	industryCount
		</sql>
		<title>Recruiter types </title>
		
	</reports>
	<reports id="227" type_of_report="pie">	
	    <column columnHandler="NONE" display_name="city" isVisible="true" name="pg_degree_name" />		
		<column columnHandler="NONE" display_name="stu_count" isVisible="true" name="perc" />
	<sql>
SELECT
	outerTable.pg_degree_name,
	SUM (percentageOfStudent) as perc
FROM
	(
		SELECT
			COALESCE (
				TFINAL.pg_degree_name,
				'OTHERS'
			) AS pg_degree_name,
			CAST (
				100 * TFINAL.total_stu / SUM (TFINAL.total_stu) OVER () AS INTEGER
			) AS percentageOfStudent
		FROM
			(
				SELECT
					COUNT (DISTINCT student_id) AS total_stu,
					CASE
				WHEN student_profile_data.pg_degree_name IN ('', ' ') THEN
					NULL
				ELSE
					student_profile_data.pg_degree_name
				END
				FROM
					student_profile_data,
					jobs_event,
					vacancy
				WHERE
					student_profile_data.student_id = jobs_event.actor_id
				AND vacancy. ID = jobs_event.vacancy_id
				AND vacancy.recruiter_id = :recruiter_id
				GROUP BY
					student_profile_data.pg_degree_name
			) TFINAL
	) outerTable
GROUP BY
	outerTable.pg_degree_name	
		</sql>
		<title>Postgraduate Education </title>
		
	</reports>
	<reports id="228" type_of_report="table">
		<column columnHandler="NONE" display_name="Student ID" isVisible="true" name="stu_id" edit_type="READ_ONLY"/>
		<column columnHandler="NONE" display_name="Student Name" isVisible="true" name="name" edit_type="READ_ONLY"/>
		<column columnHandler="NULL_HANDLER" display_name="Score" isVisible="true" name="score" edit_type="READ_ONLY"/>
		<column columnHandler="VIEW_ASSESSMENT_REPORT_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>
	    
		<sql >
			SELECT DISTINCT
istar_assessment_event.eventdate,
istar_assessment_event.assessment_id as ass_id,
  lesson.title,
  student.name,
	istar_assessment_event.actor_id as stu_id,
	CASE
WHEN report.score ISNULL THEN
	'0'
ELSE
	report.score
END AS score,
     (
		'T' || istar_assessment_event.actor_id || 'A' || istar_assessment_event.assessment_id ||'D'||to_char(eventdate,'YYYYMMDDThhMIss')||'E'
	) as status

FROM
  assessment,
  lesson,
   student,
	istar_assessment_event
LEFT JOIN report ON (
	istar_assessment_event.assessment_id = report.assessment_id
	AND istar_assessment_event.actor_id = report.user_id
)
WHERE
		to_char(istar_assessment_event.eventdate,'YYYYMMDDThhMIss')
	 LIKE :date_time_key
 AND istar_assessment_event.batch_id = :batchID
AND istar_assessment_event.assessment_id = assessment.id
AND assessment.id = :assessmentID
AND assessment.lesson_id = lesson.id
AND student.id = istar_assessment_event.actor_id
		</sql>
		<title>Trainer Assessment report for a batch</title>
	</reports>
	
	<reports id="229" type_of_report="table">
		<column columnHandler="NONE" display_name="BatchGroup Code" isVisible="true" name="bgcode" />
		<column columnHandler="NONE" display_name="College Name" isVisible="true" name="colname" />
		<column columnHandler="NONE" display_name="BatchGroup Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Student Count" isVisible="true" name="stu_count" />
		<column columnHandler="NONE" display_name="Batch Count" isVisible="true" name="batch_count" />
		<column columnHandler="NONE" display_name="View" isVisible="true" name="status" />
		<sql >
			SELECT
	CASE
WHEN batch_group.batch_code ISNULL THEN
	'N/A'
ELSE
	batch_group.batch_code
END AS bgcode,
 batch_group. ID,
 college. NAME as colName,
 batch_group. NAME,
 (
	SELECT
		COUNT (*)
	FROM
		batch_students
	WHERE
		batch_group_id = batch_group. ID
) AS stu_count,
 (
	SELECT
		COUNT (*)
	FROM
		batch
	WHERE
		batch.batch_group_id = batch_group. ID
) AS batch_count,
 (
	'&lt;a href=''/orgadmin/batch_group/dashboard.jsp?batch_group_id=' || batch_group. ID || ''' class=''btn btn-primary btn-xs''&gt;&lt;i class=''fa fa-folder''&gt;&lt;/i&gt; View &lt;/a&gt;'
) AS status
FROM
	batch_group,
	college
WHERE
	batch_group.college_id = college. ID
ORDER BY
	college. NAME
		</sql>
		<title>All Batch Group List</title>
	</reports>
	
	<reports id="300" type_of_report="table">
		<column columnHandler="DATE" display_name="Event date" isVisible="true" name="event_date" />
		<column columnHandler="NONE" display_name="Trainer Name" isVisible="true" name="trainer_name" />
		<column columnHandler="NONE" display_name="Present count" isVisible="true" name="present" />
		<column columnHandler="NONE" display_name="Absent count" isVisible="true" name="absent" />
		<column columnHandler="VIEW_ATTENDANCE_DETAILS_HANDLER" display_name="Action" isVisible="true" name="status"/>

		<sql>
			SELECT
				CAST ( batch_schedule_event. ID AS VARCHAR (50) ) as id,
				batch_schedule_event.eventdate as  event_date,
				student. NAME as trainer_name,
				COUNT (*) FILTER ( WHERE attendance.status = 'PRESENT' ) AS present,
				COUNT (*) FILTER ( WHERE attendance.status = 'ABSENT' ) AS absent,
				('B'||batch_schedule_event.batch_id ||'A'||batch_schedule_event.id||'D'||to_char(batch_schedule_event.eventdate,'YYYYMMDDThhMIss')||'E'||student. NAME||'F') as status
			FROM
				batch_schedule_event
			LEFT JOIN attendance ON ( attendance.event_id = batch_schedule_event. ID )
			LEFT JOIN student ON ( student. ID = batch_schedule_event.actor_id )
			WHERE
				batch_schedule_event.batch_id = :batch_id
			AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND batch_schedule_event.event_name LIKE '%REAL EVENT%'
			GROUP BY
				batch_schedule_event. ID,
				batch_schedule_event.batch_id ,
				batch_schedule_event.eventdate,
				student. NAME
			ORDER BY
				batch_schedule_event.eventdate DESC
		</sql>
		<title> Attendance records of a batch</title>
	</reports>
	
		<reports id="301" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Stream" isVisible="true" name="under_graduation_specialization_name" />		
		<column columnHandler="NONE" display_name="Placed" isVisible="true" name="selected" />
		<column columnHandler="NONE" display_name="Not Placed" isVisible="true" name="non_selected" />
	<sql>
	
	SELECT
	coalesce(student_profile_data.under_graduation_specialization_name, 'OTHERS') as under_graduation_specialization_name,
	COUNT (*) FILTER (

		WHERE
			jobs_event.status = 'Offered'
	) AS selected,
	CASE when (
		(
			COUNT (*) FILTER (

				WHERE
					jobs_event.status = 'TARGETED'
			)
		) - (
			COUNT (*) FILTER (

				WHERE
					jobs_event.status = 'Offered'
			)
		)
	) &lt; 0 THEN
		0
	ELSE
		(
			COUNT (*) FILTER (

				WHERE
					jobs_event.status = 'TARGETED'
			) - (
				COUNT (*) FILTER (

					WHERE
						jobs_event.status = 'Offered'
				)
			)
		)
	END AS non_selected,
	COUNT (*) FILTER (

		WHERE
			jobs_event.status = 'TARGETED'
	) AS tttttt
FROM
	student_profile_data,
	jobs_event,
	vacancy,
	student
WHERE
	student_profile_data.student_id = jobs_event.actor_id
AND vacancy. ID = jobs_event.vacancy_id
AND student_profile_data.student_id = student.id
AND student.organization_id = :college_id
GROUP BY
	student_profile_data.under_graduation_specialization_name

		</sql>
		<title>Branch wise graph </title>
		
	</reports>
	
	<reports id="302" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Job" isVisible="true" name="vacancy_name" />		
		<column columnHandler="NONE" display_name="Targeted" isVisible="true" name="targeted" />
		<column columnHandler="NONE" display_name="Interview" isVisible="true" name="interview" />
		<column columnHandler="NONE" display_name="Offered" isVisible="true" name="offered" />
	<sql>
	
WITH student_profiles AS (
	SELECT
		*
	FROM
		student
	INNER JOIN student_profile_data ON student. ID = student_profile_data.student_id
	WHERE
		student.organization_id = :college_id
) SELECT
		vacancy.profile_title as vacancy_name,
		COUNT (*) FILTER (
		WHERE
			jobs_event.status = 'TARGETED'
	) AS targeted,
COUNT (*) FILTER (
		WHERE
			jobs_event.status = 'Offered'
	) AS offered,
COUNT (*) FILTER (
		WHERE
			jobs_event.status != 'Offered' AND jobs_event.status != 'TARGETED'
	) AS interview
FROM
	student_profiles inner join jobs_event on student_profiles.student_id = jobs_event.actor_id inner join
	vacancy on vacancy.id = jobs_event.vacancy_id
WHERE
	vacancy.status = 'PUBLISHED'
GROUP BY vacancy.id
		</sql>
		<title>Jobs Wise Students Progress</title>
		
	</reports>
	
		<reports id="303" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
	    <column columnHandler="NONE" display_name="novice" isVisible="true" name="novice" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
	SELECT
	TFINAL.course_name,
CASE  WHEN TFINAL.perc &lt; '26' THEN COALESCE(TFINAL.perc,0) ELSE 0  END as novice,
CASE  WHEN TFINAL.perc &gt; '25' AND TFINAL.perc &lt; '51' THEN COALESCE(TFINAL.perc,0) ELSE 0 END as apprentice,
CASE  WHEN TFINAL.perc &gt; '50' AND TFINAL.perc &lt; '76' THEN COALESCE(TFINAL.perc,0) ELSE 0 END as master,
CASE  WHEN TFINAL.perc &gt; '75' AND TFINAL.perc &lt; '101' THEN COALESCE(TFINAL.perc,0) ELSE 0 END as wizard

FROM

(SELECT
			TF.course_name,
			CASE TF.tot
		WHEN 0 THEN
			0
		ELSE
			TF.poi * 100 / TF.tot
		END AS perc
 FROM 
(
SELECT
	T1.course_id,
	T1.course_name,
	SUM (T1.pe) AS poi,
	SUM (T1.tp) AS tot
FROM
	(
		SELECT DISTINCT
			course. ID AS course_id,
			course.course_name AS course_name,
			assessment. ID,
			COALESCE (report.points_earned, 0) AS pe,
			COALESCE (report.total_points, 0) AS tp
		FROM
			course,
			cmsession,
			MODULE,
			lesson,
			assessment,
			report
		WHERE
			MODULE .course_id = course. ID
		AND MODULE . ID = cmsession.module_id
		AND cmsession. ID = lesson.session_id
		AND lesson. ID = assessment.lesson_id
		AND assessment. ID = report.assessment_id
		AND report.user_id = 456

	) T1
GROUP BY
	T1.course_id,
	T1.course_name
)TF
	) TFINAL
GROUP BY
	TFINAL.course_name,TFINAL.perc
		</sql>
		<title>Assessment Student Graph</title>
	</reports>
	
	<reports id="304" type_of_report="stacked-column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
		<column columnHandler="NONE" display_name="novice" isVisible="true" name="novice" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
SELECT
	TFINAL.course_name,
	COUNT (*) FILTER (WHERE TFINAL.perc &lt; '26') AS novice,
	COUNT (*) FILTER (

		WHERE
			TFINAL.perc &gt; '25'
		AND TFINAL.perc &lt; '50'
	) AS apprentice,
	COUNT (*) FILTER (

		WHERE
			TFINAL.perc &gt; '49'
		AND TFINAL.perc &lt; '75'
	) AS master,
	COUNT (*) FILTER (

		WHERE
			TFINAL.perc &gt; '74'
		AND TFINAL.perc &lt; '101'
	) AS wizard
FROM
	(
		SELECT
			TF.course_name,
			TF.user_id,
			CASE TF.tot
		WHEN 0 THEN
			0
		ELSE
			TF.poi * 100 / TF.tot
		END AS perc
		FROM
			(
				SELECT
					T1.course_id,
					T1.course_name,
					T1.user_id,
					SUM (T1.points_earned) AS poi,
					SUM (T1.total_points) AS tot
				FROM
					(
						SELECT
							course. ID AS course_id,
							course.course_name,
							assessment. ID AS assess_id,
							report.user_id,
							report.points_earned,
							report.total_points
						FROM
							batch,
							course,
							cmsession,
							MODULE,
							lesson,
							assessment,
							report
						WHERE
							batch.course_id = course. ID
						AND MODULE .course_id = course. ID
						AND MODULE . ID = cmsession.module_id
						AND cmsession. ID = lesson.session_id
						AND lesson. ID = assessment.lesson_id
						AND batch.batch_group_id = :batchg_id
						AND report.assessment_id = assessment. ID
						AND report.user_id IN (
							SELECT
								student_id
							FROM
								batch_students
							WHERE
								batch_group_id = :batchg_id
						)
					) T1
				GROUP BY
					T1.course_id,
					T1.course_name,
					T1.user_id
			) TF
	) TFINAL
GROUP BY
	TFINAL.course_name
		</sql>
		<title>Assessment Batch Graph</title>
	</reports>

<reports id="3030" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
	    <column columnHandler="NONE" display_name="novice" isVisible="true" name="novice" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
	SELECT
	TFINAL.course_name,
CASE  WHEN TFINAL.perc &lt; '26' THEN COALESCE(TFINAL.perc,0) ELSE 0  END as novice,
CASE  WHEN TFINAL.perc &gt; '25' AND TFINAL.perc &lt; '51' THEN COALESCE(TFINAL.perc,0) ELSE 0 END as apprentice,
CASE  WHEN TFINAL.perc &gt; '50' AND TFINAL.perc &lt; '76' THEN COALESCE(TFINAL.perc,0) ELSE 0 END as master,
CASE  WHEN TFINAL.perc &gt; '75' AND TFINAL.perc &lt; '101' THEN COALESCE(TFINAL.perc,0) ELSE 0 END as wizard

FROM

(SELECT
			TF.course_name,
			CASE TF.tot
		WHEN 0 THEN
			0
		ELSE
			TF.poi * 100 / TF.tot
		END AS perc
 FROM 
(
SELECT
	T1.course_id,
	T1.course_name,
	SUM (T1.pe) AS poi,
	SUM (T1.tp) AS tot
FROM
	(
		SELECT DISTINCT
			course. ID AS course_id,
			course.course_name AS course_name,
			assessment. ID,
			COALESCE (report.points_earned, 0) AS pe,
			COALESCE (report.total_points, 0) AS tp
		FROM
			course,
			cmsession,
			MODULE,
			lesson,
			assessment,
			report
		WHERE
			MODULE .course_id = course. ID
		AND MODULE . ID = cmsession.module_id
		AND cmsession. ID = lesson.session_id
		AND lesson. ID = assessment.lesson_id
		AND assessment. ID = report.assessment_id
		AND report.user_id = 456

	) T1
GROUP BY
	T1.course_id,
	T1.course_name
)TF
	) TFINAL
GROUP BY
	TFINAL.course_name,TFINAL.perc
		</sql>
		<title>Assessment Student Graph</title>
	</reports>
	
	<reports id="3040" type_of_report="stacked-column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
		<column columnHandler="NONE" display_name="novice" isVisible="true" name="novice" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
SELECT
	TFINAL.course_name,
	COUNT (*) FILTER (WHERE TFINAL.perc &lt; '26') AS novice,
	COUNT (*) FILTER (

		WHERE
			TFINAL.perc &gt; '25'
		AND TFINAL.perc &lt; '50'
	) AS apprentice,
	COUNT (*) FILTER (

		WHERE
			TFINAL.perc &gt; '49'
		AND TFINAL.perc &lt; '75'
	) AS master,
	COUNT (*) FILTER (

		WHERE
			TFINAL.perc &gt; '74'
		AND TFINAL.perc &lt; '101'
	) AS wizard
FROM
	(
		SELECT
			TF.course_name,
			TF.user_id,
			CASE TF.tot
		WHEN 0 THEN
			0
		ELSE
			TF.poi * 100 / TF.tot
		END AS perc
		FROM
			(
				SELECT
					T1.course_id,
					T1.course_name,
					T1.user_id,
					SUM (T1.points_earned) AS poi,
					SUM (T1.total_points) AS tot
				FROM
					(
						SELECT
							course. ID AS course_id,
							course.course_name,
							assessment. ID AS assess_id,
							report.user_id,
							report.points_earned,
							report.total_points
						FROM
							batch,
							course,
							cmsession,
							MODULE,
							lesson,
							assessment,
							report
						WHERE
							batch.course_id = course. ID
						AND MODULE .course_id = course. ID
						AND MODULE . ID = cmsession.module_id
						AND cmsession. ID = lesson.session_id
						AND lesson. ID = assessment.lesson_id
						AND batch.batch_group_id = :batchg_id
						AND report.assessment_id = assessment. ID
						AND report.user_id IN (
							SELECT
								student_id
							FROM
								batch_students
							WHERE
								batch_group_id = :batchg_id
						)
					) T1
				GROUP BY
					T1.course_id,
					T1.course_name,
					T1.user_id
			) TF
	) TFINAL
GROUP BY
	TFINAL.course_name
		</sql>
		<title>Assessment Batch Graph</title>
		</reports>
</istar_reports>