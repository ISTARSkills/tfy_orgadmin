<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<istar_reports>
<reports id="3040" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Section Name" isVisible="true" name="name" />		
		<column columnHandler="NONE" display_name="rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
select batch_group.name, ACTUALFINAL.master , ACTUALFINAL.rookie , ACTUALFINAL.apprentice ,ACTUALFINAL.wizard   from  (select batch_group_id, cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (rookie_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as rookie,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (apprentice_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as apprentice,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (master_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as master,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (wizard_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as wizard
from 
(
select batch_group_id, cast (count(*)filter(where percentage &gt;=(select cast (property_value as integer ) from constant_properties where property_name ='rookie_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='rookie_max')) as integer) rookie_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='apprentice_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='apprentice_max')) as integer) apprentice_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='master_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='master_max')) as integer) as master_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='wizard_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='wizard_max'))as integer) as wizard_count
from 
(
select batch_group_id, istar_user, (case when max_points = 0 then 0 else  (points_scored*100)/max_points end ) as percentage 
from (select batch_group_id, istar_user, sum(points) as points_scored , sum(max_points) as max_points from (WITH summary AS (
    SELECT 
	  custom_eval ( CAST ( REPLACE ( REPLACE ( REPLACE ( COALESCE (P .points, '0'), ':per_lesson_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_lesson_points') ), ':per_assessment_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_assessment_points') ), ':per_question_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_question_points') ) AS TEXT ) ) AS points,
    custom_eval ( CAST ( REPLACE ( REPLACE ( REPLACE ( COALESCE (P .max_points, '0'), ':per_lesson_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_lesson_points') ), ':per_assessment_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_assessment_points') ), ':per_question_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_question_points') ) AS TEXT ) ) AS max_points,
		p.istar_user, p.skill_objective, p.item_id, p.item_type,P.batch_group_id,
    ROW_NUMBER() OVER(PARTITION BY p.istar_user, p.skill_objective, p.item_id, p.item_type ,P.batch_group_id
                                 ORDER BY p.created_at DESC) AS rk
      FROM user_gamification p
			where p.course_id = :course_id and p.org_id = :college_id
)
SELECT s.*
  FROM summary s
 WHERE s.rk = 1
)TT
group by batch_group_id, istar_user
)TF
)TCOUNT
group by batch_group_id
)TFINAL
) ACTUALFINAL join batch_group on (ACTUALFINAL.batch_group_id= batch_group.id)

</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Section Wise Performance of Students</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3041" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
		<column columnHandler="NONE" display_name="rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>

SELECT
	course. course_name ,
	ACTUALFINAL.master,
	ACTUALFINAL.rookie,
	ACTUALFINAL.apprentice,
	ACTUALFINAL.wizard
FROM
	(
		SELECT
			course_id,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							rookie_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS rookie,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							apprentice_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS apprentice,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							master_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS master,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							wizard_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS wizard
		FROM
			(
				SELECT
					course_id,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt;= (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'rookie_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'rookie_max'
							)
						) AS INTEGER
					) rookie_count,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt; (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'apprentice_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'apprentice_max'
							)
						) AS INTEGER
					) apprentice_count,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt; (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'master_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'master_max'
							)
						) AS INTEGER
					) AS master_count,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt; (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'wizard_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'wizard_max'
							)
						) AS INTEGER
					) AS wizard_count
				FROM
					(
						SELECT
							course_id,
							istar_user,
							(
								CASE
								WHEN max_points = 0 THEN
									0
								ELSE
									(points_scored * 100) / max_points
								END
							) AS percentage
						FROM
							(
								SELECT
									course_id,
									istar_user,
									SUM (points) AS points_scored,
									SUM (max_points) AS max_points
								FROM
									(
										WITH summary AS (
											SELECT
												custom_eval (
													CAST (
														REPLACE (
															REPLACE (
																REPLACE (
																	COALESCE (P .points, '0'),
																	':per_lesson_points',
																	(
																		SELECT
																			CAST (property_value AS VARCHAR)
																		FROM
																			constant_properties
																		WHERE
																			property_name = 'per_lesson_points'
																	)
																),
																':per_assessment_points',
																(
																	SELECT
																		CAST (property_value AS VARCHAR)
																	FROM
																		constant_properties
																	WHERE
																		property_name = 'per_assessment_points'
																)
															),
															':per_question_points',
															(
																SELECT
																	CAST (property_value AS VARCHAR)
																FROM
																	constant_properties
																WHERE
																	property_name = 'per_question_points'
															)
														) AS TEXT
													)
												) AS points,
												custom_eval (
													CAST (
														REPLACE (
															REPLACE (
																REPLACE (
																	COALESCE (P .max_points, '0'),
																	':per_lesson_points',
																	(
																		SELECT
																			CAST (property_value AS VARCHAR)
																		FROM
																			constant_properties
																		WHERE
																			property_name = 'per_lesson_points'
																	)
																),
																':per_assessment_points',
																(
																	SELECT
																		CAST (property_value AS VARCHAR)
																	FROM
																		constant_properties
																	WHERE
																		property_name = 'per_assessment_points'
																)
															),
															':per_question_points',
															(
																SELECT
																	CAST (property_value AS VARCHAR)
																FROM
																	constant_properties
																WHERE
																	property_name = 'per_question_points'
															)
														) AS TEXT
													)
												) AS max_points,
												P .istar_user,
												P .skill_objective,
												P .item_id,
												P .item_type,
												P .course_id,
												ROW_NUMBER () OVER (
													PARTITION BY P .istar_user,
													P .skill_objective,
													P .item_id,
													P .item_type,
													P .course_id
												ORDER BY
													P .created_at DESC
												) AS rk
											FROM
												user_gamification P
											WHERE
												P .batch_group_id = :batch_group_id
											AND P .org_id = :college_id
										) SELECT
											s.*
										FROM
											summary s
										WHERE
											s.rk = 1
									) TT
								GROUP BY
									course_id,
									istar_user
							) TF
					) TCOUNT
				GROUP BY
					course_id
			) TFINAL
	) ACTUALFINAL
JOIN course ON (
	ACTUALFINAL.course_id = course. ID
)
</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Program Wise Performance of Students</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3042" type_of_report="table">	
	    <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="PROFILE_IMAGE" display_name="Profile Image" isVisible="true" name="profile_image" />
		<column columnHandler="NONE" display_name="First Name" isVisible="true" name="first_name" />
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
		<column columnHandler="NONE" display_name="Mobile Number" isVisible="true" name="mobile" />
		<column columnHandler="STAR_RATING" display_name="Attendance" isVisible="true" name="atten_perc" />
		<column columnHandler="NONE" display_name="Section/Roles" isVisible="true" name="batch_groups" />		
		<column columnHandler="USER_HANDLER" display_name="Action" isVisible="true" name="id"/>		
	<sql>
SELECT ID,
	COALESCE(trim(profile_image),'http://cdn.talentify.in:9999/video/android_images/S.png') as profile_image,
	COALESCE(first_name,'NA') as first_name,
	(case when atten_perc is not null then
						
					case 
					when atten_perc 	&lt;= 20 then 1
					when atten_perc 	&gt; 20 and atten_perc &lt;=40 then 2
					when atten_perc 	&gt; 40 and atten_perc &lt;=60 then 3
          when atten_perc 	&gt; 60 and atten_perc &lt;=80 then 4
          when atten_perc 	&gt; 80 and atten_perc &lt;=100 then 5
					end
		else 0
	end ) as atten_perc,
	email,
	 mobile,
	COALESCE(batch_groups,'') as batch_groups,	
	COALESCE(courses,'') as courses,
	COALESCE(course_ids,'') as course_ids, count(*) OVER() as total_rows
FROM
	(
		SELECT
			istar_user. ID,
			user_profile.first_name,
			istar_user.email,
			istar_user.mobile,
			CASE
		WHEN user_profile.profile_image LIKE 'null'
		OR user_profile.profile_image IS NULL THEN
			'http://cdn.talentify.in:9999/video/android_images/' || UPPER (
				SUBSTRING (
					user_profile.first_name
					FROM
						1 FOR 1
				)
			) || '.png'
		ELSE
			'http://cdn.talentify.in:9999/' || user_profile.profile_image
		END AS profile_image,
		string_agg (
			DISTINCT (batch_group. NAME),
			', '
		) AS batch_groups,
		string_agg (DISTINCT(course_name), ', ') AS courses,
		string_agg (
			DISTINCT (
				CAST (batch_group. ID AS VARCHAR)
			),
			', '
		) AS batch_group_ids,
		string_agg (
			DISTINCT (CAST(course. ID AS VARCHAR)),
			', '
		) AS course_ids
	FROM

	istar_user left join user_profile on (user_profile.user_id = istar_user. ID)
	left join user_org_mapping on (user_org_mapping.user_id = istar_user. ID)
	left join user_role on (user_role.user_id = istar_user. ID)
	left join batch_students on (istar_user. ID = batch_students.student_id)
	left join batch_group on (batch_students.batch_group_id = batch_group. ID AND batch_group.college_id = :college_id)
	left join batch on (batch_group. ID = batch.batch_group_id)
	left join course on (batch.course_id = course. ID)
		
	WHERE
		user_org_mapping.organization_id = :college_id
	
	and	user_role.role_id not in (select id from role where role_name='PRESENTOR') 
GROUP BY
		istar_user. ID,
		user_profile.first_name,
		istar_user.email,
		user_profile.profile_image
	) T1
LEFT JOIN (
	SELECT
		user_id,
		COALESCE (
			CAST (
				(
					(
						COUNT (*) FILTER (

							WHERE
								attendance.status = 'ABSENT'
						)
					) * 100 / (
						COUNT (*) FILTER (

							WHERE
								attendance.status = 'ABSENT'
							OR attendance.status = 'PRESENT'
						)
					)
				) AS INTEGER
			),
			0
		) AS atten_perc
	FROM
		attendance
	WHERE
		user_id IN (
			SELECT
				istar_user. ID
			FROM
				istar_user,
				user_org_mapping
			WHERE
				istar_user. ID = user_org_mapping.user_id
			AND user_org_mapping.organization_id = :college_id
		)
	GROUP BY
		user_id
) T2 ON (T1. ID = T2.user_id) 
order by :order_by_column :order_type limit :limit offset :offset

		</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Section Wise Performance of Students</title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>

<reports id="3043" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Date" isVisible="true" name="created_at" />		
		<column columnHandler="NONE" display_name="Section" isVisible="true" name="batch_group_name" />
		<column columnHandler="NONE" display_name="Avg Score" isVisible="true" name="avg_score" />
		
	<sql>
	SELECT 	created_at, 	batch_group_name, 	avg_score FROM 	bg_progress WHERE 	college_id = :college_id ORDER BY 	created_at
</sql>
	<filter_sql>
		
	</filter_sql>	
		<title></title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>

<reports id="3044" type_of_report="column">	
		<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
		<column columnHandler="NONE" display_name="Avg Score" isVisible="true" name="avg_score" />
		
	<sql>
SELECT DISTINCT 	csobj.skill_objective_id, 	C .course_name, 	CAST ( 		AVG (sp.percentage) AS INTEGER 	)as avg_score FROM 	batch_group AS bg, 	batch AS b, 	course_skill_objective AS csobj, 	course C, 	skill_precentile sp, 	batch_students AS bs WHERE 	bg.college_id = :college_id AND b.batch_group_id = bg. ID AND bs.batch_group_id = b.batch_group_id AND b.course_id = csobj.course_id AND csobj.course_id = C . ID AND csobj.skill_objective_id = sp.skill_id AND bs.student_id = sp.student_id GROUP BY 	C .course_name, 	csobj.skill_objective_id ORDER BY 	avg_score </sql>
	<filter_sql>
		
	</filter_sql>	
		<title></title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>

<reports id="3045" type_of_report="table">	
		<column columnHandler="NONE" display_name="Id" isVisible="true" name="bg_id" />       
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="bg_name" />
		<column columnHandler="NONE" display_name="Type" isVisible="true" name="bg_type" />
		<column columnHandler="NONE" display_name="Parent Group" isVisible="true" name="bg_parent_group" />
		<column columnHandler="NONE" display_name="Number of Batchs" isVisible="true" name="batches" />
		<column columnHandler="NONE" display_name="Number of Students" isVisible="true" name="students" />
		<column columnHandler="NONE" display_name="Group Code" isVisible="true" name="batch_code" />
		<column columnHandler="NONE" display_name="Enrolled Students" isVisible="true" name="enrolled_students" />
		<column columnHandler="BG_ROLE_HANDLER" display_name="Edit" isVisible="true" name="bg_id"/>
	<sql>
SELECT
	T1.bg_id,
	T1.bg_name,
	T1.batch_code,
	T1.bg_type,
	T1.bg_parent_group as bg_parent_group,
	COALESCE (T2.batches, 0) AS batches,
	COALESCE (T3.students, 0) AS students,
	COUNT (*) OVER () AS total_rows, 
	 T1.enrolled_students 
FROM
	(
		SELECT
			batch_group. ID AS bg_id,
			batch_group.type  as bg_type,
			batch_group. NAME AS bg_name,
			batch_group.bg_desc AS bg_desc,
			batch_group.batch_code,
			COALESCE(PBG.name,'NONE') as bg_parent_group, 
			batch_group.enrolled_students as enrolled_students  
			
		FROM
			batch_group left join  batch_group PBG on (PBG.id = batch_group.parent_group_id)
 		WHERE
			batch_group.college_id = :college_id
	) T1
LEFT JOIN (
	SELECT
		COUNT (batch. ID) AS batches,
		batch.batch_group_id
	FROM
		batch
	WHERE
		batch.batch_group_id IN (
			SELECT
				batch_group. ID
			FROM
				batch_group
			WHERE
				batch_group.college_id = :college_id
		)
	GROUP BY
		batch.batch_group_id
) T2 ON (T2.batch_group_id = T1.bg_id)
LEFT JOIN (
	SELECT
		batch_students.batch_group_id,
		COUNT (batch_students.student_id) AS students
	FROM
		batch_students
	WHERE
		batch_students.batch_group_id IN (
			SELECT
				batch_group. ID
			FROM
				batch_group
			WHERE
				batch_group.college_id = :college_id
		)
	GROUP BY
		batch_students.batch_group_id
) T3 ON (T3.batch_group_id = T1.bg_id)
 order by :order_by_column :order_type limit :limit offset :offset</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Sections Details</title>
		<y_axis_title>Number of Sections</y_axis_title>
</reports>
<reports id="3046" type_of_report="table">	
	    <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="PROFILE_IMAGE" display_name="Profile Image" isVisible="true" name="profile_image" />
		<column columnHandler="NONE" display_name="First Name" isVisible="true" name="first_name" />
		<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
		<column columnHandler="NONE" display_name="Mobile Number" isVisible="true" name="mobile" />
		<column columnHandler="STAR_RATING" display_name="Attendance" isVisible="true" name="atten_perc" />
		<column columnHandler="NONE" display_name="Organization" isVisible="true" name="organization_name" />
		<column columnHandler="NONE" display_name="Batch Groups" isVisible="true" name="batch_groups" />		
		<column columnHandler="USER_HANDLER" display_name="Action" isVisible="true" name="id"/>		
	<sql>
SELECT
	profile_image,
	first_name,
	(
		CASE
		WHEN atten_perc IS NOT NULL THEN
			CASE
		WHEN atten_perc &lt;= 20 THEN
			1
		WHEN atten_perc &gt; 20
		AND atten_perc &lt;= 40 THEN
			2
		WHEN atten_perc &gt; 40
		AND atten_perc &lt;= 60 THEN
			3
		WHEN atten_perc &gt; 60
		AND atten_perc &lt;= 80 THEN
			4
		WHEN atten_perc &gt; 80
		AND atten_perc &lt;= 100 THEN
			5
		END
		ELSE
			0
		END
	) AS atten_perc,
	email,
	mobile,
	batch_groups,
	ID,
	courses,
	course_ids,
	organization_name,
	COUNT (*) OVER () AS total_rows
FROM
	(
		SELECT
			istar_user. ID,
			user_profile.first_name,
			istar_user.email,
			COALESCE (istar_user.mobile, 0) AS mobile,
			CASE
		WHEN user_profile.profile_image LIKE 'null'
		OR user_profile.profile_image IS NULL
		OR user_profile.profile_image = ''
		 THEN
			'http://cdn.talentify.in:9999/video/android_images/' || UPPER (
				SUBSTRING (
					TRIM (user_profile.first_name)
					FROM
						1 FOR 1
				)
			) || '.png'
		WHEN user_profile.profile_image LIKE '%graph.facebook.com%'
		ThEN
			user_profile.profile_image
		ELSE
			'http://cdn.talentify.in:9999/' || user_profile.profile_image
		END AS profile_image,
		string_agg (
			DISTINCT (batch_group. NAME),
			', '
		) AS batch_groups,
		string_agg (DISTINCT(course_name), ', ') AS courses,
		string_agg (
			DISTINCT (
				CAST (batch_group. ID AS VARCHAR)
			),
			', '
		) AS batch_group_ids,
		string_agg (
			DISTINCT (CAST(course. ID AS VARCHAR)),
			', '
		) AS course_ids,
		organization. NAME AS organization_name
	FROM
		

  istar_user left join user_profile on (user_profile.user_id = istar_user. ID)
	left join user_org_mapping on (user_org_mapping.user_id = istar_user. ID)
	left join organization on (user_org_mapping.organization_id= organization.id)
	left join user_role on (user_role.user_id = istar_user. ID)
	left join batch_students on (istar_user. ID = batch_students.student_id)
	left join batch_group on (batch_students.batch_group_id = batch_group. ID)
	left join batch on (batch_group. ID = batch.batch_group_id)
	left join course on (batch.course_id = course. ID)
	where  user_role.role_id in (select id from role where role_name in ('STUDENT','TRAINER'))
	GROUP BY
		istar_user. ID,
		user_profile.first_name,
		istar_user.email,
		user_profile.profile_image,
		organization_name
	) T1
LEFT JOIN (
	SELECT
		user_id,
		COALESCE (
			CAST (
				(
					(
						COUNT (*) FILTER (

							WHERE
								attendance.status = 'ABSENT'
						)
					) * 100 / (
						COUNT (*) FILTER (

							WHERE
								attendance.status = 'ABSENT'
							OR attendance.status = 'PRESENT'
						)
					)
				) AS INTEGER
			),
			0
		)	 AS atten_perc
	FROM
		attendance
	WHERE
		user_id IN (
			SELECT
				istar_user. ID
			FROM
				istar_user,
				user_org_mapping
			WHERE
				istar_user. ID = user_org_mapping.user_id
			AND user_org_mapping.organization_id IN (SELECT ID FROM organization)
		)
	GROUP BY
		user_id
) T2 ON (T1. ID = T2.user_id)
order by :order_by_column :order_type limit :limit offset :offset
		</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Section Wise Performance of Students</title>
		<y_axis_title>Number of Students</y_axis_title>
</reports>
<reports id="3047" type_of_report="table">	
		<column columnHandler="NONE" display_name="Account Name" isVisible="true" name="cname" />
		<column columnHandler="NONE" display_name="Master" isVisible="true" name="avgmaaster" />
		<column columnHandler="NONE" display_name="Wizard" isVisible="true" name="avgwiz" />
		<column columnHandler="NONE" display_name="Rooki" isVisible="true" name="avgrooki" />
		<column columnHandler="NONE" display_name="Apprentice" isVisible="true" name="avgapp" />		
	<sql>
SELECT 	T1.cname, 	T1.summaster / countmaster AS avgmaaster, 	T1.sumwizard / countwizard AS avgwiz, 	T1.sumrookie / countrookie AS avgrooki, 	T1.sumapprentice / countapprentice AS avgapp,   count(*) OVER() as total_rows FROM 	( 		SELECT 			organization. NAME AS cname, 			SUM ( 				mastery_level_per_course.apprentice 			) AS sumapprentice, 			SUM ( 				mastery_level_per_course.rookie 			) AS sumrookie, 			SUM ( 				mastery_level_per_course.master 			) AS summaster, 			SUM ( 				mastery_level_per_course.wizard 			) AS sumwizard, 			COUNT ( 				mastery_level_per_course.apprentice 			) AS countapprentice, 			COUNT ( 				mastery_level_per_course.rookie 			) AS countrookie, 			COUNT ( 				mastery_level_per_course.master 			) AS countmaster, 			COUNT ( 				mastery_level_per_course.wizard 			) AS countwizard 		FROM 			mastery_level_per_course, 			organization 		WHERE 			organization. ID = mastery_level_per_course.college_id 		GROUP BY 			cname 	) T1 order by :order_by_column :order_type limit :limit offset :offset
		</sql>
	<filter_sql>
		
	</filter_sql>	
		<title></title>
		<y_axis_title></y_axis_title>
</reports>

<reports id="3039" type_of_report="table">	
		<column columnHandler="NONE" display_name="ID" isVisible="true" name="tid" />
		<column columnHandler="NONE" display_name="Trainer Name" isVisible="true" name="tname" />
		<column columnHandler="NONE" display_name="Trainer Email" isVisible="true" name="temail" />
		<column columnHandler="STAR_RATING" display_name="Rating" isVisible="true" name="avgrating" />
		<column columnHandler="NONE" display_name="Late Started" isVisible="true" name="late_started" />	
		<column columnHandler="NONE" display_name="Early Ended" isVisible="true" name="early_ended" />	
		<column columnHandler="NONE" display_name="Location" isVisible="true" name="city" />		
		<column columnHandler="NONE" display_name="Unbilled Hours" isVisible="true" name="hours" />			
	<sql>
SELECT   TF.tid, 	TF.tname, 	TF.joindate, 	TF.temail, 	TF.avgrating, 	COALESCE (TF.LATE_STARTED, 0) AS LATE_STARTED, 	COALESCE (TF.EARLY_ENDED, 0) AS EARLY_ENDED, 	TF.city, 	COALESCE (TF.hours, 0) AS hours, 	COALESCE (TF. MIN, 0) AS MIN, count(*) OVER() as total_rows 	 FROM 	( 		( 			SELECT 				tid, 				joindate, 				tname, 				temail, 				city, 				( 					CASE 					WHEN round( 						AVG (student_feedback.rating) 					) IS NULL THEN 						1 					ELSE 						round( 							AVG (student_feedback.rating) 						) 					END 				) AS avgrating 			FROM 				( 					SELECT 						istar_user. ID AS tid, 						istar_user.created_at AS joindate, 						user_profile.first_name AS tname, 						istar_user.email AS temail, 						pincode.city AS city 					FROM 						address, 						pincode, 						istar_user, 						user_profile, 						user_role 					WHERE 						user_profile.address_id = address. ID 					AND istar_user. ID = user_profile.user_id 					AND address.pincode_id = pincode. ID 					AND user_profile.user_id = user_role.user_id 					AND user_role.role_id in (select id from role where role_name = 'TRAINER') 				) xxx 			LEFT JOIN batch_schedule_event ON ( 				xxx.tid = batch_schedule_event.actor_id 			) 			LEFT JOIN student_feedback ON ( 				student_feedback.trainer_id = xxx.tid 				AND student_feedback.event_id = batch_schedule_event. ID 			) 			GROUP BY 				tid, 				joindate, 				tname, 				temail, 				city 			ORDER BY 				tid 		) T1 		LEFT JOIN ( 			SELECT 				exception_log.trainer_id AS t_id, 				COUNT (*) FILTER (  					WHERE 						exception_log.exception_type = 'LATE_STARTED' 				) AS LATE_STARTED, 				COUNT (*) FILTER (  					WHERE 						exception_log.exception_type = 'EARLY_ENDED' 				) AS EARLY_ENDED 			FROM 				exception_log 			WHERE 				exception_log.exception_component = 'EVENT_DELIVERY' 			GROUP BY 				exception_log.trainer_id 		) T2 ON (T1.tid = T2.t_id) 		LEFT JOIN ( 			SELECT 				batch_schedule_event.actor_id AS tids, 				SUM ( 					batch_schedule_event.eventhour 				) AS hours, 				SUM ( 					batch_schedule_event.eventminute 				) AS MIN 			FROM 				batch_schedule_event 			WHERE 				batch_schedule_event. TYPE != 'BATCH_SCHEDULE_EVENT_PRESENTOR' 			AND batch_schedule_event. TYPE != 'BATCH_SCHEDULE_EVENT_STUDENT' 			GROUP BY 				actor_id 		) T3 ON (T3.tids = T1.tid) 	) TF	order by :order_by_column :order_type limit :limit offset :offset	</sql>
	<filter_sql>
		
	</filter_sql>	
		<title></title>
		<y_axis_title></y_axis_title>
</reports>

<reports id="3048" type_of_report="pie">	
		<column columnHandler="NONE" display_name="Category" isVisible="true" name="category" />
		<column columnHandler="NONE" display_name="Count" isVisible="true" name="count" />
	<sql>
select cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (rookie_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as rookie,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (apprentice_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as apprentice,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (master_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as master,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (wizard_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as wizard
from 
(select cast (count(*)filter(where percentage &gt;=(select cast (property_value as integer ) from constant_properties where property_name ='rookie_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='rookie_max')) as integer) rookie_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='apprentice_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='apprentice_max')) as integer) apprentice_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='master_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='master_max')) as integer) as master_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='wizard_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='wizard_max'))as integer) as wizard_count
from 
(select istar_user, (case when max_points = 0 then 0 else  (points_scored*100)/max_points end ) as percentage 
from (select istar_user, sum(points) as points_scored , sum(max_points) as max_points from (WITH summary AS (
    SELECT 
	  custom_eval ( CAST ( REPLACE ( REPLACE ( REPLACE ( COALESCE (P .points, '0'), ':per_lesson_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_lesson_points') ), ':per_assessment_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_assessment_points') ), ':per_question_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_question_points') ) AS TEXT ) ) AS points,
    custom_eval ( CAST ( REPLACE ( REPLACE ( REPLACE ( COALESCE (P .max_points, '0'), ':per_lesson_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_lesson_points') ), ':per_assessment_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_assessment_points') ), ':per_question_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_question_points') ) AS TEXT ) ) AS max_points,
           p.istar_user, p.skill_objective, p.item_id, p.item_type,P.batch_group_id,
           ROW_NUMBER() OVER(PARTITION BY p.istar_user, p.skill_objective, p.item_id, p.item_type ,P.batch_group_id
                                 ORDER BY p.created_at DESC) AS rk
      FROM user_gamification p, batch B
			where p.course_id = B.course_id and p.org_id = :college_id and B.batch_group_id = p.batch_group_id and B.id = :batch_id
)
SELECT s.*
  FROM summary s
 WHERE s.rk = 1
)TT
group by istar_user
)TF
)TCOUNT
)TFINAL
</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Over All Level of Mastery</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3049" type_of_report="bar">	
        <column columnHandler="NONE" display_name="Skill Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="Wizard" isVisible="true" name="wizard" />
		<column columnHandler="NONE" display_name="Rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="Apprentice" isVisible="true" name="apprentice" />
	<sql>	
WITH summary AS (
	SELECT
		skill_objective. NAME,
		rookie,
		master,
		apprentice,
		wizard,
		ROW_NUMBER () OVER (
			PARTITION BY skill_objective. NAME
			ORDER BY
				mastery_level_per_course.created_at DESC
		) AS rk
	FROM
		mastery_level_per_course,
		skill_objective,
		batch
	WHERE
		batch.batch_group_id = mastery_level_per_course.batch_group_id
	AND batch. ID = :batch_id
	AND college_id = :college_id
AND skill_objective.type = 'SKILL'
	AND skill_objective. ID = mastery_level_per_course.skill_id
	AND (
		rookie + master + apprentice + wizard > 0
	)
) SELECT
	s.*
FROM
	summary s
WHERE
	s.rk = 1 
</sql>
<filter_sql>
		
	</filter_sql>	
		<title>Level Of Mastery Per Skill</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3051" type_of_report="bar">	
        <column columnHandler="NONE" display_name="Skill Name" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="Wizard" isVisible="true" name="wizard" />
		<column columnHandler="NONE" display_name="Rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="Apprentice" isVisible="true" name="apprentice" />
	<sql>	
WITH summary AS ( 	SELECT 		pp.name, 		CAST (mm.rookie AS INTEGER) AS rookie, 		CAST (mm.master AS INTEGER) AS master, 		CAST (mm.apprentice AS INTEGER) AS apprentice, 		CAST (mm.wizard AS INTEGER) AS wizard, 		ROW_NUMBER () OVER ( 			PARTITION BY pp.name 			ORDER BY 				mm.created_at DESC 		) AS rk 	FROM 		mastery_level_per_course mm, 		skill_objective pp 	WHERE 		course_id = :course_id 	AND college_id = :college_id AND pp.type = 'SKILL'	AND pp. ID = mm.skill_id 	AND ( 		rookie + master + apprentice + wizard > 0 	) ) SELECT 	s.* FROM 	summary s WHERE 	s.rk = 1
</sql><filter_sql>
		
	</filter_sql>	
		<title>Level Of Mastery Per Skill</title>
		<y_axis_title>Percentage of Student</y_axis_title>
</reports>
<reports id="3050" type_of_report="pie">	
		<column columnHandler="NONE" display_name="Category" isVisible="true" name="category" />
		<column columnHandler="NONE" display_name="Count" isVisible="true" name="count" />
	<sql>	
select cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (rookie_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as rookie,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (apprentice_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as apprentice,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (master_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as master,
cast ((case when (rookie_count + apprentice_count+ master_count+ wizard_count &gt; 0) then (wizard_count *100/(rookie_count + apprentice_count+ master_count+ wizard_count))  else 0 end ) as integer) as wizard
from 
(select cast (count(*)filter(where percentage &gt;=(select cast (property_value as integer ) from constant_properties where property_name ='rookie_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='rookie_max')) as integer) rookie_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='apprentice_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='apprentice_max')) as integer) apprentice_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='master_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='master_max')) as integer) as master_count,
cast (count(*)filter(where percentage &gt;(select cast (property_value as integer ) from constant_properties where property_name ='wizard_min')  and percentage&lt;= (select cast (property_value as integer ) from constant_properties where property_name ='wizard_max'))as integer) as wizard_count
from 
(select istar_user, (case when max_points = 0 then 0 else  (points_scored*100)/max_points end ) as percentage 
from (select istar_user, sum(points) as points_scored , sum(max_points) as max_points from (WITH summary AS (
    SELECT 
	  custom_eval ( CAST ( REPLACE ( REPLACE ( REPLACE ( COALESCE (P .points, '0'), ':per_lesson_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_lesson_points') ), ':per_assessment_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_assessment_points') ), ':per_question_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_question_points') ) AS TEXT ) ) AS points,
    custom_eval ( CAST ( REPLACE ( REPLACE ( REPLACE ( COALESCE (P .max_points, '0'), ':per_lesson_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_lesson_points') ), ':per_assessment_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_assessment_points') ), ':per_question_points', (select cast (property_value as varchar ) from constant_properties where property_name ='per_question_points') ) AS TEXT ) ) AS max_points,
           p.istar_user, p.skill_objective, p.item_id, p.item_type,P.batch_group_id,
           ROW_NUMBER() OVER(PARTITION BY p.istar_user, p.skill_objective, p.item_id, p.item_type ,P.batch_group_id
                                 ORDER BY p.created_at DESC) AS rk
      FROM user_gamification p
			where p.course_id = :course_id and p.org_id = :college_id
)
SELECT s.*
  FROM summary s
 WHERE s.rk = 1
)TT
group by istar_user
)TF
)TCOUNT
)TFINAL

</sql> <filter_sql>
		
	</filter_sql>	
		<title>Over All Level of Mastery</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3052" type_of_report="column">	
	    <column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />		
		<column columnHandler="NONE" display_name="rookie" isVisible="true" name="rookie" />
		<column columnHandler="NONE" display_name="apprentice" isVisible="true" name="apprentice" />
		<column columnHandler="NONE" display_name="master" isVisible="true" name="master" />
		<column columnHandler="NONE" display_name="wizard" isVisible="true" name="wizard" />
	<sql>
SELECT
	course. course_name ,
	ACTUALFINAL.master,
	ACTUALFINAL.rookie,
	ACTUALFINAL.apprentice,
	ACTUALFINAL.wizard
FROM
	(
		SELECT
			course_id,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							rookie_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS rookie,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							apprentice_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS apprentice,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							master_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS master,
			CAST (
				(
					CASE
					WHEN (
						rookie_count + apprentice_count + master_count + wizard_count &gt; 0
					) THEN
						(
							wizard_count * 100 / (
								rookie_count + apprentice_count + master_count + wizard_count
							)
						)
					ELSE
						0
					END
				) AS INTEGER
			) AS wizard
		FROM
			(
				SELECT
					course_id,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt;= (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'rookie_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'rookie_max'
							)
						) AS INTEGER
					) rookie_count,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt; (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'apprentice_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'apprentice_max'
							)
						) AS INTEGER
					) apprentice_count,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt; (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'master_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'master_max'
							)
						) AS INTEGER
					) AS master_count,
					CAST (
						COUNT (*) FILTER (

							WHERE
								percentage &gt; (
									SELECT
										CAST (property_value AS INTEGER)
									FROM
										constant_properties
									WHERE
										property_name = 'wizard_min'
								)
							AND percentage &lt;= (
								SELECT
									CAST (property_value AS INTEGER)
								FROM
									constant_properties
								WHERE
									property_name = 'wizard_max'
							)
						) AS INTEGER
					) AS wizard_count
				FROM
					(
						SELECT
							course_id,
							istar_user,
							(
								CASE
								WHEN max_points = 0 THEN
									0
								ELSE
									(points_scored * 100) / max_points
								END
							) AS percentage
						FROM
							(
								SELECT
									course_id,
									istar_user,
									SUM (points) AS points_scored,
									SUM (max_points) AS max_points
								FROM
									(
										WITH summary AS (
											SELECT
												custom_eval (
													CAST (
														REPLACE (
															REPLACE (
																REPLACE (
																	COALESCE (P .points, '0'),
																	':per_lesson_points',
																	(
																		SELECT
																			CAST (property_value AS VARCHAR)
																		FROM
																			constant_properties
																		WHERE
																			property_name = 'per_lesson_points'
																	)
																),
																':per_assessment_points',
																(
																	SELECT
																		CAST (property_value AS VARCHAR)
																	FROM
																		constant_properties
																	WHERE
																		property_name = 'per_assessment_points'
																)
															),
															':per_question_points',
															(
																SELECT
																	CAST (property_value AS VARCHAR)
																FROM
																	constant_properties
																WHERE
																	property_name = 'per_question_points'
															)
														) AS TEXT
													)
												) AS points,
												custom_eval (
													CAST (
														REPLACE (
															REPLACE (
																REPLACE (
																	COALESCE (P .max_points, '0'),
																	':per_lesson_points',
																	(
																		SELECT
																			CAST (property_value AS VARCHAR)
																		FROM
																			constant_properties
																		WHERE
																			property_name = 'per_lesson_points'
																	)
																),
																':per_assessment_points',
																(
																	SELECT
																		CAST (property_value AS VARCHAR)
																	FROM
																		constant_properties
																	WHERE
																		property_name = 'per_assessment_points'
																)
															),
															':per_question_points',
															(
																SELECT
																	CAST (property_value AS VARCHAR)
																FROM
																	constant_properties
																WHERE
																	property_name = 'per_question_points'
															)
														) AS TEXT
													)
												) AS max_points,
												P .istar_user,
												P .skill_objective,
												P .item_id,
												P .item_type,
												P .course_id,
												ROW_NUMBER () OVER (
													PARTITION BY P .istar_user,
													P .skill_objective,
													P .item_id,
													P .item_type,
													P .course_id
												ORDER BY
													P .created_at DESC
												) AS rk
											FROM
												user_gamification P
											WHERE
												P .batch_group_id in (select distinct id from batch_group where parent_group_id = :batch_group_id
UNION select id from batch_group where id = :batch_group_id )
											AND P .org_id = :college_id
										) SELECT
											s.*
										FROM
											summary s
										WHERE
											s.rk = 1
									) TT
								GROUP BY
									course_id,
									istar_user
							) TF
					) TCOUNT
				GROUP BY
					course_id
			) TFINAL
	) ACTUALFINAL
JOIN course ON (
	ACTUALFINAL.course_id = course. ID
)	
	</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Role Wise Performance of Students</title>
		<y_axis_title>Percentage of Students</y_axis_title>
</reports>
<reports id="3053" type_of_report="area">	
	    <column columnHandler="NONE" display_name="Created At" isVisible="true" name="row_key" />		
		<column columnHandler="NONE" display_name="Attendance" isVisible="true" name="col_value" />
		<column columnHandler="NONE" display_name="Batch Name" isVisible="true" name="col_name" />		
	<sql>
SELECT
	attendance_stats.created_at as row_key,
	cast (attendance_stats.percentage_attendance as integer) AS col_value,
	batch. NAME AS col_name
FROM
	attendance_stats,
	batch, batch_group
WHERE
batch.batch_group_id = batch_group.id
and batch.course_id = attendance_stats.course_id
and batch_group.id = attendance_stats.batch_group_id
and attendance_stats.course_id	 = :course_id	
and batch_group.college_id = :college_id
AND attendance_stats.percentage_attendance != 0
GROUP BY
	attendance_stats.created_at,
	attendance_stats.percentage_attendance,
	batch. NAME
ORDER BY
	attendance_stats.created_at 		
	</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Attendance Record in Sections Over Time</title>
		<y_axis_title>Percentage</y_axis_title>
</reports>
<reports id="3054" type_of_report="area">	
	    <column columnHandler="NONE" display_name="Created At" isVisible="true" name="row_key" />		
		<column columnHandler="NONE" display_name="Attendance" isVisible="true" name="col_value" />
		<column columnHandler="NONE" display_name="Batch Name" isVisible="true" name="col_name" />		
	<sql>
SELECT
	attendance_stats.created_at as row_key,
	cast (attendance_stats.percentage_attendance as integer) AS col_value,
	batch. NAME AS col_name
FROM
	attendance_stats,
	batch
WHERE
	batch.id = :batch_id
and attendance_stats.course_id = batch.course_id
AND batch.batch_group_id = attendance_stats.batch_group_id
AND attendance_stats.percentage_attendance != 0

GROUP BY
	attendance_stats.created_at,
	attendance_stats.percentage_attendance,
	batch. NAME
ORDER BY
	attendance_stats.created_at 		
	</sql>
	<filter_sql>
		
	</filter_sql>	
		<title>Attendance Record of Batch  Over Time</title>
		<y_axis_title>Percentage</y_axis_title>
</reports>
<reports id="3055" type_of_report="table">
 <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="NONE" display_name="ClassRoom Name" isVisible="true" name="classroom_identifier" />
		<column columnHandler="NONE" display_name="Organization" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Max Students" isVisible="true" name="max_students" />
		<column columnHandler="NONE" display_name="IP Address" isVisible="true" name="ip_address" />
				<column columnHandler="CLASSROOM_HANDLER" display_name="Edit" isVisible="true" name="id" />

		
<sql>select classroom_details.id, classroom_identifier, max_students, ip_address, organization.name , count(*) over() as total_rows 
from classroom_details, organization where 
organization.id = classroom_details.organization_id 
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3056" type_of_report="table">
		<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
		<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
		<column columnHandler="NONE" display_name="# Students" isVisible="true" name="student_count" />
		<column columnHandler="NONE" display_name="Completed" isVisible="true" name="completed" />
		<column columnHandler="NONE" display_name="Start Date" isVisible="true" name="start_date" />
		<column columnHandler="NONE" display_name="End Date" isVisible="true" name="end_date" />
		<column columnHandler="NONE" display_name="Scheduled Days" isVisible="true" name="scheduled_days"/>
		<column columnHandler="NONE" display_name="Task Frequency" isVisible="true" name="frequency"/>
			
<sql>
select course.id, course_name, student_count, student_count as completed, cast (start_date as varchar) as start_date, cast (end_date as varchar) as end_date, scheduled_days, frequency , cast (count(*) over() as integer) as total_rows 
from course, auto_scheduler_data
where course.id = auto_scheduler_data.course_id
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3057" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Email" isVisible="true" name="email" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<column columnHandler="NONE" display_name="# Courses" isVisible="true" name="courses" />
<sql>
SELECT DISTINCT
	istar_user. ID,
	istar_user.email,
	CAST (
		COUNT (
			DISTINCT student_playlist.lesson_id
		) AS INTEGER
	) AS tasks,
	CAST (
		COALESCE(COUNT (
			DISTINCT batch.course_id
		),0 )AS INTEGER
	) AS courses,
	COUNT (*) OVER () AS total_rows
FROM
	istar_user
JOIN user_org_mapping ON (
	istar_user. ID = user_org_mapping.user_id
	AND user_org_mapping.organization_id = :college_id
)
JOIN user_role ON (
	istar_user. ID = user_role.user_id
	AND user_role.role_id in (
		SELECT
			ID
		FROM
			ROLE
		WHERE
			role_name in ( 'STUDENT','TRAINER','MASTER_TRAINER')
	)
)
left join batch_students on (batch_students.student_id = user_role.user_id)
left join batch on (batch_students.batch_group_id = batch.batch_group_id)
LEFT JOIN student_playlist ON (
	istar_user. ID = student_playlist.student_id
)
GROUP BY
	istar_user. ID,
	istar_user.email
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3058" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<column columnHandler="NONE" display_name="# Courses" isVisible="true" name="courses" />	
<sql>
select  TFINAL.id , TFINAL.name, TFINAL.tasks, cast (COALESCE(count(DISTINCT batch.course_id),0) as integer) as courses, count(*) over() as total_rows from  (select DISTINCT TF.id, TF.name , 
cast (min (TF.stu_tasks) as integer) as tasks,
count(*) over() as total_rows  from (
SELECT DISTINCT
	batch_group. ID,
	batch_group. NAME,
	student_playlist.student_id,
	COUNT (
		DISTINCT student_playlist.lesson_id
	) AS stu_tasks
FROM
batch_group
left join batch_students on (batch_students.batch_group_id = batch_group.id )
left join student_playlist on (batch_students.student_id = student_playlist.student_id)
where 
batch_group.college_id = :college_id AND batch_group. TYPE = 'SECTION' and batch_group.is_historical_group='f'
GROUP BY
	batch_group. ID,
	batch_group. NAME,
	student_playlist.student_id
ORDER BY
	batch_group. ID,
	batch_group. NAME,
	student_playlist.student_id
) TF
group by TF.id, TF.name
)TFINAL 
left join batch on (TFINAL.id = batch.batch_group_id)
group by TFINAL.id , TFINAL.name, TFINAL.tasks
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3059" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Name" isVisible="true" name="name" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<column columnHandler="NONE" display_name="# Courses" isVisible="true" name="courses" />
<sql>
select  TFINAL.id , TFINAL.name, TFINAL.tasks, cast (COALESCE(count(DISTINCT batch.course_id),0) as integer) as courses, count(*) over() as total_rows from  (select DISTINCT TF.id, TF.name , 
cast (min (TF.stu_tasks) as integer) as tasks,
count(*) over() as total_rows  from (
SELECT DISTINCT
	batch_group. ID,
	batch_group. NAME,
	student_playlist.student_id,
	COUNT (
		DISTINCT student_playlist.lesson_id
	) AS stu_tasks
FROM
batch_group
left join batch_students on (batch_students.batch_group_id = batch_group.id )
left join student_playlist on (batch_students.student_id = student_playlist.student_id)
where 
batch_group.college_id = :college_id AND batch_group. TYPE = 'ROLE' and batch_group.is_historical_group='f'
GROUP BY
	batch_group. ID,
	batch_group. NAME,
	student_playlist.student_id
ORDER BY
	batch_group. ID,
	batch_group. NAME,
	student_playlist.student_id
) TF
group by TF.id, TF.name
)TFINAL 
left join batch on (TFINAL.id = batch.batch_group_id)
group by TFINAL.id , TFINAL.name, TFINAL.tasks
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3060" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<sql>
select course.id, course.course_name, cast (count(distinct student_playlist.lesson_id) as integer) as tasks, cast (count(*) over() as integer) as total_rows  from course 
left join student_playlist on (course.id = student_playlist.course_id and student_playlist.student_id = :entity_id)
where 
course.id in (select distinct course_id from batch where batch_group_id in (select distinct batch_group_id from batch_students where student_id  = :entity_id))
group by  course.id, course.course_name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3061" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
<column columnHandler="NONE" display_name="# Students" isVisible="true" name="total_students" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<sql>
select TF.id , TF.course_name, cast ((select count(*) from batch_students where batch_group_id =:entity_id) as integer) as total_students , cast (min(lessons) as integer) as tasks, cast (count(*) over() as integer) as total_rows from (select course.id , course.course_name, student_playlist.student_id, count(distinct student_playlist.lesson_id) as lessons
from 
course left join student_playlist on (student_playlist.course_id = course.id and student_playlist.student_id in (select distinct student_id from batch_students where batch_group_id=:entity_id))
where course.id in (select distinct course_id from batch where batch_group_id = :entity_id)
group by course.id , course.course_name,student_playlist.student_id
) TF 
group by TF.id , TF.course_name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3062" type_of_report="table">
<column columnHandler="CHECKBOX_HANDLER" display_name=" " isVisible="true" name="id" />		
<column columnHandler="NONE" display_name="Course Name" isVisible="true" name="course_name" />
<column columnHandler="NONE" display_name="# Students" isVisible="true" name="total_students" />
<column columnHandler="NONE" display_name="# Tasks" isVisible="true" name="tasks" />
<sql>
select TF.id , TF.course_name, cast ((select count(*) from batch_students where batch_group_id =:entity_id) as integer) as total_students , cast (min(lessons) as integer) as tasks, cast (count(*) over() as integer) as total_rows from (select course.id , course.course_name, student_playlist.student_id, count(distinct student_playlist.lesson_id) as lessons
from 
course left join student_playlist on (student_playlist.course_id = course.id and student_playlist.student_id in (select distinct student_id from batch_students where batch_group_id=:entity_id))
where course.id in (select distinct course_id from batch where batch_group_id = :entity_id)
group by course.id , course.course_name,student_playlist.student_id
) TF 
group by TF.id , TF.course_name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>

<reports id="3063" type_of_report="table">
<column columnHandler="NONE" display_name="StudentID" isVisible="true" name="student_id" />		
<column columnHandler="NONE" display_name="Student Name" isVisible="true" name="student_name" />
<column columnHandler="NONE" display_name="Trainer Name" isVisible="true" name="trainer_name" />
<column columnHandler="NONE" display_name="Rating" isVisible="true" name="rating" />
<column columnHandler="NONE" display_name="Comment" isVisible="true" name="comment" />
<sql>
SELECT 	af. ID AS student_id, 	ups.first_name AS student_name, 	upt.first_name AS trainer_name, 	af.rating AS rating,   af.comment as comment, CAST (COUNT(*) OVER() AS INTEGER) AS total_rows FROM 	student_feedback af, 	user_profile ups, 	user_profile upt, 	user_org_mapping uo WHERE 	af.student_id = ups.user_id AND af.trainer_id = upt.user_id order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3064" type_of_report="table">
 <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="NONE" display_name="ClassRoom Name" isVisible="true" name="classroom_identifier" />
		<column columnHandler="NONE" display_name="Organization" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Max Students" isVisible="true" name="max_students" />
		<column columnHandler="NONE" display_name="IP Address" isVisible="true" name="ip_address" />			
<sql>select classroom_details.id, classroom_identifier, max_students, ip_address, organization.name , count(*) over() as total_rows 
from classroom_details, organization where 
organization.id = classroom_details.organization_id 
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3065" type_of_report="table">
 <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="TRAINER_PROFILE_HANDLER" display_name="Email" isVisible="true" name="email" />
		<column columnHandler="NONE" display_name="Name" isVisible="true" name="first_name" />
		<column columnHandler="TRAINER_ASSESSMENT_LIST_HANDLER" display_name="Assessment List" isVisible="true" name="assessment_list" />					
<sql>
select TrainerDeatils.*,string_agg(TrainerDeatils.id ||'!#'||assessment.id ||'!#'|| assessment.assessmenttitle,'!ASSESS!')  as assessment_list, count(*) over() as total_rows from (select istar_user.id, istar_user.email, user_profile.first_name from 
istar_user , user_role, user_profile 
where 
istar_user.id = user_role.user_id 
and istar_user.id = user_profile.user_id 
and user_role.role_id in (select id from role where role_name in ('TRAINER')) 
)TrainerDeatils
left join task on (TrainerDeatils.id = task.actor and task.item_type='ASSESSMENT') 
join assessment on (task.item_id = assessment.id )
group by TrainerDeatils.id, email, first_name
order by :order_by_column :order_type limit :limit offset :offset
</sql>
</reports>
<reports id="3066" type_of_report="table">
		<column columnHandler="NONE" is_selectable="true" display_name="Course Name" isVisible="true" name="course_name" data_type="" />
		<column columnHandler="NONE" is_selectable="true"  display_name="Cluster Name" isVisible="true" name="cluster_name" />			
		<column columnHandler="NONE" is_selectable="true"  display_name="Requirement" isVisible="false" name="req" />		
		<column columnHandler="NONE" is_selectable="true" display_name="States" isVisible="true" name="state" />
		<column columnHandler="NONE" display_name="L2" isVisible="true" name="l2count" />
		<column columnHandler="NONE" display_name="L3" isVisible="true" name="l3count" />			
		<column columnHandler="NONE" display_name="L4" isVisible="true" name="l4count" />		
		<column columnHandler="NONE" display_name="L5" isVisible="true" name="l5count" />
		<column columnHandler="NONE" display_name="L6" isVisible="true" name="l6count" />
		<column columnHandler="NONE" display_name="Required Trainers" isVisible="true" name="requiremnt" />
		<column columnHandler="NONE" display_name="Existing Trainers" isVisible="true" name="exisisting" />
		<column columnHandler="NONE" display_name="Net Requirement" isVisible="true" name="net" />						
<sql>
SELECT
	STATIC_TAB.course_name,
	STATIC_TAB.cluster_name,
	STATIC_TAB.req,
	STATIC_TAB.state,
	COALESCE (FINAL_L2.l2count, 0) AS l2count,
	COALESCE (FINAL_L3.l3count, 0) AS l3count,
	COALESCE (FINAL_L4.l4count, 0) AS l4count,
	COALESCE (FINAL_L5.l5count, 0) AS l5count,
	COALESCE (FINAL_L6.l6count, 0) AS l6count,
	COALESCE (Existing_TAB.exisisting, 0) AS exisisting,
	COALESCE (STATIC_TAB.req, 0) AS requiremnt,
	STATIC_TAB.req - COALESCE (Existing_TAB.exisisting, 0) AS net,
	COUNT (*) OVER () AS total_rows
FROM
	(
		SELECT
			COURSE_TAB.course_id,
			COURSE_TAB.course_name,
			CLUSTER . ID AS cluster_id,
			CLUSTER .cluster_name,
			COURSE_TAB.trainer_count AS req,
			COALESCE (
				string_agg (DISTINCT lower(pincode.state), ', '),
				''
			) AS state
		FROM
			(
				SELECT DISTINCT
					course_id,
					course_name,
					cluster_id,
					trainer_count
				FROM
					cluster_requirement,
					course
				WHERE
					cluster_requirement.course_id = course. ID
			) COURSE_TAB
		LEFT JOIN CLUSTER ON (
			COURSE_TAB.cluster_id = CLUSTER . ID
		)
		LEFT JOIN cluster_pincode_mapping cpm ON (cpm.cluster_id = CLUSTER . ID)
		LEFT JOIN pincode ON (pincode. ID = cpm.pincode_id)
		GROUP BY
			COURSE_TAB.course_id,
			COURSE_TAB.course_name,
			CLUSTER . ID,
			CLUSTER .cluster_name,
			COURSE_TAB.trainer_count
	) STATIC_TAB
LEFT JOIN (
	SELECT
		course_id,
		cluster_id,
		l4count
	FROM
		(
			SELECT
				COUNT (DISTINCT tes.trainer_id) AS l4count,
				tes.course_id,
				cpm.cluster_id
			FROM
				trainer_empanelment_status tes,
				trainer_prefred_location tpl,
				pincode,
				cluster_pincode_mapping cpm
			WHERE
				tes.trainer_id = tpl.trainer_id
			AND tpl.pincode = pincode.pin
			AND pincode. ID = cpm.pincode_id
			AND tes.stage = 'L4'
			AND tes.empanelment_status = 'SELECTED'
			GROUP BY
				course_id,
				cluster_id
		) L4_TAB
) FINAL_L4 ON (
	FINAL_L4.course_id = STATIC_TAB.course_id
	AND FINAL_L4.cluster_id = STATIC_TAB.cluster_id
)
LEFT JOIN (
	SELECT
		course_id,
		cluster_id,
		l5count
	FROM
		(
			SELECT
				COUNT (DISTINCT tes.trainer_id) AS l5count,
				tes.course_id,
				cpm.cluster_id
			FROM
				trainer_empanelment_status tes,
				trainer_prefred_location tpl,
				pincode,
				cluster_pincode_mapping cpm
			WHERE
				tes.trainer_id = tpl.trainer_id
			AND tpl.pincode = pincode.pin
			AND pincode. ID = cpm.pincode_id
			AND tes.stage = 'L5'
			AND tes.empanelment_status = 'SELECTED'
			GROUP BY
				course_id,
				cluster_id
		) L5_TAB
) FINAL_L5 ON (
	FINAL_L5.course_id = STATIC_TAB.course_id
	AND FINAL_L5.cluster_id = STATIC_TAB.cluster_id
)
LEFT JOIN (
	SELECT
		course_id,
		cluster_id,
		l6count
	FROM
		(
			SELECT
				COUNT (DISTINCT tes.trainer_id) AS l6count,
				tes.course_id,
				cpm.cluster_id
			FROM
				trainer_empanelment_status tes,
				trainer_prefred_location tpl,
				pincode,
				cluster_pincode_mapping cpm
			WHERE
				tes.trainer_id = tpl.trainer_id
			AND tpl.pincode = pincode.pin
			AND pincode. ID = cpm.pincode_id
			AND tes.stage = 'L6'
			AND tes.empanelment_status = 'SELECTED'
			GROUP BY
				course_id,
				cluster_id
		) L6_TAB
) FINAL_L6 ON (
	FINAL_L6.course_id = STATIC_TAB.course_id
	AND FINAL_L6.cluster_id = STATIC_TAB.cluster_id
)
LEFT JOIN (
	SELECT
		course_id,
		cluster_id,
		exisisting
	FROM
		(
			SELECT
				tcs.course_id,
				cluster_requirement.cluster_id,
				COUNT (DISTINCT tcs.trainer_id) AS exisisting
			FROM
				trainer_empanelment_status tes
			LEFT JOIN trainer_prefred_location ON (
				tes.trainer_id = trainer_prefred_location.trainer_id
			)
			LEFT JOIN pincode ON (
				trainer_prefred_location.pincode = pincode.pin
			)
			LEFT JOIN cluster_pincode_mapping ON (
				pincode. ID = cluster_pincode_mapping.pincode_id
			)
			LEFT JOIN cluster_requirement ON (
				cluster_pincode_mapping.cluster_id = cluster_requirement.cluster_id
			)
			LEFT JOIN trainer_course_status ON (
				cluster_requirement.course_id = trainer_course_status.course_id
			),
			trainer_course_status tcs
		WHERE
			tes.stage = 'L6'
		AND tes.empanelment_status = 'SELECTED'
		AND tes.trainer_id = tcs.trainer_id
		AND tcs.status = 'ACTIVE'
		AND cluster_requirement.cluster_id NOTNULL
		GROUP BY
			tcs.course_id,
			cluster_requirement.cluster_id
		) L6_TAB
) Existing_TAB ON (
	Existing_TAB.course_id = STATIC_TAB.course_id
	AND Existing_TAB.cluster_id = STATIC_TAB.cluster_id
)
LEFT JOIN (
	SELECT
		course_id,
		cluster_id,
		l3count
	FROM
		(
			SELECT
				COUNT (DISTINCT tes.trainer_id) AS l3count,
				tes.course_id,
				cpm.cluster_id
			FROM
				trainer_empanelment_status tes,
				trainer_prefred_location tpl,
				pincode,
				cluster_pincode_mapping cpm
			WHERE
				tes.trainer_id = tpl.trainer_id
			AND tpl.pincode = pincode.pin
			AND pincode. ID = cpm.pincode_id
			AND tes.stage = 'L3'
			AND tes.empanelment_status = 'SELECTED'
			GROUP BY
				course_id,
				cluster_id
		) L3_TAB
) FINAL_L3 ON (
	FINAL_L3.course_id = STATIC_TAB.course_id
	AND FINAL_L3.cluster_id = STATIC_TAB.cluster_id
)
LEFT JOIN (
	SELECT
		course_id,
		cluster_id,
		l2count
	FROM
		(
			SELECT
				COUNT (DISTINCT tes.trainer_id) AS l2count,
				tes.course_id,
				cpm.cluster_id
			FROM
				trainer_empanelment_status tes,
				trainer_prefred_location tpl,
				pincode,
				cluster_pincode_mapping cpm
			WHERE
				tes.trainer_id = tpl.trainer_id
			AND tpl.pincode = pincode.pin
			AND pincode. ID = cpm.pincode_id
			AND tes.stage = 'L2'
			AND tes.empanelment_status = 'SELECTED'
			GROUP BY
				course_id,
				cluster_id
		) L2_TAB
) FINAL_L2 ON (
	FINAL_L2.course_id = STATIC_TAB.course_id
	AND FINAL_L2.cluster_id = STATIC_TAB.cluster_id
)
ORDER BY
	1
</sql>
</reports>



<reports id="3067" type_of_report="table">
		<column columnHandler="NONE" display_name="Cluster ID " isVisible="true" name="id" />
		<column columnHandler="NONE" display_name="Cluster Name" isVisible="true" name="cluster_name" />			
		<column columnHandler="NONE" display_name="Areas" isVisible="true" name="string_agg" />
		<column columnHandler="NONE" display_name="Pincodes" isVisible="true" name="string_agg1" />		
								
<sql>
SELECT DISTINCT
	CLUSTER . ID,
	CLUSTER .cluster_name,
	string_agg (distinct pincode."name", ', '),string_agg ( distinct cast(pincode.pin as VARCHAR), ',') as string_agg1,
	COUNT (*) OVER () AS total_rows
FROM
	CLUSTER,
	cluster_pincode_mapping,
	pincode
WHERE
	CLUSTER . ID = cluster_pincode_mapping.cluster_id
AND cluster_pincode_mapping.pincode_id = pincode.id
GROUP BY
	CLUSTER . ID
order by 1
</sql>
</reports>


<reports id="3068" type_of_report="table">
 <column columnHandler="NONE" display_name="Id" isVisible="true" name="id" />		
		<column columnHandler="NONE" display_name="ClassRoom Name" isVisible="true" name="classroom_identifier" />
		<column columnHandler="NONE" display_name="Organization" isVisible="true" name="name" />
		<column columnHandler="NONE" display_name="Capacity" isVisible="true" name="max_students" />
		<column columnHandler="NONE" display_name="IP Address" isVisible="true" name="ip_address" />
		<column columnHandler="CLASSROOM_HANDLER" display_name="Edit" isVisible="true" name="id" />
			
<sql>select classroom_details.id, classroom_identifier, max_students, ip_address, organization.name , count(*) over() as total_rows 
from classroom_details, organization where 
organization.id = classroom_details.organization_id  and  organization_id=:organization_id
order by :order_by_column :order_type limit :limit offset :offset
</sql>	
</reports>
<reports id="3069" type_of_report="table">	
	    <column columnHandler="NONE" is_selectable="true" display_name="Event Date" isVisible="true" data_type="date" name="eventdate" />		
		<column columnHandler="NONE" is_selectable="true" display_name="Section Name" isVisible="true" data_type="string" name="name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Course" isVisible="true" data_type="string" name="course_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Rating" data_type="int" isVisible="true" name="rating" />
		 <column columnHandler="NONE" display_name="Trainer" isVisible="true" name="first_name" />				
		<column columnHandler="NONE" display_name="Comments" isVisible="true" name="comments" />
		 <column columnHandler="NONE" display_name="Noise" isVisible="true" name="noise" />		
		<column columnHandler="NONE" display_name="Attendance" isVisible="true" name="attendance" />
		<column columnHandler="NONE" display_name="Sick" isVisible="true" name="sick" />
		 <column columnHandler="NONE" display_name="Content" isVisible="true" name="content" />		
		<column columnHandler="NONE" display_name="Assignment" isVisible="true" name="assignment" />
		<column columnHandler="NONE" display_name="Internals" isVisible="true" name="internals" />
		 <column columnHandler="NONE" display_name="Internet" isVisible="true" name="internet" />		
		<column columnHandler="NONE" display_name="Electricity" isVisible="true" name="electricity" />
		<column columnHandler="NONE" display_name="Time" isVisible="true" name="time" />
		 <column columnHandler="NONE" display_name="Projector" isVisible="true" name="projector" />		
	<sql>

select to_char(batch_schedule_event.eventdate, 'DD-Mon-yyyy HH24:MI') as eventdate, batch_group.name, course.course_name, user_profile.first_name, trainer_feedback.rating,
 trainer_feedback.comments,noise, attendance, sick, content, assignment, internals, internet, electricity, time, projector, count(*) over() as total_rows
from batch_schedule_event, trainer_feedback, user_profile, batch_group, course, classroom_details
where batch_schedule_event.id = trainer_feedback.event_id
and batch_schedule_event.classroom_id = classroom_details.id
and trainer_feedback.user_id = user_profile.user_id
and batch_schedule_event.batch_group_id = batch_group.id
and batch_schedule_event.course_id = course.id 
order by batch_schedule_event.eventdate desc
</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Trainer Feedback</title>
		<y_axis_title>Average</y_axis_title>
</reports>

<reports id="3070" type_of_report="table">	
	    <column columnHandler="NONE" display_name="Organization" isVisible="true" name="college_name" />		
		<column columnHandler="NONE" is_selectable="true" display_name="Course" isVisible="true" data_type="string" name="course_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Section Name" isVisible="true" data_type="string" name="batch_group_name" />
		<column columnHandler="NONE" display_name="Trainer" isVisible="true" name="t_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Schedule Date and Time" isVisible="true" data_type="date" name="event_date" />
		<column columnHandler="NONE" display_name="Session Started" isVisible="true" name="session_started" />		
		<column columnHandler="NONE" display_name="Session Ended" isVisible="true" name="session_ended" />
		<column columnHandler="NONE" display_name="Duration" isVisible="true" name="total_duration" />
		<column columnHandler="NONE" display_name="Student Enrolled" isVisible="true" name="student_enrolled" />
		<column columnHandler="NONE" display_name="Attendance" isVisible="true" name="total_attendance_count" />
		<column columnHandler="NONE" display_name="Session Covered" isVisible="true" name="session_covered" />
		<column columnHandler="NONE" display_name="Trainer Comments" isVisible="true" name="trainer_comment" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Trainer Rating" isVisible="true" name="trainer_rating" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Noise Feedback" isVisible="true" name="noise" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name=" Attendance Feedback" isVisible="true" name="attendance" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Sick Feedback" isVisible="true" name="sick" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Content Feedback" isVisible="true" name="content" />		
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Assignment Feedback" isVisible="true" name="assignment" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Internals Feedback" isVisible="true" name="internals" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Internet Feedback" isVisible="true" name="internet" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Electricity Feedback" isVisible="true" name="electricity" />	
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Time Feedback" isVisible="true" name="time" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Projector Feedback" isVisible="true" name="projector" />
		<column columnHandler="BOOLEAN_HANDLER" display_name="TOT Status" isVisible="true" name="tot_happened" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Avg. Student Rating" isVisible="true" name="avg_student_rating" />
	<sql>
SELECT
	TF1.college_name,
	TF1.course_name,
	TF1.batch_group_name,
	TF1.event_date,
	round(
		CAST (
			SUM (TF1.total_duration) / CAST ('60' AS FLOAT) AS NUMERIC
		),
		2
	) AS total_duration,
	TF1.student_enrolled,
	TF1.t_name,
	TF1.trainer_comment,
	TF1.trainer_rating,
	tf1.session_started,
	tf1.session_ended,
	tf1.total_attendance_count,
	tf1.avg_student_rating,
	tf1.session_covered,
	tf1.noise,
	tf1.attendance,
	tf1.sick,
	tf1. CONTENT AS CONTENT,
	tf1. ASSIGNMENT AS ASSIGNMENT,
	tf1.internals,
	tf1.internet,
	tf1.electricity,
	tf1. TIME AS TIME,
	tf1.projector,
	CASE
WHEN COUNT (
	DISTINCT batch_schedule_event. ID
) != 0 THEN
	'true'
ELSE
	'false'
END AS tot_happened
FROM
	(
		SELECT
			T1.*, CAST (
				COALESCE (
					to_char(
						MIN (
							slide_change_log.created_at
						),
						'DD-Mon-yyyy HH24:MI'
					),
					'N/A'
				) AS VARCHAR
			) AS session_started,
			CAST (
				COALESCE (
					to_char(
						MAX (
							slide_change_log.created_at
						),
						'DD-Mon-yyyy HH24:MI'
					),
					'N/A'
				) AS VARCHAR
			) AS session_ended,
			COUNT (DISTINCT attendance. ID) FILTER (

				WHERE
					attendance.status = 'PRESENT'
			) AS total_attendance_count,
			CASE
		WHEN trainer_feedback.comments IS NULL
		OR trainer_feedback.comments = '' THEN
			'N/A'
		ELSE
			trainer_feedback.comments
		END AS trainer_comment,
		COALESCE (trainer_feedback.rating, 0) AS trainer_rating,
		COALESCE (trainer_feedback.noise, '0.5') AS noise,
		COALESCE (
			trainer_feedback.attendance,
			'0.5'
		) AS attendance,
		COALESCE (trainer_feedback.sick, '0.5') AS sick,
		COALESCE (trainer_feedback. CONTENT, '0.5') AS CONTENT,
		COALESCE (
			trainer_feedback. ASSIGNMENT,
			'0.5'
		) AS ASSIGNMENT,
		COALESCE (
			trainer_feedback.internals,
			'0.5'
		) AS internals,
		COALESCE (
			trainer_feedback.internet,
			'0.5'
		) AS internet,
		COALESCE (
			trainer_feedback.electricity,
			'0.5'
		) AS electricity,
		COALESCE (trainer_feedback. TIME, '0.5') AS TIME,
		COALESCE (
			trainer_feedback.projector,
			'0.5'
		) AS projector,
		COALESCE (
			AVG (student_feedback.rating),
			'0.5'
		) AS avg_student_rating,
		COALESCE (
			string_agg (
				DISTINCT cmsession.title || '(' || cmsession. ID || ')',
				', &lt;br&gt;'
			),
			'N/A'
		) AS session_covered
	FROM
		(
			SELECT DISTINCT
				batch_schedule_event. ID AS event_id,
				organization. NAME AS college_name,
				course. ID AS course_id,
				course.course_name AS course_name,
				batch_group. NAME AS batch_group_name,
				user_profile.user_id AS user_id,
				user_profile.first_name AS t_name,
				batch_schedule_event.eventhour * 60 + batch_schedule_event.eventminute AS total_duration,
				to_char(
					batch_schedule_event.eventdate,
					'DD-Mon-yyyy HH24:MI'
				) AS event_date,
				COUNT (
					DISTINCT batch_students.student_id
				) AS student_enrolled
			FROM
				batch_schedule_event,
				classroom_details,
				organization,
				course,
				batch_group,
				batch_students,
				user_profile
			WHERE
				batch_schedule_event.classroom_id = classroom_details. ID
			AND classroom_details.organization_id = organization. ID
			AND batch_schedule_event.course_id = course. ID
			AND batch_group. ID = batch_schedule_event.batch_group_id
			AND batch_group. ID = batch_students.batch_group_id
			AND user_profile.user_id = batch_schedule_event.actor_id
			AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			AND organization. ID != 2
			GROUP BY
				organization. NAME,
				course.course_name,
				batch_group. NAME,
				batch_schedule_event. ID,
				batch_schedule_event.eventdate,
				total_duration,
				user_profile.first_name,
				user_id,
				course. ID
		) T1
	LEFT JOIN slide_change_log ON (
		slide_change_log.event_id = T1.event_id
	)
	LEFT JOIN attendance ON (
		attendance.event_id = T1.event_id
	)
	LEFT JOIN trainer_feedback ON (
		T1.event_id = trainer_feedback.event_id
	)
	LEFT JOIN cmsession ON (
		slide_change_log.cmsession_id = cmsession. ID
	)
	LEFT JOIN student_feedback ON (
		T1.event_id = student_feedback.event_id
	)
	GROUP BY
		T1.college_name,
		T1.course_name,
		T1.batch_group_name,
		T1.event_id,
		T1.event_date,
		t1.total_duration,
		T1.student_enrolled,
		T1.t_name,
		t1.user_id,
		t1.course_id,
		trainer_feedback.comments,
		trainer_feedback.rating,
		trainer_feedback.noise,
		trainer_feedback.attendance,
		trainer_feedback.sick,
		trainer_feedback. CONTENT,
		trainer_feedback. ASSIGNMENT,
		trainer_feedback.internals,
		trainer_feedback.internet,
		trainer_feedback.electricity,
		trainer_feedback. TIME,
		trainer_feedback.projector
	ORDER BY
		T1.event_date
	) TF1
LEFT JOIN batch_schedule_event ON (
	TF1.course_id = batch_schedule_event.course_id
	AND TF1.user_id = batch_schedule_event.actor_id
	AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_STUDENT'
)
GROUP BY
	TF1.college_name,
	TF1.course_name,
	TF1.batch_group_name,
	TF1.event_id,
	TF1.event_date,
	TF1.total_duration,
	TF1.student_enrolled,
	TF1.t_name,
	TF1.user_id,
	TF1.course_id,
	TF1.trainer_comment,
	TF1.trainer_rating,
	tf1.session_started,
	tf1.session_ended,
	tf1.total_attendance_count,
	tf1.avg_student_rating,
	tf1.session_covered,
	tf1.noise,
	tf1.attendance,
	tf1.sick,
	tf1. CONTENT,
	tf1. ASSIGNMENT,
	tf1.internals,
	tf1.internet,
	tf1.electricity,
	tf1. TIME,
	tf1.projector
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Daily Session Report</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3071" type_of_report="table">	
		<column columnHandler="NONE" display_name="Week" isVisible="true" name="comments" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Organization" isVisible="true" data_type="date" name="eventdate" />		
		<column columnHandler="NONE" is_selectable="true" display_name="Course" isVisible="true" data_type="string" name="course_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Section Name" isVisible="true" data_type="string" name="name" />
		<column columnHandler="NONE" display_name="Planned Hours" isVisible="true" name="comments" />
		<column columnHandler="NONE" display_name="Current Week Completed Hours" isVisible="true" name="first_name" />
		<column columnHandler="NONE" display_name="Total Hours Completed" data_type="int" isVisible="true" name="rating" />
		<column columnHandler="NONE" display_name="Event Scheduled in this Week" isVisible="true" name="noise" />		
		<column columnHandler="NONE" display_name="Events Started Late" isVisible="true" name="attendance" />
		<column columnHandler="NONE" display_name="Events Started Early" isVisible="true" name="sick" />
		<column columnHandler="NONE" display_name="Avg. Late Time" isVisible="true" name="content" />		
		<column columnHandler="NONE" display_name="Total Session Completed" isVisible="true" name="assignment" />	
		<column columnHandler="NONE" display_name="Session Covered" isVisible="true" name="assignment" />
		<column columnHandler="NONE" display_name="Student Enrolled" isVisible="true" name="comments" />
		<column columnHandler="NONE" display_name="Avg. Attendance this Week" isVisible="true" name="comments" />
		<column columnHandler="NONE" display_name="Avg. Trainer Rating" isVisible="true" name="internals" />
		<column columnHandler="NONE" display_name="Avg. Student Rating" isVisible="true" name="internet" />
	<sql>
WEEKLY REPORT

	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Trainer Feedback</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3072" type_of_report="table">	
		<column columnHandler="NONE" is_selectable="true" display_name="Trainer id" isVisible="true" name="trainer_id" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Trainer Name" isVisible="true" data_type="string" name="trainer_name" />		
		<!-- <column columnHandler="NONE" is_selectable="true" display_name="Role" isVisible="true" data_type="string" name="role" /> -->
		<column columnHandler="NONE" is_selectable="true" display_name="Course Name" isVisible="true" data_type="string" name="course_name" />
		<!-- <column columnHandler="NONE" display_name="Total TOT Attended" isVisible="true" name="comments" /> -->
		<column columnHandler="NONE" display_name="Lesson Scheduled" isVisible="true" name="lessons_scheduled" />
		<column columnHandler="NONE" display_name="Lesson Incomplete" isVisible="true" name="lessons_incomplete" />
		<column columnHandler="NONE" display_name="Lesson Pending" isVisible="true" name="lessons_pending" />		
		<column columnHandler="NONE" display_name="Lesson Completed" isVisible="true" name="lessons_complete" />
		<column columnHandler="BOOLEAN_HANDLER" display_name="TOT Happended Or Not" isVisible="true" name="tot_happened_in_this_course" />
		<column columnHandler="NONE" display_name="Total TOT Attended" isVisible="true" name="total_attendance" />
	<sql>
SELECT DISTINCT
	t2.user_id as trainer_id,
	t2.trainer_name,
	t2.course_id,
	t2.course_name,
	t2.lessons_scheduled,
	t2.lessons_incomplete,
	t2.lessons_complete,
	t2.lessons_pending, CASE
WHEN COUNT (
	batch_schedule_event.batch_group_code
) &gt; 0 THEN
	'true'
ELSE
	'false'
END AS tot_happened_in_this_course,
 COUNT ( DISTINCT attendance. ID) FILTER (
	WHERE
		attendance.status = 'PRESENT'
	AND attendance.user_id = T2.user_id
) ||'/'||  COUNT ( DISTINCT batch_schedule_event. ID) AS total_attendance
FROM
	(
		SELECT DISTINCT
			T1.*, batch_schedule_event.batch_group_code
		FROM
			(
				SELECT DISTINCT
					user_profile.user_id,
					user_profile.first_name AS trainer_name,
					course. ID AS course_id,
					course.course_name,
					COUNT (DISTINCT task. ID) FILTER (

						WHERE
							task.item_type = 'LESSON'
					) AS lessons_scheduled,
					COUNT (DISTINCT task. ID) FILTER (

						WHERE
							task.item_type = 'LESSON'
						AND task.is_active = 'f'
						AND task.start_date &lt; now()
					) AS lessons_incomplete,
					COUNT (DISTINCT task. ID) FILTER (

						WHERE
							task.item_type = 'LESSON'
						AND task.is_active = 't'
						AND task.start_date &lt; now()
					) AS lessons_complete,
					COUNT (task. ID) FILTER (

						WHERE
							task.item_type = 'LESSON'
						AND task.is_active = 'f'
						AND task.start_date &gt; now()
					) AS lessons_pending
				FROM
					task,
					student_playlist,
					user_profile,
					user_role,
					ROLE,
					lesson,
					course
				WHERE
					student_playlist.task_id = task. ID
				AND user_profile.user_id = student_playlist.student_id
				AND user_role.user_id = user_profile.user_id
				AND ROLE . ID = user_role.role_id
				AND ROLE .role_name = 'TRAINER'
				AND task.item_type = 'LESSON'
				AND student_playlist.course_id = course. ID
				GROUP BY
					user_profile.user_id,
					user_profile.first_name,
					course.course_name,
					course. ID
			) T1
		LEFT JOIN batch_schedule_event ON (
			batch_schedule_event.actor_id = T1.user_id
			AND T1.course_id = batch_schedule_event.course_id
			AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_STUDENT'
		)
	) T2
LEFT JOIN batch_schedule_event ON (
	batch_schedule_event.batch_group_code = T2.batch_group_code
	AND T2.course_id = batch_schedule_event.course_id
	AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
)
LEFT JOIN attendance ON (
	batch_schedule_event. ID = attendance.event_id
)
GROUP BY
	t2.user_id,
	t2.trainer_name,
	t2.course_id,
	t2.course_name,
	t2.lessons_scheduled,
	t2.lessons_incomplete,
	t2.lessons_complete,
	t2.lessons_pending
ORDER BY t2.course_id
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Trainer Compiled Task Report</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3073" type_of_report="table">	
		<column columnHandler="NONE" is_selectable="true" display_name="Trainer id" isVisible="true" name="user_id" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Trainer Name" isVisible="true" data_type="string" name="first_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Course Name" isVisible="true" data_type="string" name="course_name" />
		<column columnHandler="NONE" display_name="Module Name" isVisible="true" name="module_name" />
		<column columnHandler="NONE" display_name="Session Name" isVisible="true" name="cmsession_name" />
		<column columnHandler="NONE" display_name="Lesson Name" isVisible="true" name="lesson_name" />
		<column columnHandler="NONE" display_name="Status" isVisible="true" name="status" />
		<column columnHandler="NONE" display_name="Slides Covered" isVisible="true" name="slide_covered" />
		<column columnHandler="NONE" display_name="Total No. of Slides" isVisible="true" name="total_slide_count" />
		
	<sql>
SELECT DISTINCT
	t1.user_id,
	t1.first_name,
	t1.course_name,
	t1.module_name,
	t1.cmsession_name,
	t1.lesson_name,
	t1.status, COUNT (
		DISTINCT user_session_log.slide_id
	) AS slide_covered,
	COALESCE (
		user_session_log.total_slide_count,
		0
	) AS total_slide_count
FROM
	(
		SELECT DISTINCT
			user_profile.user_id,
			user_profile.first_name,
			course.course_name AS course_name,
			MODULE .module_name AS module_name,
			cmsession.title AS cmsession_name,
			lesson. ID AS lesson_id,
			lesson.title AS lesson_name,
			student_playlist.status
		FROM
			student_playlist,
			task,
			user_profile,
			course,
			MODULE,
			cmsession,
			lesson
		WHERE
			student_playlist.task_id = task. ID
		AND user_profile.user_id = student_playlist.student_id
		AND course. ID = student_playlist.course_id
		AND MODULE . ID = student_playlist.module_id
		AND cmsession. ID = student_playlist.cmsession_id
		AND lesson. ID = student_playlist.lesson_id
		ORDER BY
			lesson_id
	) T1
LEFT JOIN user_session_log ON (
	T1.user_id = user_session_log.user_id
	AND T1.lesson_id = user_session_log.lesson_id
	AND user_session_log.total_slide_count IS NOT NULL
)
GROUP BY
	t1.user_id,
	t1.first_name,
	t1.course_name,
	t1.module_name,
	t1.cmsession_name,
	t1.lesson_id,
	t1.lesson_name,
	t1.status,
	user_session_log.total_slide_count
ORDER BY t1.user_id

	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Trainer Detail Task Report</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3074" type_of_report="table">	
		
		
	    <column columnHandler="NONE" is_selectable="true" display_name="Event Date" isVisible="true" data_type="date" name="event_date" />
		<column columnHandler="NONE" is_selectable="true" display_name="Course Name" isVisible="true" data_type="string" name="course_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Section Name" isVisible="true" data_type="string" name="section_name" />
		<column columnHandler="NONE" display_name="Master Trainer" isVisible="true" name="master_trainer" />
		<column columnHandler="NONE" display_name="Enrolled Trainer" isVisible="true" name="enrolled_trainers" />
		<column columnHandler="NONE" display_name="Attendance" isVisible="true" name="attendances" />
		<column columnHandler="NONE" display_name="Session Covered " isVisible="true" name="session_covered" />
		<column columnHandler="NONE" display_name="LessonCovered -(slides moved / total slides) " isVisible="true" name="lesson_covered" />
		
	<sql>
SELECT
to_char(
TF.eventdate,
'DD-Mon-yyyy HH24:MI'
) AS event_date,
TF.course_name AS course_name,
TF.section_name AS section_name,
TF.first_name AS master_trainer,
TF.enrolled_trainers AS enrolled_trainers,
TF.attendances AS attendances,
COALESCE (
string_agg ( '&lt;b&gt;' || TF.cms_title || '&lt;/b&gt;' , ',&lt;br&gt; '),
'N/A'
) AS session_covered,
COALESCE (
string_agg (
DISTINCT '&lt;b&gt;' || TF.lesson_title || ' &lt;/b&gt; -  (' || slidemoved_total_silde || ')',
',&lt;br&gt; '
),
'N/A'
) AS lesson_covered
FROM
(
SELECT
T1.*, COUNT (DISTINCT attendance. ID) FILTER (

            WHERE
                attendance.status = 'PRESENT'
        ) || '/' || T1.enrolled_trainers AS attendances,
        cmsession.title AS cms_title,
        lesson.title AS lesson_title,
        COUNT (
            DISTINCT slide_change_log.slide_id
        ) || '/' || COUNT (
            DISTINCT slide_change_log.total_slide_count
        ) AS slidemoved_total_silde
    FROM
        (
            SELECT DISTINCT
                task.item_id,
                task.item_type,
                batch_schedule_event.eventdate,
                course.course_name,
                batch_group. NAME AS section_name,
                user_profile.first_name,
                COUNT (
                    DISTINCT batch_students.student_id
                ) AS enrolled_trainers
            FROM
                user_profile,
                ROLE,
                user_role,
                batch_schedule_event,
                task,
                course,
                batch_group,
                batch_students
            WHERE
                ROLE . ID = user_role.role_id
            AND user_role.user_id = user_profile.user_id
            AND batch_schedule_event.actor_id = user_profile.user_id
            AND task.item_id = batch_schedule_event. ID
            AND course. ID = batch_schedule_event.course_id
            AND batch_group. ID = batch_schedule_event.batch_group_id
            AND batch_students.batch_group_id = batch_group. ID
            AND ROLE .role_name = 'TRAINER'
            AND task.item_type IN (
                'CLASSROOM_SESSION',
                'REMOTE_CLASS_TRAINER',
                'WEBINAR_TRAINER'
            )
            GROUP BY
                task.item_id,
                task.item_type,
                batch_schedule_event.eventdate,
                course.course_name,
                batch_group. NAME,
                user_profile.first_name
        ) T1
    LEFT JOIN attendance ON (
        T1.item_id = attendance.event_id
    )
    LEFT JOIN slide_change_log ON (
        T1.item_id = slide_change_log.event_id
    )
    LEFT JOIN lesson ON (
        lesson. ID = slide_change_log.lesson_id
    )
    LEFT JOIN cmsession ON (
        cmsession. ID = slide_change_log.cmsession_id
    )
    GROUP BY
        T1.item_id,
        T1.item_type,
        T1.eventdate,
        T1.course_name,
        T1.section_name,
        T1.first_name,
        T1.enrolled_trainers,
        lesson.title,
        cmsession.title
) TF

GROUP BY
TF.item_type,
TF.eventdate,
TF.course_name,
TF.section_name,
TF.first_name,
TF.enrolled_trainers,
TF.attendances
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>TOT Report</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3075" type_of_report="table">	
		<column columnHandler="NONE" display_name="Trainer id" isVisible="true" name="trainer_id" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Trainer Name" isVisible="true" data_type="string" name="trainer_name" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Organization Name" isVisible="true"  data_type="string" name="org_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Course Name" isVisible="true" data_type="string" name="course_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Section Name" isVisible="true" data_type="string" name="section_name" />
		<column columnHandler="NONE" display_name="Classes Scheduled" isVisible="true" name="classes_scheduled" />
		<column columnHandler="NONE" display_name="Classes Incomplete" isVisible="true" name="classes_incomplete" />
		<column columnHandler="NONE" display_name="Classes Pending" isVisible="true" name="classes_pending" />
		<column columnHandler="NONE" display_name="Classes Completed" isVisible="true" name="classes_completed" />
		<column columnHandler="NONE" display_name="Hours Scheduled" isVisible="true" name="hours_scheduled" />
		<column columnHandler="NONE" display_name="Hours Incomplete" isVisible="true" name="hours_incomplete" />
		<column columnHandler="NONE" display_name="Hours Pending" isVisible="true" name="hours_pending" />
		<column columnHandler="NONE" display_name="Hours Finished" isVisible="true" name="hours_finished" />
	<sql>
SELECT DISTINCT
user_profile.user_id AS trainer_id,
user_profile.first_name AS trainer_name,
organization. NAME AS org_name,
course.course_name AS course_name,
batch_group. NAME AS section_name,
COUNT (
DISTINCT batch_schedule_event. ID
) AS classes_scheduled,
COUNT (
DISTINCT batch_schedule_event. ID
) FILTER (

    WHERE
        batch_schedule_event.eventdate &lt;now()
    AND batch_schedule_event.status IN ('SCHEDULED', 'TEACHING')
) AS classes_incomplete,
COUNT (
    DISTINCT batch_schedule_event. ID
) FILTER (

    WHERE
        batch_schedule_event.eventdate &lt;now()
    AND batch_schedule_event.status IN (
        'COMPLETED',
        'ATTENDANCE',
        'FEEDBACK'
    )
) AS classes_completed,
COALESCE (
    CAST (
        COUNT (
            DISTINCT batch_schedule_event. ID
        ) FILTER (

            WHERE
                batch_schedule_event.eventdate &gt; now()
            AND batch_schedule_event.status IN ('SCHEDULED', 'TEACHING')
        ) AS VARCHAR
    ),
    'N/A'
) AS classes_pending,
round(
    CAST (
        SUM (
            batch_schedule_event.eventhour * 60 + batch_schedule_event.eventminute
        ) / CAST ('60' AS FLOAT) AS NUMERIC
    ),
    2
) AS hours_scheduled,
COALESCE (
    CAST (
        round(
            CAST (
                (
                    (
                        SUM (
                            batch_schedule_event.eventhour * 60 + batch_schedule_event.eventminute
                        ) FILTER (

                            WHERE
                                batch_schedule_event.eventdate &lt;now()
                            AND batch_schedule_event.status IN ('SCHEDULED', 'TEACHING')
                        )
                    ) / CAST ('60' AS FLOAT)
                ) AS NUMERIC
            ),
            2
        ) AS VARCHAR
    ),
    '0'
) AS hours_incomplete,
COALESCE (
    CAST (
        round(
            CAST (
                (
                    (
                        SUM (
                            batch_schedule_event.eventhour * 60 + batch_schedule_event.eventminute
                        ) FILTER (

                            WHERE
                                batch_schedule_event.eventdate &lt;now()
                            AND batch_schedule_event.status IN (
                                'COMPLETED',
                                'ATTENDANCE',
                                'FEEDBACK'
                            )
                        )
                    ) / CAST ('60' AS FLOAT)
                ) AS NUMERIC
            ),
            2
        ) AS VARCHAR
    ),
    '0'
) AS hours_finished,

COALESCE (
CAST (
round(
CAST (
(
(
SUM (
batch_schedule_event.eventhour * 60 + batch_schedule_event.eventminute
) FILTER (

                            WHERE
                                batch_schedule_event.eventdate &gt; now()
                            AND batch_schedule_event.status IN (
                                'SCHEDULED',
                                'TEACHING'
                                
                            )
                        )
                    ) / CAST ('60' AS FLOAT)
                ) AS NUMERIC
            ),
            2
        ) AS VARCHAR
    ),
    '0'
) AS hours_pending

FROM
batch_schedule_event,
user_profile,
classroom_details,
organization,
course,
batch_group
WHERE
user_profile.user_id = batch_schedule_event.actor_id
AND classroom_details. ID = batch_schedule_event.classroom_id
AND classroom_details.organization_id = organization. ID
AND course. ID = batch_schedule_event.course_id
AND batch_group. ID = batch_schedule_event.batch_group_id
AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
GROUP BY
user_profile.user_id,
user_profile.first_name,
organization. NAME,
course.course_name,
batch_group. NAME

	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Trainer Session Report</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3076" type_of_report="table">	
		<column columnHandler="NONE" is_selectable="true" display_name="Trainer id" isVisible="true" name="trainer_id" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Trainer Name" isVisible="true" data_type="string" name="trainer_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Organization Name" isVisible="true" data_type="string" name="org_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Course Name" isVisible="true" data_type="string" name="course_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Section Name" isVisible="true" data_type="string" name="section_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Event Date" isVisible="true" data_type="date" name="event_date" />
		<column columnHandler="NONE" display_name="Session Covered" isVisible="true" name="session_covered" />
	<sql>
SELECT
	T1. ID AS event_id,
	t1.user_id AS trainer_id,
	t1.first_name AS trainer_name,
	t1. NAME AS org_name,
	t1.course_names AS course_name,
	t1.section_names AS section_name,
	to_char(
		t1.eventdate,
		'DD-Mon-yyyy HH24:MI'
	) AS event_date,
	COALESCE (
		string_agg (
			DISTINCT  '&lt;b&gt;' || cmsession.title || '&lt;/b&gt; - ' || '(' || cmsession. ID || ')',
			',&lt;br&gt;'
		),
		'N/A'
	) AS session_covered
FROM
	(
		SELECT
			batch_schedule_event. ID,
			user_profile.user_id,
			user_profile.first_name,
			organization. NAME,
			course.course_name AS course_names,
			batch_group. NAME AS section_names,
			batch_schedule_event.eventdate
		FROM
			batch_schedule_event,
			user_profile,
			classroom_details,
			organization,
			course,
			batch_group
		WHERE
			batch_schedule_event.actor_id = user_profile.user_id
		AND batch_schedule_event.classroom_id = classroom_details. ID
		AND classroom_details.organization_id = organization. ID
		AND batch_schedule_event.course_id = course. ID
		AND batch_schedule_event.batch_group_id = batch_group. ID
		AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
	) T1
LEFT JOIN event_log ON (
	event_log.event_id = T1. ID
	AND event_log.trainer_id = T1.user_id
)
LEFT JOIN cmsession ON (
	event_log.cmsession_id = cmsession. ID
)
GROUP BY
	T1. ID,
	T1.user_id,
	T1.first_name,
	T1. NAME,
	T1.course_names,
	T1.section_names,
	T1.eventdate
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Trainer Compiled Session Report</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3077" type_of_report="table">	
		<column columnHandler="NONE" display_name="Trainer id" isVisible="true" name="trainer_id" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Trainer Name" isVisible="true" data_type="string" name="trainer_name" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Email Id" isVisible="true" data_type="string" name="trainer_email" />
		<column columnHandler="NONE" display_name="Mobile No." isVisible="true" name="mobile_no" />
		<column columnHandler="PRESENTOR_HANDLER" display_name="Presentor" isVisible="true" name="presentor_id" />
	<sql>
SELECT
	T1. ID AS trainer_id,
	T1.email as trainer_email,
	T1.mobile as mobile_no,
	COALESCE (
		user_profile.first_name,
		'NA'
	) AS trainer_name,
	T1.ID || '!#' || COALESCE (
		CAST (
			trainer_presentor.presentor_id AS VARCHAR
		),
		'N/A'
	) as presentor_id
FROM
	(
		SELECT DISTINCT
			istar_user. ID,
			istar_user.email,
			istar_user.mobile
		FROM
			istar_user,
			user_role
		WHERE
			istar_user. ID = user_role.user_id
		AND user_role.role_id IN (
			SELECT
				ID
			FROM
				ROLE
			WHERE
				role_name = 'TRAINER'
		)
	) T1
LEFT JOIN user_profile ON (user_profile.user_id = T1. ID)
LEFT JOIN user_role ON (user_role.user_id = T1. ID)
LEFT JOIN ROLE ON (ROLE . ID = user_role.role_id)
LEFT JOIN trainer_presentor ON (
	trainer_presentor.trainer_id = T1. ID
)
GROUP BY
	T1. ID,
	email,
	mobile,
	first_name,
	trainer_presentor.presentor_id
ORDER BY
	trainer_name
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Trainer List</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3078" type_of_report="table">	
		<column columnHandler="NONE" display_name="Trainer id" isVisible="true" name="trainer_id" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Trainer Name" isVisible="true" data_type="string" name="trainer_name" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Email Id" isVisible="true" data_type="string" name="trainer_email" />
		<column columnHandler="NONE" display_name="Mobile No." isVisible="true" name="mobile_no" />
		<column columnHandler="PRESENTOR_HANDLER" display_name="Presentor" isVisible="true" name="presentor_id" />
	<sql>
SELECT
	T1. ID AS trainer_id,
	T1.email as trainer_email,
	T1.mobile as mobile_no,
	COALESCE (
		user_profile.first_name,
		'NA'
	) AS trainer_name,
	T1.ID || '!#' || COALESCE (
		CAST (
			trainer_presentor.presentor_id AS VARCHAR
		),
		'N/A'
	) as presentor_id
FROM
	(
		SELECT DISTINCT
			istar_user. ID,
			istar_user.email,
			istar_user.mobile
		FROM
			istar_user,
			user_role
		WHERE
			istar_user. ID = user_role.user_id
		AND user_role.role_id IN (
			SELECT
				ID
			FROM
				ROLE
			WHERE
				role_name = 'MASTER_TRAINER'
		)
	) T1
LEFT JOIN user_profile ON (user_profile.user_id = T1. ID)
LEFT JOIN user_role ON (user_role.user_id = T1. ID)
LEFT JOIN ROLE ON (ROLE . ID = user_role.role_id)
LEFT JOIN trainer_presentor ON (
	trainer_presentor.trainer_id = T1. ID
)
GROUP BY
	T1. ID,
	email,
	mobile,
	first_name,
	trainer_presentor.presentor_id
ORDER BY
	trainer_name
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Master Trainer List</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3079" type_of_report="table">	
		<column columnHandler="NONE" display_name="Organization id" isVisible="true" name="user_id" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Name" isVisible="true" data_type="string" name="user_fname" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Email Id" isVisible="true" data_type="string" name="user_mail" />
		<column columnHandler="NONE" display_name="Mobile No." isVisible="true" name="user_mobile" />
		<column columnHandler="NONE" display_name="Sections" isVisible="true" name="batch_group_name" />
	<sql>
SELECT
	tf.user_id,
	tf.user_mail,
	tf.user_mobile,
	tf.user_fname,
	COALESCE (batch_group. NAME, 'N/A') AS batch_group_name
FROM
	(
		SELECT
			t1.*, batch_students.batch_group_id
		FROM
			(
				SELECT
					istar_user. ID AS user_id,
					istar_user.email AS user_mail,
					istar_user.mobile AS user_mobile,
					user_profile.first_name AS user_fname
				FROM
					istar_user,
					user_profile
				WHERE
					istar_user. ID IN (
						SELECT
							user_id
						FROM
							user_role
						WHERE
							role_id IN (
								SELECT
									ID
								FROM
									ROLE
								WHERE
									role_name LIKE 'ORG_ADMIN'
							)
					)
				AND istar_user. ID = user_profile.user_id
			) T1
		LEFT JOIN batch_students ON T1.user_id = batch_students.student_id
	) TF
LEFT JOIN batch_group ON TF.batch_group_id = batch_group. ID
ORDER BY TF.user_id
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Organization List</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3080" type_of_report="table">	
		<column columnHandler="NONE" display_name="Superadmin id" isVisible="true" name="user_id" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Name" isVisible="true" data_type="string" name="user_fname" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Email Id" isVisible="true" data_type="string" name="user_mail" />
		<column columnHandler="NONE" display_name="Mobile No." isVisible="true" name="user_mobile" />
	<sql>
SELECT
	istar_user. ID AS user_id,
	istar_user.email AS user_mail,
	istar_user.mobile AS user_mobile,
	user_profile.first_name AS user_fname
FROM
	istar_user,
	user_profile
WHERE
	istar_user. ID IN (
		SELECT
			user_id
		FROM
			user_role
		WHERE
			role_id IN (
				SELECT
					ID
				FROM
					ROLE
				WHERE
					role_name LIKE 'SUPER_ADMIN'
			)
	)
AND istar_user. ID = user_profile.user_id
ORDER BY user_id
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Superadmin List</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3081" type_of_report="table">	
		<column columnHandler="NONE" display_name="User Id" isVisible="true" name="user_id" />
		<column columnHandler="NONE" is_selectable="true" display_name="User Name" isVisible="true" data_type="string" name="first_name" />
		 <column columnHandler="NONE" display_name="User Type" isVisible="true"  name="role_name" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Course Name" isVisible="true" data_type="string" name="course_name" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Module Name" isVisible="true" data_type="string" name="module_name" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Session Name" isVisible="true" data_type="string" name="cmsession_name" />
	    <column columnHandler="NONE" is_selectable="true" display_name="Lesson Name" isVisible="true" data_type="string" name="lesson_name" />     
	    <column columnHandler="NONE" display_name="Status" isVisible="true"  name="student_status" />
	    <column columnHandler="NONE" display_name="Start Date" isVisible="true"  name="task_date" />
	    <column columnHandler="NONE" display_name="Task Type" isVisible="true"  name="item_type" />
	    <column columnHandler="NONE" display_name="Slide Covered" isVisible="true"  name="slide_covered" />
        <column columnHandler="TASK_HANDLER" display_name="Action" isVisible="true" name="task_handler"/>	
	<sql>
SELECT
	tf.task_handler,
	tf.user_id,
	tf.first_name,
	TF.role_name,
	tf.course_name,
	tf.module_name,
	tf.cmsession_name,
	tf.lesson_id,
	tf.lesson_name,
	tf.student_status,
	tf.task_date,
	tf.item_type,
	COUNT (
		DISTINCT user_session_log.slide_id
	) AS slide_covered
FROM
	(
		SELECT DISTINCT
			task. ID || ',' || student_playlist.status || ',' || student_playlist. ID AS task_handler,
			user_profile.user_id AS user_id,
			user_profile.first_name AS first_name,
			ROLE .role_name,
			course.course_name || ' (' || course. ID || ')' AS course_name,
			MODULE .module_name || ' (' || MODULE . ID || ')' AS module_name,
			cmsession.title || ' (' || cmsession. ID || ')' AS cmsession_name,
			lesson. ID AS lesson_id,
			lesson.title || ' (' || lesson. ID || ')' AS lesson_name,
			student_playlist.status AS student_status,
			to_char(
				task.start_date,
				'DD-Mon-yyyy HH24:MI'
			) AS task_date,
			task.item_type
		FROM
			task,
			student_playlist,
			course,
			MODULE,
			cmsession,
			lesson,
			user_profile,
			user_role,
			ROLE
		WHERE
			student_playlist.task_id = task. ID
		AND student_playlist.course_id = course. ID
		AND student_playlist.module_id = MODULE . ID
		AND student_playlist.cmsession_id = cmsession. ID
		AND student_playlist.lesson_id = lesson. ID
		AND user_profile.user_id = student_playlist.student_id
		AND user_role.user_id = user_profile.user_id
		AND user_role.role_id = ROLE . ID
		AND task.item_type IN (
			'LESSON',
			'ASSESSMENT',
			'CUSTOM_TASK'
		)
		ORDER BY
			task_date ASC
	) TF
LEFT JOIN user_session_log ON (
	TF.user_id = user_session_log.user_id
	AND TF.lesson_id = user_session_log.lesson_id
)
GROUP BY
	tf.task_handler,
	tf.user_id,
	tf.first_name,
	TF.role_name,
	tf.course_name,
	tf.module_name,
	tf.cmsession_name,
	tf.lesson_id,
	tf.lesson_name,
	tf.student_status,
	tf.task_date,
	tf.item_type
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Superadmin List</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3082" type_of_report="table">	
		<column columnHandler="NONE"  display_name="Entity ID" isVisible="true"  name="entity_id" />
				<column columnHandler="NONE" is_selectable="true" display_name="Entity Name" isVisible="true" data_type="string" name="name" />
				<column columnHandler="NONE" is_selectable="true" display_name="Entity Type" isVisible="true"  name="entity_type" />
		
	    <column columnHandler="NONE" is_selectable="true" display_name="Course Name" isVisible="true" data_type="string" name="course_name" />
	   
	    <column columnHandler="NONE" display_name="Start Date" isVisible="true"  name="start_date" />
	    <column columnHandler="NONE" display_name="End Date" isVisible="true"  name="end_date" />
	    <column columnHandler="AUTO_SCHEDULER_HANDLER" display_name="Action" isVisible="true" name="task_data"/>
	<sql>
(
	SELECT DISTINCT
		auto_scheduler_data. ID,
		auto_scheduler_data.entity_id,
		user_profile.first_name AS NAME,
		auto_scheduler_data.entity_type,
		course.course_name || '(' || auto_scheduler_data.course_id || ')' AS course_name,
		auto_scheduler_data.start_date,
		auto_scheduler_data.end_date,
		COUNT (*) FILTER (

			WHERE
				student_playlist.status = 'COMPLETED'
		) || ',' || auto_scheduler_data.start_date || ',' || auto_scheduler_data.end_date || ',' || auto_scheduler_data.course_id || ',' || auto_scheduler_data.entity_type || ',' || auto_scheduler_data.entity_id AS task_data
	FROM
		auto_scheduler_data,
		user_profile,
		course,
		student_playlist
	WHERE
		user_profile.user_id = auto_scheduler_data.entity_id
	AND auto_scheduler_data.entity_type = 'USER'
	AND auto_scheduler_data.course_id = course. ID
	AND auto_scheduler_data.entity_id = student_playlist.student_id
	AND auto_scheduler_data.course_id = student_playlist.course_id
	GROUP BY
		auto_scheduler_data. ID,
		auto_scheduler_data.entity_id,
		user_profile.first_name,
		auto_scheduler_data.entity_type,
		auto_scheduler_data.course_id,
		course.course_name,
		auto_scheduler_data.start_date,
		auto_scheduler_data.end_date
)
UNION
	(
		SELECT DISTINCT
			auto_scheduler_data. ID,
			auto_scheduler_data.entity_id,
			batch_group. NAME AS NAME,
			auto_scheduler_data.entity_type,
			course.course_name || '(' || auto_scheduler_data.course_id || ')' AS course_name,
			auto_scheduler_data.start_date,
			auto_scheduler_data.end_date,
			COUNT (*) FILTER (

				WHERE
					student_playlist.status = 'COMPLETED'
		) || ',' || auto_scheduler_data.start_date || ',' || auto_scheduler_data.end_date || ',' || auto_scheduler_data.course_id || ',' || auto_scheduler_data.entity_type || ',' || auto_scheduler_data.entity_id AS task_data
		FROM
			auto_scheduler_data,
			batch_group,
			course,
			student_playlist,
			batch_students
		WHERE
			batch_group. ID = auto_scheduler_data.entity_id
		AND auto_scheduler_data.entity_type = 'SECTION'
		AND auto_scheduler_data.course_id = course. ID
		AND batch_group. ID = batch_students.batch_group_id
		AND batch_students.student_id = student_playlist.student_id
		AND student_playlist.course_id = auto_scheduler_data.course_id
		GROUP BY
			auto_scheduler_data. ID,
			auto_scheduler_data.entity_id,
			batch_group. NAME,
			auto_scheduler_data.entity_type,
			auto_scheduler_data.course_id,
			course.course_name,
			auto_scheduler_data.start_date,
			auto_scheduler_data.end_date
	)
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Superadmin List</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3083" type_of_report="table">	
		<column columnHandler="NONE" is_selectable="true" display_name="Organization Name" isVisible="true" data_type="string" name="college_name" />
		<column columnHandler="NONE" is_selectable="true" display_name="Section Name" isVisible="true" data_type="string" name="bg_name" />
		<column columnHandler="NONE" display_name="Student Id" isVisible="true"  name="student_id" />
		<column columnHandler="NONE" display_name="Student Name" isVisible="true"  name="student_name" />
		<column columnHandler="NONE" display_name="Completed Events" isVisible="true"  name="total_event" />
	    <column columnHandler="NONE" display_name="Attendance Count" isVisible="true" name="attendance_count" />
	<sql>
SELECT
	T1.user_id as student_id,
	T1.first_name as student_name,
	T1.col_name as college_name,
	T1.bg_name,
	T1.tot_event as total_event,
	T4.PRESENT as attendance_count
FROM
	(
		SELECT DISTINCT
			user_profile.user_id,
			user_profile.first_name,
			batch_group. ID AS bg_id,
			batch_group. NAME AS bg_name,
			organization. NAME AS col_name,
			COUNT (
				batch_schedule_event.batch_group_code
			) AS tot_event
		FROM
			batch_schedule_event,
			user_profile,
			batch_group,
			organization
		WHERE
			batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_STUDENT'
		AND batch_schedule_event.actor_id = user_profile.user_id
		AND batch_group. ID = batch_schedule_event.batch_group_id
		AND organization. ID = batch_group.college_id
		AND organization. ID != 2
		GROUP BY
			user_profile.user_id,
			user_profile.first_name,
			bg_id,
			batch_group. NAME,
			organization. NAME
		ORDER BY
			batch_group. ID 
	) T1
LEFT JOIN (
	SELECT
		t3.actor_id,
		t3.batch_group_id,
		COUNT (attendance. ID) FILTER (

			WHERE
				attendance.status = 'PRESENT'
		) AS PRESENT
	FROM
		(
			SELECT DISTINCT
				T2.*, batch_schedule_event. ID
			FROM
				(
					SELECT DISTINCT
						batch_schedule_event.actor_id,
						batch_schedule_event.batch_group_id,
						batch_schedule_event.batch_group_code
					FROM
						batch_schedule_event,
						user_profile,
						batch_group,
						organization
					WHERE
						batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_STUDENT'
					AND batch_schedule_event.actor_id = user_profile.user_id
					AND batch_group. ID = batch_schedule_event.batch_group_id
					AND organization. ID = batch_group.college_id
					AND organization. ID != 2
					ORDER BY
						batch_schedule_event.actor_id
				) T2
			LEFT JOIN batch_schedule_event ON (
				T2.batch_group_code = batch_schedule_event.batch_group_code
				AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			)
			WHERE
				batch_schedule_event. ID IS NOT NULL
		) T3
	LEFT JOIN attendance ON (
		T3. ID = attendance.event_id
		AND T3.actor_id = attendance.user_id
	)
	GROUP BY
		t3.actor_id,
		t3.batch_group_id
) T4 ON (
	T1.bg_id = T4.batch_group_id
	AND T1.user_id = T4.actor_id
)
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>User Attendance Report</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3084" type_of_report="table">
		<column columnHandler="NONE" display_name="Id" isVisible="true"  name="student_id" />
		<column columnHandler="NONE" display_name="Name" isVisible="true"  name="student_name" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Coverage" isVisible="true"  name="coverage_rate" />
	    <column columnHandler="DECIMAL_STAR_RATING" display_name="Understanding" isVisible="true" name="ease_understanding" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Examples Quality" isVisible="true"  name="quality_of_examples" />
	    <column columnHandler="DECIMAL_STAR_RATING" display_name="Subject Knowledge" isVisible="true" name="knowledge_of_matter" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Classroom Management" isVisible="true"  name="cls_management" />
	    <column columnHandler="DECIMAL_STAR_RATING" display_name="Communication" isVisible="true" name="comm_style" />
		<column columnHandler="DECIMAL_STAR_RATING" display_name="Explanation Ability" isVisible="true"  name="explain_concepts" />
	    <column columnHandler="BOOLEAN_HANDLER" display_name="Enjoyed" isVisible="true" name="enjoying_course" />
		<column columnHandler="BOOLEAN_HANDLER" display_name="Learning something useful" isVisible="true"  name="learning_something_useful" />
	    <column columnHandler="BOOLEAN_HANDLER" display_name="Got the idea about jobs and industry" isVisible="true" name="is_the_course_giving_a_fair_idea" />
	    <column columnHandler="BOOLEAN_HANDLER" display_name="Interested in Advance learning" isVisible="true" name="interested_in_learning_more_subjects" />
	    <column columnHandler="BOOLEAN_HANDLER" display_name="Are you considering a career in this sector?" isVisible="true" name="considering_a_career_in_sector" />
	    <column columnHandler="BOOLEAN_HANDLER" display_name="Recommend Istar to friends" isVisible="true" name="recommend_istar_course_to_your_friends" />
	    <column columnHandler="NONE" display_name="How can istar make the course more interesting?" isVisible="false" name="istar_the_course_more_interesting" />
	    <column columnHandler="NONE" display_name="What aspects of the course would you change/remove?" isVisible="false" name="course_would_you_change_or_remove" />
	    <column columnHandler="NONE" display_name="What aspects would you like to see coverage of?" isVisible="false" name="aspects_to_see_coverage_of" />
	    <column columnHandler="NONE" display_name="Which session did you enjoy the most?" isVisible="false" name="session_you_enjoy_the_most" />
	    <column columnHandler="NONE" display_name="Which session did you enjoy the least?" isVisible="false" name="session_you_enjoy_the_least" />
	<sql>
SELECT
	COALESCE (
		user_task_feedback.coverage,
		'5.0'
	) AS coverage_rate,
	COALESCE (
		user_task_feedback.ease_of_understanding,
		'5.0'
	) AS ease_understanding,
	COALESCE (
		user_task_feedback.quality_of_examples_provided,
		'5.0'
	) AS quality_of_examples,
	COALESCE (
		user_task_feedback.knowledge_of_subject_matter,
		'5.0'
	) AS knowledge_of_matter,
	COALESCE (
		user_task_feedback.classroom_management,
		'5.0'
	) AS cls_management,
	COALESCE (
		user_task_feedback.communication_style,
		'5.0'
	) AS comm_style,
	COALESCE (
		user_task_feedback.ablity_to_explain_concepts,
		'5.0'
	) AS explain_concepts,
	COALESCE (
		user_task_feedback.overall_how_would_you_rate_your_experience_in_the_course,
		'5.0'
	) AS rate_your_experience_in_the_course,
	user_task_feedback.feel_like_you_are_learning_something_useful AS learning_something_useful,
	user_task_feedback.interested_in_learning_more_subjects_related_to_the_sector AS interested_in_learning_more_subjects,
	user_task_feedback.recommend_istar_course_to_your_friends_based_on_your_experience AS recommend_istar_course_to_your_friends,
	COALESCE (
		user_task_feedback.istar_make_the_course_more_interesting,
		'N/A'
	) AS istar_the_course_more_interesting,
	COALESCE (
		user_task_feedback.aspects_of_the_course_would_you_change_or_remove,
		'N/A'
	) AS course_would_you_change_or_remove,
	COALESCE (
		user_task_feedback.aspects_would_you_like_to_see_coverage_of,
		'N/A'
	) AS aspects_to_see_coverage_of,
	COALESCE (
		user_task_feedback.session_which_you_enjoy_the_most,
		'N/A'
	) AS session_you_enjoy_the_most,
	COALESCE (
		user_task_feedback.session_which_you_enjoy_the_least,
		'N/A'
	) AS session_you_enjoy_the_least,
	COALESCE (
		user_task_feedback.istar_course_compare_to_your_regular_college_curriculum,
		'N/A'
	) AS istar_course_compare_to_college_curriculum,
	COALESCE (
		user_task_feedback.istar_faculty_compared_to_regular_college_faculty,
		'N/A'
	) AS istar_faculty_compared_to_college_faculty,
	user_task_feedback.enjoying_the_course AS enjoying_course,
	user_task_feedback.is_the_course_giving_you_a_fair_idea AS is_the_course_giving_a_fair_idea,
	user_task_feedback.considering_a_career_in_this_sector AS considering_a_career_in_sector,
	user_task_feedback.user_id AS student_id,
	COALESCE (
		user_profile.first_name,
		'N/A'
	) AS student_name
FROM
	user_task_feedback,
	user_org_mapping,
	user_profile
WHERE
	user_org_mapping.user_id = user_task_feedback.user_id
AND user_task_feedback.user_id = user_profile.user_id
AND user_org_mapping.organization_id = :org_id
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Student Feedback</title>
		<y_axis_title>Average</y_axis_title>
</reports>
<reports id="3085" type_of_report="table">
		<column columnHandler="NONE" display_name="Id" isVisible="true"  name="student_id" />
		<column columnHandler="NONE" display_name="Name" isVisible="true"  name="student_name" />
		<column columnHandler="NONE" display_name="College Name" isVisible="true"  name="col_name" />
		<column columnHandler="NONE" display_name="Section Name" isVisible="true"  name="bg_name" />
		<column columnHandler="NONE" display_name="Total No Events" isVisible="true"  name="total_event" />
		<column columnHandler="NONE" display_name="Student Attendance" isVisible="true"  name="student_attendance" />
	<sql>
SELECT DISTINCT
	T1.user_id as student_id,
	T1.first_name as student_name,
	T1.col_name,
	T1.bg_name,
	T4.PRESENT as student_attendance,
	T5.total_event
FROM
	(
		SELECT DISTINCT
			user_profile.user_id,
			user_profile.first_name,
			batch_group. ID AS bg_id,
			batch_group. NAME AS bg_name,
			organization. NAME AS col_name
		FROM
			batch_schedule_event,
			user_profile,
			batch_group,
			organization,
			user_role,
			ROLE
		WHERE
			batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_STUDENT'
		AND batch_schedule_event.actor_id = user_profile.user_id
		AND batch_group. ID = batch_schedule_event.batch_group_id
		AND organization. ID = batch_group.college_id
		AND organization. ID != 2
		AND user_role.user_id = batch_schedule_event.actor_id
		AND user_role.role_id = ROLE . ID
		AND ROLE .role_name = 'STUDENT'
		GROUP BY
			user_profile.user_id,
			user_profile.first_name,
			bg_id,
			batch_group. NAME,
			organization. NAME
		ORDER BY
			batch_group. ID
	) T1
LEFT JOIN (
	SELECT
		t3.actor_id,
		t3.batch_group_id,
		COUNT (attendance. ID) FILTER (

			WHERE
				attendance.status = 'PRESENT'
		) AS PRESENT,
		COUNT (DISTINCT attendance. ID) AS total_attendance
	FROM
		(
			SELECT DISTINCT
				T2.*, batch_schedule_event. ID
			FROM
				(
					SELECT DISTINCT
						batch_schedule_event.actor_id,
						batch_schedule_event.batch_group_id,
						batch_schedule_event.batch_group_code
					FROM
						batch_schedule_event,
						user_profile,
						batch_group,
						organization,
						user_role,
						ROLE
					WHERE
						batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_STUDENT'
					AND batch_schedule_event.actor_id = user_profile.user_id
					AND batch_group. ID = batch_schedule_event.batch_group_id
					AND organization. ID = batch_group.college_id
					AND organization. ID != 2
					AND user_role.user_id = batch_schedule_event.actor_id
					AND user_role.role_id = ROLE . ID
					AND ROLE .role_name = 'STUDENT'
					ORDER BY
						batch_schedule_event.actor_id
				) T2
			LEFT JOIN batch_schedule_event ON (
				T2.batch_group_code = batch_schedule_event.batch_group_code
				AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
			)
			WHERE
				batch_schedule_event. ID IS NOT NULL
		) T3
	LEFT JOIN attendance ON (
		T3. ID = attendance.event_id
		AND T3.actor_id = attendance.user_id
	)
	GROUP BY
		t3.actor_id,
		t3.batch_group_id
) T4 ON (
	T1.bg_id = T4.batch_group_id
	AND T1.user_id = T4.actor_id
)
LEFT JOIN (
	SELECT DISTINCT
		t2.actor_id,
		t2.batch_group_id,
		COUNT (batch_schedule_event. ID) FILTER (

			WHERE
				batch_schedule_event.status != 'SCHEDULED'
		) AS total_event
	FROM
		(
			SELECT DISTINCT
				batch_schedule_event.actor_id,
				batch_schedule_event.batch_group_id,
				batch_schedule_event.batch_group_code
			FROM
				batch_schedule_event,
				user_profile,
				batch_group,
				organization,
				user_role,
				ROLE
			WHERE
				batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_STUDENT'
			AND batch_schedule_event.actor_id = user_profile.user_id
			AND batch_group. ID = batch_schedule_event.batch_group_id
			AND organization. ID = batch_group.college_id
			AND organization. ID != 2
			AND user_role.user_id = batch_schedule_event.actor_id
			AND user_role.role_id = ROLE . ID
			AND ROLE .role_name = 'STUDENT'
			ORDER BY
				batch_schedule_event.actor_id
		) T2
	LEFT JOIN batch_schedule_event ON (
		T2.batch_group_code = batch_schedule_event.batch_group_code
		AND batch_schedule_event. TYPE = 'BATCH_SCHEDULE_EVENT_TRAINER'
	)
	WHERE
		batch_schedule_event. ID IS NOT NULL
	GROUP BY
		t2.actor_id,
		t2.batch_group_id
) T5 ON (
	T1.bg_id = T5.batch_group_id
	AND T1.user_id = T5.actor_id
)
WHERE
	T5.total_event > 0
	</sql>
	<filter_sql>		
	</filter_sql>	
		<title>Student Feedback</title>
		<y_axis_title>Average</y_axis_title>
</reports>
</istar_reports>